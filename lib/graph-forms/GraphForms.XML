<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GraphForms</name>
    </assembly>
    <members>
        <member name="T:GraphForms.Algorithms.SpanningTree.IRootedSpanningTreeAlgorithm`2">
            <summary>
            This interface is simply a combination of the 
            <see cref="T:ISpanningTreeAlgorithm`2{Node,Edge}"/> and
            <see cref="T:IRootedAlgorithm`1{Node}"/> interfaces, used for
            describing classes that implement both of them.
            </summary>
            <typeparam name="Node">The type of vertices in the spanning tree 
            generated by this algorithm as well as the type of its root value.
            </typeparam>
            <typeparam name="Edge">The type of edges in the spanning tree 
            generated by this algorithm.</typeparam>
        </member>
        <member name="T:GraphForms.Algorithms.SpanningTree.ISpanningTreeAlgorithm`2">
            <summary>
            Algorithm classes that implement this interface are designed to
            generate a spanning tree from a connected graph, which is a 
            sub-graph of that graph that connects all its vertices together
            with a minimal subset of edges.
            </summary>
            <typeparam name="Node">The type of vertices in the spanning tree 
            generated by this algorithm.</typeparam>
            <typeparam name="Edge">The type of edges in the spanning tree 
            generated by this algorithm.</typeparam>
            <remarks>
            Algorithm classes that implement this interface should also be 
            designed to process non-connected graphs and return a graph
            containing multiple spanning trees, one for each (weakly) 
            connected component of the input graph.
            </remarks>
        </member>
        <member name="T:GraphForms.Algorithms.IAlgorithm">
            <summary>
            Simple algorithm interface which is not connected to any graph.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.IAlgorithm.Compute">
            <summary>
            Run the algorithm and start its computation.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.IAlgorithm.Abort">
            <summary>
            Stop the running algorithm and abort its computation.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.IAlgorithm.Reset">
            <summary>
            Resets the algorithm to be ready to begin its computation again,
            but only if the algorithm isn't currently running or aborting.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.IAlgorithm.SyncRoot">
            <summary>
            Object used to lock the algorithm for thread safety.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.IAlgorithm.State">
            <summary>
            The current state of the computation of the algorithm.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.SpanningTree.ISpanningTreeAlgorithm`2.SpanningTree">
            <summary>
            A sub-graph of the original connected graph that connects all
            its vertices together with a minimal subset of its edges.
            </summary><remarks>
            If the original graph isn't connected, this graph should contain
            multiple spanning trees, one for each (weakly) connected
            component of the original graph.
            </remarks>
        </member>
        <member name="T:GraphForms.Algorithms.IRootedAlgorithm`1">
            <summary>
            An extension of <see cref="T:GraphForms.Algorithms.IAlgorithm"/> which also acts as a wrapper
            for a <typeparamref name="Node"/> instance that can be set null like
            a reference type, and used to initiate the algorithm as its root
            starting point.</summary>
            <typeparam name="Node">The underlying type of the root starting point
            of this algorithm.</typeparam>
        </member>
        <member name="M:GraphForms.Algorithms.IRootedAlgorithm`1.TryGetRoot">
            <summary>
            Tries to get the current root value of this rooted algorithm, 
            or returns the default value of the <typeparamref name="Node"/> 
            type if <see cref="P:GraphForms.Algorithms.IRootedAlgorithm`1.HasRoot"/> is false.
            </summary>
            <returns>The current root value, or the default of the
            <typeparamref name="Node"/> type if this rooted algorithm 
            doesn't have a root value.</returns>
        </member>
        <member name="M:GraphForms.Algorithms.IRootedAlgorithm`1.SetRoot(`0)">
            <summary>
            Sets the root value of this rooted algorithm to the given 
            <typeparamref name="Node"/> instance.
            </summary>
            <param name="root">The new root value of this rooted algorithm.
            </param>
        </member>
        <member name="M:GraphForms.Algorithms.IRootedAlgorithm`1.ClearRoot">
            <summary>
            Clears the current root value of this rooted algorithm, setting 
            it back to the default value for the <typeparamref name="Node"/> 
            type and setting <see cref="P:GraphForms.Algorithms.IRootedAlgorithm`1.HasRoot"/> to false.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.IRootedAlgorithm`1.HasRoot">
            <summary>
            Indicates whether this rooted algorithm has a root value.
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2">
            <summary>
            This is the base class for algorithms designed to traverse a graph
            and systematically explore its nodes and edges.  It has predefined
            events that derived classes should call as they explore its graph.
            </summary>
            <typeparam name="Node">The type of vertices in the graph traversed
            and explored by this algorithm.</typeparam>
            <typeparam name="Edge">The type of edges in the graph traversed
            and explored by this algorithm.</typeparam>
        </member>
        <member name="T:GraphForms.Algorithms.AAlgorithm">
            <summary>
            Simple thread-safe implementation of the <see cref="T:GraphForms.Algorithms.IAlgorithm"/> 
            interface, with handlers for computation state changes.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.AAlgorithm.OnStateChanged(GraphForms.Algorithms.ComputeState)">
            <summary>
            Reimplement this function to trigger events and other reactions
            to any change the <see cref="P:GraphForms.Algorithms.AAlgorithm.State"/> of this 
            <see cref="T:GraphForms.Algorithms.AAlgorithm"/> instance which occur after more
            specific handlers have been called.</summary>
            <param name="oldState">The previous <see cref="P:GraphForms.Algorithms.AAlgorithm.State"/> of this
            <see cref="T:GraphForms.Algorithms.AAlgorithm"/> instance before the state change
            occurred.</param>
        </member>
        <member name="M:GraphForms.Algorithms.AAlgorithm.OnStarted">
            <summary>
            Reimplement this function to trigger events and other actions
            which occur before <see cref="M:GraphForms.Algorithms.AAlgorithm.InternalCompute"/> is called
            and this <see cref="T:GraphForms.Algorithms.AAlgorithm"/> instance's computation begins.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.AAlgorithm.OnFinished">
            <summary>
            Reimplement this function to trigger events and other actions
            which occur after <see cref="M:GraphForms.Algorithms.AAlgorithm.InternalCompute"/> is called
            and this <see cref="T:GraphForms.Algorithms.AAlgorithm"/> instance's computation 
            successfully ends.</summary>
        </member>
        <member name="M:GraphForms.Algorithms.AAlgorithm.OnAborted">
            <summary>
            Reimplement this function to trigger events and other actions
            which occur after <see cref="M:GraphForms.Algorithms.AAlgorithm.InternalCompute"/> is called
            and this <see cref="T:GraphForms.Algorithms.AAlgorithm"/> instance's computation
            has been aborted before completion.</summary>
        </member>
        <member name="M:GraphForms.Algorithms.AAlgorithm.InternalCompute">
            <summary>
            The implementation of this function should contain the core code 
            that this <see cref="T:GraphForms.Algorithms.AAlgorithm"/> instance executes during its
            computation. This code should be designed to stop as soon as 
            possible whenever an abortion is pending.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.AAlgorithm.Compute">
            <summary>
            Run the algorithm and start its computation.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.AAlgorithm.Abort">
            <summary>
            Stop the running algorithm and abort its computation.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.AAlgorithm.Reset">
            <summary>
            Resets the algorithm to be ready to begin its computation again,
            but only if the algorithm isn't currently running or aborting.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.AAlgorithm.SyncRoot">
            <summary>
            Object used to lock the algorithm for thread safety.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.AAlgorithm.State">
            <summary>
            The current state of the computation of the algorithm.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.AGraphAlgorithm`2.mGraph">
            <summary>
            The graph processed by this algorithm.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2.mDepths">
            <summary>
            This array holds the depths at which nodes were encountered
            during the traversal of the graph, which is number of nodes in
            traversal path from the corresponding node to the root node
            where the traversal started.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2.bUndirected">
            <summary>
            If true, the graph is traversed from both the source edges and
            destination edges of each node instead of just one or the other,
            but <see cref="P:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2.Reversed"/> still determines which edge list is
            traversed first on each node.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2.bReversed">
            <summary>
            If true, the graph is traversed from destination nodes to source
            nodes instead of from source nodes to destination nodes.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2.#ctor(GraphForms.Algorithms.Digraph{`0,`1},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of an algorithm for traversing and
            exploring the given graph with the given directional constraints.
            </summary>
            <param name="graph">The graph to be explored by this algorithm.
            </param>
            <param name="directed">Whether the <paramref name="graph"/> is
            traversed as a directed graph or as an undirected one.</param>
            <param name="reversed">Whether the <paramref name="graph"/> is
            traversed in reverse, from edge destination to source, rather
            than from edge source to destination.</param>
        </member>
        <member name="M:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2.OnInitializeNode(GraphForms.Algorithms.Digraph{`0,`1}.GNode)">
            <summary><para>
            Called just after the given node has finished being initialized,
            before this algorithm begins its traversal of the graph.
            </para><para>
            DO NOT CHANGE THE COLOR OF <paramref name="n"/> UNLESS NECESSARY.
            </para></summary>
            <param name="n">The <typeparamref name="Node"/> instance that  
            has just finished initializing.</param><remarks>
            The <see cref="F:Digraph`2.GNode.Color"/> of <paramref name="n"/>
            will be <see cref="F:GraphForms.Algorithms.GraphColor.White"/> when this function is
            called. If it is set to any other color, it won't be explored by
            this algorithm unless it was set as a root. Other nodes
            connected to it might not be explored as well, depending on the
            structure of the graph being traversed by this algorithm.
            </remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2.OnStartNode(GraphForms.Algorithms.Digraph{`0,`1}.GNode)">
            <summary><para>
            Called right before the traversal starts at the given root node,
            <paramref name="n"/>.</para><para>
            DO NOT CHANGE THE COLOR OF <paramref name="n"/> UNLESS NECESSARY.
            </para></summary>
            <param name="n">The root node at which the algorithm starts 
            exploring the graph.</param>
        </member>
        <member name="M:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2.OnDiscoverNode(GraphForms.Algorithms.Digraph{`0,`1}.GNode,System.UInt32)">
            <summary><para>
            Called when an unexplored node is first encountered during the
            traversal of the graph, before this algorithm begins to explore
            its neighbors.</para><para>
            DO NOT CHANGE THE COLOR OF <paramref name="n"/> UNLESS NECESSARY.
            </para></summary>
            <param name="n">The unexplored node that has just been 
            discovered in the graph traversal.</param>
        </member>
        <member name="M:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2.OnFinishNode(GraphForms.Algorithms.Digraph{`0,`1}.GNode,System.UInt32)">
            <summary><para>
            Called after the algorithm has finished exploring all of the
            neighbors of the given node <paramref name="n"/> and returns
            to it.</para><para>
            DO NOT CHANGE THE COLOR OF <paramref name="n"/> UNLESS NECESSARY.
            </para></summary>
            <param name="n">The node that 
            this graph traversal algorithm has just finished with and 
            won't be visiting again.</param>
        </member>
        <member name="M:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2.OnExamineEdge(GraphForms.Algorithms.Digraph{`0,`1}.GEdge,System.Boolean,System.UInt32)">
            <summary>
            Called whenever the algorithm explores any edge in the graph,
            right before more specific actions are taken based on whether
            the edge's target is unexplored, being explored, or already
            has been explored.
            </summary>
            <param name="e">The edge being explored by this graph traversal 
            algorithm.</param>
            <param name="reversed">True if the edge is being explored from 
            destination to source instead of from source to destination.
            </param>
        </member>
        <member name="M:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2.OnTreeEdge(GraphForms.Algorithms.Digraph{`0,`1}.GEdge,System.Boolean,System.UInt32)">
            <summary>
            Called whenever the algorithm explores an edge in the graph
            connected to an unexplored node.
            </summary>
            <param name="e">The edge being explored by this graph traversal 
            algorithm.</param>
            <param name="reversed">True if the edge is being explored from 
            destination to source instead of from source to destination.
            </param>
        </member>
        <member name="M:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2.OnGrayEdge(GraphForms.Algorithms.Digraph{`0,`1}.GEdge,System.Boolean,System.UInt32)">
            <summary>
            Called whenever the algorithm explores an edge in the graph
            connected to a node that is currently being explored.
            </summary>
            <param name="e">The edge being explored by this graph traversal 
            algorithm.</param>
            <param name="reversed">True if the edge is being explored from 
            destination to source instead of from source to destination.
            </param>
        </member>
        <member name="M:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2.OnBlackEdge(GraphForms.Algorithms.Digraph{`0,`1}.GEdge,System.Boolean,System.UInt32)">
            <summary>
            Called whenever the algorithm explores an edge in the graph
            connected to a node that has already been explored.
            </summary>
            <param name="e">The edge being explored by this graph traversal 
            algorithm.</param>
            <param name="reversed">True if the edge is being explored from 
            destination to source instead of from source to destination.
            </param>
        </member>
        <member name="M:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2.Initialize">
            <summary>
            Initializes the graph traversal algorithm before it is performed,
            including setting data fields associated with each individual
            <typeparamref name="Node"/> instance in the <see cref="!:Graph"/>,
            particularly their Index and Color.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2.InternalCompute">
            <summary>
            This function performs the core functions of a graph traversal
            algorithm, first calling <see cref="M:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2.Initialize"/> to initialize
            any needed data, and then attempting to run main traversal
            computation at the root node (if it's valid), and then restarting
            it at any nodes that haven't been explored.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2.ComputeFromRoot(GraphForms.Algorithms.Digraph{`0,`1}.GNode)">
            <summary>
            The implementation of this function should contain the core code  
            for traversing this algorithm's graph starting at the given 
            <paramref name="root"/> node and systematically traveling along
            edges to explore nodes, turning nodes gray as they are being
            explored and then black after finishing exploring them, and
            calling the exploration event functions along the way.
            </summary>
            <param name="root">The root node at which the traversal of the
            graph starts by following its edges to its unexplored neighboring
            nodes and so on until a dead end is reached.
            </param>
        </member>
        <member name="P:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2.Reversed">
            <summary>
            If true, the graph is traversed from destination nodes to source
            nodes instead of from source nodes to destination nodes.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2.Directed">
            <summary>
            If false, the graph is traversed from both the source edges and
            destination edges of each node instead of just one or the other,
            but <see cref="P:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2.Reversed"/> still determines which edge list is
            traversed first on each node.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2.RootOnly">
            <summary>
            If false (the default value), this algorithm continues to 
            traverse its graph after the root node and all nodes reachable 
            from it have been explored, restarting the traversal from the 
            next unexplored node found until all nodes in the graph have 
            been explored.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Search.AGraphTraversalAlgorithm`2.MaxDepth">
            <summary><para>
            Gets or sets the maximum exploration depth from the root nodes
            at which the exploration starts.</para><para>
            Default is <see cref="F:System.UInt32.MaxValue"/>.</para></summary><value>
            Maximum exploration depth.</value>
        </member>
        <member name="F:GraphForms.Algorithms.Path.DFLongestPath`2.mStartIndex">
            <summary>
            The index of the node where the DFS started
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Path.DFLongestPath`2.mStart">
            <summary>
            The 2nd longest branch attached to node where the DFS started
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.ARootedAlgorithm`1">
            <summary>
            An extension of <see cref="T:GraphForms.Algorithms.AAlgorithm"/> which also acts as a wrapper
            for a <typeparamref name="Node"/> instance that can be set null like
            a reference type, and used to initiate the algorithm as its root
            starting point.</summary>
            <typeparam name="Node">The underlying type of the root starting point
            of this algorithm.</typeparam>
        </member>
        <member name="M:GraphForms.Algorithms.ARootedAlgorithm`1.TryGetRoot">
            <summary>
            Tries to get the current root value of this rooted algorithm, 
            or returns the default value of the <typeparamref name="Node"/> 
            type if <see cref="P:GraphForms.Algorithms.ARootedAlgorithm`1.HasRoot"/> is false.
            </summary>
            <returns>The current root value, or the default of the
            <typeparamref name="Node"/> type if this rooted algorithm 
            doesn't have a root value.</returns>
        </member>
        <member name="M:GraphForms.Algorithms.ARootedAlgorithm`1.SetRoot(`0)">
            <summary>
            Sets the root value of this rooted algorithm to the given 
            <typeparamref name="Node"/> instance.
            </summary>
            <param name="root">The new root value of this rooted algorithm.
            </param>
        </member>
        <member name="M:GraphForms.Algorithms.ARootedAlgorithm`1.ClearRoot">
            <summary>
            Clears the current root value of this rooted algorithm, setting 
            it back to the default value for the <typeparamref name="Node"/> 
            type and setting <see cref="P:GraphForms.Algorithms.ARootedAlgorithm`1.HasRoot"/> to false.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.ARootedAlgorithm`1.OnRootChanged(`0)">
            <summary>
            Called whenever root value of this rooted algorithm is set to a 
            value that is different from its current root value, using the
            <see cref="M:GraphForms.Algorithms.ARootedAlgorithm`1.SetRoot(`0)"/> function.
            </summary>
            <param name="oldRoot">The previous root value of this rooted
            algorithm before it was set to its current value.</param>
        </member>
        <member name="M:GraphForms.Algorithms.ARootedAlgorithm`1.Compute(`0)">
            <summary>
            Sets the root value of this rooted algorithm to the given 
            <typeparamref name="Node"/> instance to act as a starting point 
            for the computation, and then starts running this algorithm and
            its computation.</summary>
            <param name="root">The new root value for this rooted algorithm
            to act as a starting point for its computation.</param>
        </member>
        <member name="P:GraphForms.Algorithms.ARootedAlgorithm`1.HasRoot">
            <summary>
            Indicates whether this rooted algorithm has a root value.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Collections.GTree`3.NodeData">
            <summary>
            The <typeparamref name="Node"/> instance stored
            in this single element of a tree data structure.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Collections.GTree`3.EdgeData">
            <summary>
            The <typeparamref name="Edge"/> instance stored
            in this single element of a tree data structure.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Collections.GTree`3.GeomData">
            <summary>
            The <typeparamref name="Geom"/> instance stored
            in this single element of a tree data structure.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.GTree`3.SetRoot(GraphForms.Algorithms.Collections.GTree{`0,`1,`2})">
            <summary>
            Sets the <see cref="P:GraphForms.Algorithms.Collections.GTree`3.Root"/> of this graph tree to the given
            <paramref name="root"/> value. If this graph tree's old root
            isn't null, this graph tree is removed from its 
            <see cref="P:GraphForms.Algorithms.Collections.GTree`3.Branches"/> and it is invalidated. If the new 
            <paramref name="root"/> is not null, this graph tree
            is then added to its <see cref="P:GraphForms.Algorithms.Collections.GTree`3.Branches"/> and it is then
            invalidated as well.</summary>
            <param name="root">The new <see cref="P:GraphForms.Algorithms.Collections.GTree`3.Root"/> 
            of this graph tree.</param>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.GTree`3.Root">
            <summary>
            Gets the root (parent) of this graph tree, which is invalidated
            (along with its root through the ancestry chain) every time this
            graph tree is invalidated.</summary>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.GTree`3.TreeSize">
            <summary>
            Gets the total number of nodes in this graph tree and all of its
            <see cref="P:GraphForms.Algorithms.Collections.GTree`3.Branches"/>. This equals one if this graph tree
            doesn't have any branches.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.GTree`3.Depth">
            <summary>
            Gets the depth of this graph tree in its overall tree data
            structure, which is zero if this graph tree's <see cref="P:GraphForms.Algorithms.Collections.GTree`3.Root"/>
            is null.</summary>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.GTree`3.BranchIndex">
            <summary>
            Gets the index of this graph tree in the <see cref="P:GraphForms.Algorithms.Collections.GTree`3.Branches"/>
            of its <see cref="P:GraphForms.Algorithms.Collections.GTree`3.Root"/>, or -1 if this graph tree doesn't
            have a root.</summary>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.GTree`3.Branches">
            <summary>
            Gets an array containing all graph tree instances that
            currently have this graph tree as their <see cref="P:GraphForms.Algorithms.Collections.GTree`3.Root"/>.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.GTree`3.BranchCount">
            <summary>
            Gets the number of <see cref="P:GraphForms.Algorithms.Collections.GTree`3.Branches"/>
            that this graph tree currently has.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.GTree`3.BranchCapacity">
            <summary>
            Gets or sets the maximum number of <see cref="P:GraphForms.Algorithms.Collections.GTree`3.Branches"/> 
            that this graph tree is currently capable of holding without
            resizing its internal array.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <see cref="P:GraphForms.Algorithms.Collections.GTree`3.BranchCapacity"/> is set to a value that is
            less than <see cref="P:GraphForms.Algorithms.Collections.GTree`3.BranchCount"/>.</exception>
            <exception cref="T:System.OutOfMemoryException">There is not enough
            memory on the system.</exception><remarks>
            Be aware that this value is doubled every time a new branch 
            is added that would cause its <see cref="P:GraphForms.Algorithms.Collections.GTree`3.BranchCount"/> to  
            exceed its capacity.</remarks>
        </member>
        <member name="T:GraphForms.GraphElement">
            <summary>
            A class with traceable ancestry, 
            sorted within its parent based on its Z value 
            and specified stacking order.
            </summary>
        </member>
        <member name="F:GraphForms.GraphElement.itemDepth">
            <summary>
            The depth in the heirarchy tree of parents;
            0 if parent is null; -1 if unresolved.
            </summary>
        </member>
        <member name="M:GraphForms.GraphElement.InvalidateDepthRecursively">
            <summary>
            Sets the depth of this object and all its children to -1.
            </summary>
        </member>
        <member name="M:GraphForms.GraphElement.ResolveDepth">
            <summary>
            Resolves the stacking depth of this object and all its ancestors.
            </summary>
        </member>
        <member name="M:GraphForms.GraphElement.IsAncestorOf(GraphForms.GraphElement)">
            <summary>
            Tests if this object is an ancestor of <paramref name="child"/>
            (i.e., if this object is <paramref name="child"/>'s parent,
            or one of <paramref name="child"/>'s parent's ancestors).
            </summary>
            <param name="child">The potential descendant to test.</param>
            <returns>true if this object is an ancestor of 
            <paramref name="child"/>, false otherwise.</returns>
        </member>
        <member name="M:GraphForms.GraphElement.CommonAncestor(GraphForms.GraphElement)">
            <summary>
            Returns the closest common ancestor object 
            of this object and <paramref name="other"/>, 
            or null if <paramref name="other"/> is null, 
            or if there is no common ancestor.
            </summary>
            <param name="other">The other object to test.</param>
            <returns>The closest common ancestor object
            of this object and <paramref name="other"/></returns>
        </member>
        <member name="M:GraphForms.GraphElement.ClosestLeaf(GraphForms.GraphElement,GraphForms.GraphElement)">
            <summary>
            Determines whether or not <paramref name="item1"/> is on top of
            its sibling, <paramref name="item2"/>, 
            based on their stacking properties, Z values, and sibling indexes.
            </summary>
            <param name="item1">The first sibling to compare.</param>
            <param name="item2">The second sibling to compare.</param>
            <returns>true if <paramref name="item1"/> is on top of 
            <paramref name="item2"/>, false otherwise.</returns>
        </member>
        <member name="M:GraphForms.GraphElement.ClosestItemFirst(GraphForms.GraphElement,GraphForms.GraphElement)">
            <summary>
            Tests whether or not <paramref name="item1"/> 
            is on top of or stacked closer to the top 
            of the display than <paramref name="item2"/>, 
            in terms of Z-values and parent stacking rules.
            </summary>
            <param name="item1">The first specified item.</param>
            <param name="item2">The second specified item.</param>
            <returns>true if <paramref name="item1"/> is closer top
            than <paramref name="item2"/>, false otherwise.</returns>
        </member>
        <member name="F:GraphForms.GraphElement.sequentialOrdering">
            <summary>
            Whether or not the sibling indexes of the children 
            match their ordering in their containing list.
            </summary>
        </member>
        <member name="F:GraphForms.GraphElement.holesInSiblingIndex">
            <summary>
            Whether or not there are gaps in the sibling indexes of the children.
            </summary>
        </member>
        <member name="M:GraphForms.GraphElement.EnsureSortedChildren">
            <summary>
            Ensures the children are sorted in ascending order (bottom-most first)
            based on their stacking properties, Z values, and sibling indexes.
            </summary>
        </member>
        <member name="M:GraphForms.GraphElement.EnsureSequentialSiblingIndex">
            <summary>
            Ensures that the list of children is sorted by insertion order,
            and that the sibling indexes are packed (no gaps), and start at 0.
            </summary>
        </member>
        <member name="M:GraphForms.GraphElement.StackBefore(GraphForms.GraphElement)">
            <summary>
            Stacks this object before <paramref name="sibling"/>, which must be a sibling object 
            (i.e., the two objects must share the same parent, or must both be toplevel objects). 
            The <paramref name="sibling"/> must have the same Z value as this object, 
            otherwise calling this function will have no effect.
            </summary>
            <param name="sibling">The sibling behind which this object is stacked.</param>
            <returns>false if <paramref name="sibling"/> is not actually a sibling
            of this object, true otherwise.</returns>
            <remarks>
            By default, all sibling items are stacked by insertion order 
            (i.e., the first item you add is drawn before the next item you add). 
            If two items' Z values are different, then the item with the highest Z value is drawn on top. 
            When the Z values are the same, the insertion order will decide the stacking order.
            </remarks>
        </member>
        <member name="M:GraphForms.GraphElement.OnStacksBehindParentChanged">
            <summary>
            Reimplement this function to trigger events and other reactions to 
            any change in this element's <see cref="P:GraphForms.GraphElement.StacksBehindParent"/>
            value before it's invalidated.
            </summary>
        </member>
        <member name="M:GraphForms.GraphElement.OnNegativeZStacksBehindParentChanged">
            <summary>
            Reimplement this function to trigger events and other reactions to 
            any change in this element's <see cref="P:GraphForms.GraphElement.NegativeZStacksBehindParent"/>
            value before it's invalidated.
            </summary>
        </member>
        <member name="M:GraphForms.GraphElement.OnZvalueChanged">
            <summary>
            Reimplement this function to trigger events and other reactions to 
            any change in this element's <see cref="P:GraphForms.GraphElement.Zvalue"/>
            value before it's invalidated.
            </summary>
        </member>
        <member name="M:GraphForms.GraphElement.OnChildAdded(GraphForms.GraphElement)">
            <summary>
            Reimplement this function to trigger events and other reactions
            that occur after the given <paramref name="child"/> has been added
            to this element's <see cref="P:GraphForms.GraphElement.Children"/> and before this element
            is invalidated over the <paramref name="child"/>'s 
            <see cref="P:GraphForms.GraphElement.BoundingBox"/> offset by its <see cref="P:GraphForms.GraphElement.Position"/>.
            </summary>
            <param name="child">The <see cref="T:GraphForms.GraphElement"/> that has just
            been added to this element's <see cref="P:GraphForms.GraphElement.Children"/>. </param>
        </member>
        <member name="M:GraphForms.GraphElement.OnChildRemoved(GraphForms.GraphElement)">
            <summary>
            Reimplement this function to trigger events and other reactions
            that occur after the given <paramref name="child"/> has been removed
            from this element's <see cref="P:GraphForms.GraphElement.Children"/> and before this element
            is invalidated over the <paramref name="child"/>'s 
            <see cref="P:GraphForms.GraphElement.BoundingBox"/> offset by its <see cref="P:GraphForms.GraphElement.Position"/>.
            </summary>
            <param name="child">The <see cref="T:GraphForms.GraphElement"/> that has just
            been removed from this element's <see cref="P:GraphForms.GraphElement.Children"/>. </param>
        </member>
        <member name="M:GraphForms.GraphElement.SetParent(GraphForms.GraphElement)">
            <summary>
            Sets this element's <see cref="P:GraphForms.GraphElement.Parent"/> element. If 
            <paramref name="parent"/> is null, this element gains
            special meaning as a "scene". </summary>
            <param name="parent">The new parent of this element.</param>
            <returns>True if this element's <see cref="P:GraphForms.GraphElement.Parent"/> was
            successfully set to <paramref name="parent"/>, false otherwise.
            </returns>
        </member>
        <member name="M:GraphForms.GraphElement.OnParentChanging(GraphForms.GraphElement)">
            <summary>
            Reimplement this function to trigger events and other reactions
            that occur before this element's <see cref="P:GraphForms.GraphElement.Parent"/> changes to
            <paramref name="newParent"/> and before it's removed from its
            <see cref="P:GraphForms.GraphElement.Parent"/>'s <see cref="P:GraphForms.GraphElement.Children"/> list.
            </summary>
            <param name="newParent">The new <see cref="P:GraphForms.GraphElement.Parent"/> 
            of this element.</param>
        </member>
        <member name="M:GraphForms.GraphElement.OnParentChanged(GraphForms.GraphElement)">
            <summary>
            Reimplement this function to trigger events and other reactions
            that occur after this element's <see cref="P:GraphForms.GraphElement.Parent"/> has changed
            and after it has been removed from the 
            <paramref name="oldParent"/>'s <see cref="P:GraphForms.GraphElement.Children"/> list.
            </summary>
            <param name="oldParent">The old <see cref="P:GraphForms.GraphElement.Parent"/>
            of this element.</param>
        </member>
        <member name="M:GraphForms.GraphElement.ChildrenBoundingBox">
            <summary>
            Returns the recursive union of this element's
            <see cref="P:GraphForms.GraphElement.BoundingBox"/> and the bounding boxes of all of its
            children, and their children, and so on.
            </summary>
            <returns>The recursive union of the bounding boxes of
            this element and all its children.</returns>
        </member>
        <member name="M:GraphForms.GraphElement.Shape">
            <summary>
            This element's overall shape in its local coordinate system,
            used for hit testing and drawing (clipping).
            The default shape is this element's <see cref="P:GraphForms.GraphElement.BoundingBox"/>.
            </summary>
            <returns>This element's shape in its local coordinate system.
            </returns>
        </member>
        <member name="M:GraphForms.GraphElement.Contains(System.Drawing.PointF)">
            <summary>
            This element's main hit testing function, 
            which is called if its <see cref="P:GraphForms.GraphElement.BoundingBox"/>
            contains the given <paramref name="point"/>.
            This should be as efficient as possible since it's called
            very often by mouse events.
            The default implementation tests whether or not this element's
            <see cref="M:GraphForms.GraphElement.Shape"/> contains the given 
            <paramref name="point"/>.
            </summary>
            <param name="point">
            A point in the local coordinate system of the element.
            </param>
            <returns>True if the given <paramref name="point"/>
            is contained within this element, false otherwise.</returns>
        </member>
        <member name="M:GraphForms.GraphElement.OnClipsChildrenToShapeChanged">
            <summary>
            Reimplement this function to trigger events and other reactions to 
            any change in this element's <see cref="P:GraphForms.GraphElement.ClipsChildrenToShape"/>
            value before it's invalidated.
            </summary>
        </member>
        <member name="M:GraphForms.GraphElement.OnClipsToShapeChanged">
            <summary>
            Reimplement this function to trigger events and other reactions to 
            any change in this element's <see cref="P:GraphForms.GraphElement.ClipsToShape"/>
            value before it's invalidated.
            </summary>
        </member>
        <member name="M:GraphForms.GraphElement.MoveBy(System.Single,System.Single)">
            <summary>
            Moves this element by <paramref name="dx"/> points horizontally,
            and by <paramref name="dy"/> points vertically. This function is
            equivalent to calling 
            <see cref="M:GraphForms.GraphElement.SetPosition(System.Single,System.Single)"/> with 
            <c><see cref="P:GraphForms.GraphElement.X"/> + <paramref name="dx"/></c> and
            <c><see cref="P:GraphForms.GraphElement.Y"/> + <paramref name="dy"/></c> as the arguments.
            </summary>
            <param name="dx">The amount by which to move this element 
            horizontally.</param>
            <param name="dy">The amount by which to move this element
            vertically.</param>
        </member>
        <member name="M:GraphForms.GraphElement.SetPosition(System.Single,System.Single)">
            <summary>
            Sets this element's position in its <see cref="P:GraphForms.GraphElement.Parent"/>
            element's coordinate system.
            </summary>
            <param name="x">The new horizontal offset from the 
            <see cref="P:GraphForms.GraphElement.Parent"/> element's origin.</param>
            <param name="y">The new vertical offset from the
            <see cref="P:GraphForms.GraphElement.Parent"/> element's origin.</param>
        </member>
        <member name="M:GraphForms.GraphElement.OnPositionChanged">
            <summary>
            Reimplement this function to trigger events and other reactions to 
            any change in this element's <see cref="P:GraphForms.GraphElement.Position"/>
            value before it's invalidated.
            </summary>
        </member>
        <member name="M:GraphForms.GraphElement.SceneTranslate">
            <summary>
            Calculates a vector for translating points from this element's
            local coordinate system to the coordinate system of the view
            visualizing parentless root (the scene element).
            </summary>
            <returns>A translating vector from this element to the control
            visualizing it.</returns>
        </member>
        <member name="M:GraphForms.GraphElement.ItemTranslate(GraphForms.GraphElement)">
            <summary>
            Calculates a vector for translating points from this element's
            local coordinate system to <paramref name="other"/>'s 
            local coordinate system. If <paramref name="other"/> is null,
            a zero vector is return.
            </summary>
            <param name="other">The other coordinate system to translate
            local points into.</param>
            <returns>A translating vector from this element to the 
            <paramref name="other"/> element.</returns>
        </member>
        <member name="M:GraphForms.GraphElement.MapToParent(System.Drawing.PointF)">
            <summary>
            Maps a given point in this element's local coordinate system to
            the local coordinate system of its parent element.
            If this element has no parent, <paramref name="point"/> will be
            mapped to the coordinate system of the control visualizing this
            element.</summary>
            <param name="point">A point in this element's local coordinate 
            system.</param>
            <returns>The given <paramref name="point"/> mapped to the 
            coordinate system of this element's parent.</returns>
        </member>
        <member name="M:GraphForms.GraphElement.MapToScene(System.Drawing.PointF)">
            <summary>
            Maps the given point in this element's local coordinate system to
            the coordinate system of the control visualizing this element.
            </summary>
            <param name="point">A point in this element's local coordinate 
            system.</param>
            <returns>The given <paramref name="point"/> mapped to the 
            coordinate system of the visualizing control.</returns>
        </member>
        <member name="M:GraphForms.GraphElement.MapToItem(GraphForms.GraphElement,System.Drawing.PointF)">
            <summary>
            Maps the given point in this element's local coordinate system to
            the local coordinate system of the given <paramref name="item"/>.
            If the given item is null, <paramref name="point"/> is mapped to
            the coordinate system of the control visualizing this element.
            </summary>
            <param name="item">The element to map the given 
            <paramref name="point"/> into from this element's local coordinate 
            system.</param>
            <param name="point">A point in this element's local coordinate
            system.</param>
            <returns>The given <paramref name="point"/> mapped to the local
            coordinate system of the given <paramref name="item"/>.</returns>
        </member>
        <member name="M:GraphForms.GraphElement.MapFromParent(System.Drawing.PointF)">
            <summary>
            Maps the given point, which is in this element's parent's local 
            coordinate system, to this element's local coordinate system.
            </summary>
            <param name="point">A point in this element's parent's local
            coordinate system.</param>
            <returns>The given <paramref name="point"/> mapped to this
            element's local coordinate system.</returns>
        </member>
        <member name="M:GraphForms.GraphElement.MapFromScene(System.Drawing.PointF)">
            <summary>
            Maps the given point, which is in the coordinate system of
            the control visualizing this element, to this element's
            local coordinate system.
            </summary>
            <param name="point">A point in the coordinate system of
            the control visualizing this element.</param>
            <returns>The given <paramref name="point"/> mapped to this
            element's local coordinate system.</returns>
        </member>
        <member name="M:GraphForms.GraphElement.MapFromItem(GraphForms.GraphElement,System.Drawing.PointF)">
            <summary>
            Maps the given point, which is in the given 
            <paramref name="item"/>'s local coordinate system, 
            to this element's local coordinate system. 
            If <paramref name="item"/> is null, <paramref name="point"/>
            is assumed to be in the coordinate system of the control
            visualizing this element.</summary>
            <param name="item">The element that defines the local
            coordinate system that the given <paramref name="point"/> is in.
            </param>
            <param name="point">A point in the local coordinate system of
            the given <paramref name="item"/>.</param>
            <returns>The given <paramref name="point"/> mapped to this
            element's local coordinate system.</returns>
        </member>
        <member name="M:GraphForms.GraphElement.Invalidate">
            <summary>
            Propagates this element's <see cref="P:GraphForms.GraphElement.BoundingBox"/> up its 
            ancestry chain, adjusting it to the coordinate system of the 
            parentless root (the scene element), which then calls its 
            <see cref="M:GraphForms.GraphElement.InvalidateScene(System.Drawing.Rectangle)"/>
            function with the adjusted bounding box. Useful for completely
            refreshing this element.</summary>
        </member>
        <member name="M:GraphForms.GraphElement.Invalidate(System.Drawing.RectangleF)">
            <summary>
            Propagates an invalid area in this element's 
            local coordinate system up its ancestry chain,
            adjusting it to the coordinate system of the parentless root
            (the scene element), which then calls its 
            <see cref="M:GraphForms.GraphElement.InvalidateScene(System.Drawing.Rectangle)"/>
            function with the adjusted area.</summary>
            <param name="rect">The invalid area in this element's
            local coordinate system to propagate up the ancestry chain.</param>
        </member>
        <member name="M:GraphForms.GraphElement.InvalidateScene(System.Drawing.Rectangle)">
            <summary>
            This function is called at the end of propagation chain of one of
            this element's children. It is only invoked in parentless elements,
            and is meant to be reimplemented to signal the 
            <see cref="T:System.Windows.Forms.Control"/> visualizing this "scene"
            element and its children to invalidate the given area.
            </summary>
            <param name="rect">The area to invalidate in coordinate system of
            the control visualizing this parentless element and its children.
            </param>
        </member>
        <member name="M:GraphForms.GraphElement.IsDrawn">
            <summary>
            Whether or not this element is drawn.
            </summary>
            <returns>True if this element is drawn, false if it isn't drawn.
            </returns><remarks>
            Override in descendent classes to implement systems for
            visibility, opacity, etc. Please note that this affects
            this element only, while its children are drawn regardless
            (unless their own <see cref="M:GraphForms.GraphElement.IsDrawn"/> implementations 
            return the same result).
            </remarks>
        </member>
        <member name="M:GraphForms.GraphElement.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            The main drawing method, which recursively draws this element
            and its children, handling clipping and transformation.
            </summary>
            <param name="e">The data from a 
            <see cref="E:System.Windows.Forms.Control.Paint"/> event,
            with its graphics and clipping rectangle adjusted to
            this element's local coordinate system.</param>
        </member>
        <member name="M:GraphForms.GraphElement.AddCache(GraphForms.GraphElement.Cache)">
            <summary>
            Adds the given <paramref name="cache"/> to this element, 
            removing it from its previous owner first if it has a different
            owner, and then setting its <see cref="P:GraphForms.GraphElement.Cache.Owner"/> to this
            element. </summary>
            <param name="cache">The cache to add to this element.</param>
        </member>
        <member name="M:GraphForms.GraphElement.RemoveCache(GraphForms.GraphElement.Cache)">
            <summary>
            Removes the given <paramref name="cache"/> from this element 
            if it is owned by this element and contained in this element's 
            internal cache list, and then sets its <see cref="P:GraphForms.GraphElement.Cache.Owner"/> 
            to null.</summary>
            <param name="cache">The cache to remove from this element.</param>
            <returns>True if the cache was owned by and contained in this
            element and successfully removed from it, false otherwise.
            </returns>
        </member>
        <member name="M:GraphForms.GraphElement.ClearCache">
            <summary>
            Removes all <see cref="T:GraphForms.GraphElement.Cache"/> instances from this element's
            internal cache list and sets their <see cref="P:GraphForms.GraphElement.Cache.Owner"/>
            to null.
            </summary>
        </member>
        <member name="M:GraphForms.GraphElement.OnDrawBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draws the visual contents of this element's background.
            </summary>
            <param name="e">The data from a 
            <see cref="E:System.Windows.Forms.Control.Paint"/> event,
            with its graphics and clipping rectangle adjusted to
            this element's local coordinate system.</param>
        </member>
        <member name="M:GraphForms.GraphElement.OnDrawForeground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draws the visual contents of this element's foreground.
            </summary>
            <param name="e">The data from a 
            <see cref="E:System.Windows.Forms.Control.Paint"/> event,
            with its graphics and clipping rectangle adjusted to
            this element's local coordinate system.</param>
        </member>
        <member name="M:GraphForms.GraphElement.FixMouseEventArgs(GraphForms.GraphMouseEventArgs,System.Boolean)">
            <summary>
            Offsets the <see cref="P:GraphForms.GraphMouseEventArgs.Pos"/> of the given 
            arguments, <paramref name="e"/>, so that the mouse position of the 
            new instance is in this element's local coordinate system.
            </summary>
            <param name="e">Event arguments with a mouse position to map into
            this element's local coordinate system.</param>
            <returns>A new <see cref="T:GraphForms.GraphMouseEventArgs"/> instance with its
            mouse position in this element's local coordinate system.</returns>
        </member>
        <member name="M:GraphForms.GraphElement.OnMouseClick(GraphForms.GraphMouseEventArgs)">
            <summary>
            Occurs when this element is clicked by the mouse.
            The default simply returns true to signify that the event 
            has been handled.</summary>
            <param name="e">The mouse event data of this event.</param>
            <returns>true to signify that mouse event has been handled by
            this event handler.</returns><remarks>
            If this mouse event handler returns true, the 
            <see cref="P:GraphForms.GraphEventArgs.Handled"/> property of 
            <paramref name="e"/> will be true for any other mouse event
            handlers that receive this mouse event afterwards, which
            includes the mouse event handlers in the ancestors of this
            graph element.</remarks>
        </member>
        <member name="M:GraphForms.GraphElement.FireMouseClick(GraphForms.GraphMouseEventArgs)">
            <summary>
            Propagates a Mouse Click event to this element and its children, 
            calling the <see cref="M:GraphForms.GraphElement.OnMouseClick(GraphForms.GraphMouseEventArgs)"/> 
            function on any elements that contain <paramref name="e"/>'s 
            mouse position <see cref="P:GraphForms.GraphMouseEventArgs.Pos"/>.
            </summary>
            <param name="e">The event data of a Mouse Click event 
            to propagate.</param>
            <returns>True if the event was <see cref="P:GraphForms.GraphEventArgs.Handled"/>
            by one of the elements it was propagated to, or false if it was
            unhandled or no elements contained the event's mouse position
            <see cref="P:GraphForms.GraphMouseEventArgs.Pos"/>. </returns>
        </member>
        <member name="M:GraphForms.GraphElement.OnMouseDoubleClick(GraphForms.GraphMouseEventArgs)">
            <summary>
            Occurs when this element is double clicked by the mouse.
            The default simply returns true to signify that the event 
            has been handled.</summary>
            <param name="e">The mouse event data of this event.</param>
            <returns>true to signify that mouse event has been handled by
            this event handler.</returns><remarks>
            If this mouse event handler returns true, the 
            <see cref="P:GraphForms.GraphEventArgs.Handled"/> property of 
            <paramref name="e"/> will be true for any other mouse event
            handlers that receive this mouse event afterwards, which
            includes the mouse event handlers in the ancestors of this
            graph element.</remarks>
        </member>
        <member name="M:GraphForms.GraphElement.FireMouseDoubleClick(GraphForms.GraphMouseEventArgs)">
            <summary>
            Propagates a Mouse DoubleClick event to this element and its children, 
            calling the <see cref="M:GraphForms.GraphElement.OnMouseDoubleClick(GraphForms.GraphMouseEventArgs)"/> 
            function on any elements that contain <paramref name="e"/>'s 
            mouse position <see cref="P:GraphForms.GraphMouseEventArgs.Pos"/>.
            </summary>
            <param name="e">The event data of a Mouse DoubleClick event 
            to propagate.</param>
            <returns>True if the event was <see cref="P:GraphForms.GraphEventArgs.Handled"/>
            by one of the elements it was propagated to, or false if it was
            unhandled or no elements contained the event's mouse position
            <see cref="P:GraphForms.GraphMouseEventArgs.Pos"/>. </returns>
        </member>
        <member name="M:GraphForms.GraphElement.OnMouseDown(GraphForms.GraphMouseEventArgs)">
            <summary>
            Occurs when the mouse pointer is over this element and
            a mouse button is pressed.
            The default simply returns true to signify that the event 
            has been handled.</summary>
            <param name="e">The mouse event data of this event.</param>
            <returns>true to signify that mouse event has been handled by
            this event handler.</returns><remarks>
            If this mouse event handler returns true, the 
            <see cref="P:GraphForms.GraphEventArgs.Handled"/> property of 
            <paramref name="e"/> will be true for any other mouse event
            handlers that receive this mouse event afterwards, which
            includes the mouse event handlers in the ancestors of this
            graph element.</remarks>
        </member>
        <member name="M:GraphForms.GraphElement.FireMouseDown(GraphForms.GraphMouseEventArgs)">
            <summary>
            Propagates a Mouse Down event to this element and its children, 
            calling the <see cref="M:GraphForms.GraphElement.OnMouseDown(GraphForms.GraphMouseEventArgs)"/> 
            function on any elements that contain <paramref name="e"/>'s 
            mouse position <see cref="P:GraphForms.GraphMouseEventArgs.Pos"/>.
            </summary>
            <param name="e">The event data of a Mouse Down event 
            to propagate.</param>
            <returns>True if the event was <see cref="P:GraphForms.GraphEventArgs.Handled"/>
            by one of the elements it was propagated to, or false if it was
            unhandled or no elements contained the event's mouse position
            <see cref="P:GraphForms.GraphMouseEventArgs.Pos"/>. </returns>
        </member>
        <member name="M:GraphForms.GraphElement.OnMouseMove(GraphForms.GraphMouseEventArgs)">
            <summary>
            Occurs when the mouse pointer is moved over this element.
            The default simply returns true to signify that the event 
            has been handled.</summary>
            <param name="e">The mouse event data of this event.</param>
            <returns>true to signify that mouse event has been handled by
            this event handler.</returns><remarks>
            If this mouse event handler returns true, the 
            <see cref="P:GraphForms.GraphEventArgs.Handled"/> property of 
            <paramref name="e"/> will be true for any other mouse event
            handlers that receive this mouse event afterwards, which
            includes the mouse event handlers in the ancestors of this
            graph element.</remarks>
        </member>
        <member name="M:GraphForms.GraphElement.FireMouseMove(GraphForms.GraphMouseEventArgs)">
            <summary>
            Propagates a Mouse Move event to this element and its children, 
            calling the <see cref="M:GraphForms.GraphElement.OnMouseMove(GraphForms.GraphMouseEventArgs)"/> 
            function on any elements that contain <paramref name="e"/>'s 
            mouse position <see cref="P:GraphForms.GraphMouseEventArgs.Pos"/>.
            </summary>
            <param name="e">The event data of a Mouse Move event 
            to propagate.</param>
            <returns>True if the event was <see cref="P:GraphForms.GraphEventArgs.Handled"/>
            by one of the elements it was propagated to, or false if it was
            unhandled or no elements contained the event's mouse position
            <see cref="P:GraphForms.GraphMouseEventArgs.Pos"/>. </returns>
        </member>
        <member name="M:GraphForms.GraphElement.OnMouseUp(GraphForms.GraphMouseEventArgs)">
            <summary>
            Occurs when the mouse pointer is over this element and
            a mouse button is released.
            The default simply returns true to signify that the event 
            has been handled.</summary>
            <param name="e">The mouse event data of this event.</param>
            <returns>true to signify that mouse event has been handled by
            this event handler.</returns><remarks>
            If this mouse event handler returns true, the 
            <see cref="P:GraphForms.GraphEventArgs.Handled"/> property of 
            <paramref name="e"/> will be true for any other mouse event
            handlers that receive this mouse event afterwards, which
            includes the mouse event handlers in the ancestors of this
            graph element.</remarks>
        </member>
        <member name="M:GraphForms.GraphElement.FireMouseUp(GraphForms.GraphMouseEventArgs)">
            <summary>
            Propagates a Mouse Up event to this element and its children, 
            calling the <see cref="M:GraphForms.GraphElement.OnMouseUp(GraphForms.GraphMouseEventArgs)"/> 
            function on any elements that contain <paramref name="e"/>'s 
            mouse position <see cref="P:GraphForms.GraphMouseEventArgs.Pos"/>.
            </summary>
            <param name="e">The event data of a Mouse Up event 
            to propagate.</param>
            <returns>True if the event was <see cref="P:GraphForms.GraphEventArgs.Handled"/>
            by one of the elements it was propagated to, or false if it was
            unhandled or no elements contained the event's mouse position
            <see cref="P:GraphForms.GraphMouseEventArgs.Pos"/>. </returns>
        </member>
        <member name="M:GraphForms.GraphElement.OnMouseWheel(GraphForms.GraphMouseEventArgs)">
            <summary>
            Occurs when the mouse pointer is over this element and
            the mouse wheel moves.
            The default simply returns true to signify that the event 
            has been handled.</summary>
            <param name="e">The mouse event data of this event.</param>
            <returns>true to signify that mouse event has been handled by
            this event handler.</returns><remarks>
            If this mouse event handler returns true, the 
            <see cref="P:GraphForms.GraphEventArgs.Handled"/> property of 
            <paramref name="e"/> will be true for any other mouse event
            handlers that receive this mouse event afterwards, which
            includes the mouse event handlers in the ancestors of this
            graph element.</remarks>
        </member>
        <member name="M:GraphForms.GraphElement.FireMouseWheel(GraphForms.GraphMouseEventArgs)">
            <summary>
            Propagates a Mouse Wheel event to this element and its children, 
            calling the <see cref="M:GraphForms.GraphElement.OnMouseWheel(GraphForms.GraphMouseEventArgs)"/> 
            function on any elements that contain <paramref name="e"/>'s 
            mouse position <see cref="P:GraphForms.GraphMouseEventArgs.Pos"/>.
            </summary>
            <param name="e">The event data of a Mouse Wheel event 
            to propagate.</param>
            <returns>True if the event was <see cref="P:GraphForms.GraphEventArgs.Handled"/>
            by one of the elements it was propagated to, or false if it was
            unhandled or no elements contained the event's mouse position
            <see cref="P:GraphForms.GraphMouseEventArgs.Pos"/>. </returns>
        </member>
        <member name="P:GraphForms.GraphElement.Depth">
            <summary>
            The depth in the heirarchy tree of parents,
            which is 0 if the parent is null.
            </summary>
        </member>
        <member name="P:GraphForms.GraphElement.StacksBehindParent">
            <summary>
            Whether or not this object is stacked behind its parent.
            </summary><remarks>
            By default, children are stacked on top of their parent. 
            But setting this flag, the child will be stacked behind it. 
            This flag is useful for drop shadow effects and for decoration objects 
            that follow the parent object's geometry without drawing on top of it.
            </remarks>
        </member>
        <member name="P:GraphForms.GraphElement.NegativeZStacksBehindParent">
            <summary>
            The item automatically stacks behind it's parent if it's Z-value is negative. 
            This flag enables <see cref="P:GraphForms.GraphElement.Zvalue"/> to toggle <see cref="P:GraphForms.GraphElement.StacksBehindParent"/>.
            </summary>
        </member>
        <member name="P:GraphForms.GraphElement.Zvalue">
            <summary>
            The Z-value of this object, which affects the stacking order 
            of sibling (neighboring) object. Higher Z-valued objects
            are stacked on top of lower Z-valued objects.
            The default Z-value is 0.
            </summary>
        </member>
        <member name="P:GraphForms.GraphElement.Children">
            <summary>
            Returns an array of this object's children.
            The children are sorted by stacking order.
            This takes into account both the children's
            insertion order and their Z-values.
            </summary>
        </member>
        <member name="P:GraphForms.GraphElement.HasChildren">
            <summary>
            Whether or not this object has currently has children.
            </summary>
        </member>
        <member name="P:GraphForms.GraphElement.Parent">
            <summary>
            This element's parent element, which contains this item within its
            <see cref="P:GraphForms.GraphElement.Children"/> list.
            </summary><remarks>
            Elements without parents (their <see cref="P:GraphForms.GraphElement.Parent"/> equals null),
            have special meaning. They are considered "scenes" for functions
            that deal with mapping coordinates through the ancestry chain,
            including <see cref="M:GraphForms.GraphElement.InvalidateScene(System.Drawing.Rectangle)"/>
            and <see cref="M:GraphForms.GraphElement.MapFromScene(System.Drawing.PointF)"/> and
            <see cref="M:GraphForms.GraphElement.MapToScene(System.Drawing.PointF)"/>.
            </remarks>
        </member>
        <member name="P:GraphForms.GraphElement.BoundingBox">
            <summary>
            This element's bounding box in its local coordinate system.
            This must be initialized as it's used for drawing invalidation
            and quick hit testing before the more complex hit test
            functions are called.
            </summary>
        </member>
        <member name="P:GraphForms.GraphElement.SceneBoundingBox">
            <summary>
            This element's <see cref="P:GraphForms.GraphElement.BoundingBox"/> mapped to the coordinate
            system of the "scene" (the control rendering this element).
            </summary>
        </member>
        <member name="P:GraphForms.GraphElement.ClipsChildrenToShape">
            <summary>
            Whether or not this element's children are clipped within its 
            <see cref="M:GraphForms.GraphElement.Shape"/> for hit testing and drawing.
            </summary>
        </member>
        <member name="P:GraphForms.GraphElement.ClipsToShape">
            <summary>
            Whether or not this element is clipped within its 
            <see cref="M:GraphForms.GraphElement.Shape"/> for drawing.
            </summary>
        </member>
        <member name="P:GraphForms.GraphElement.X">
            <summary>
            The x-coordinate of this element's position in its 
            <see cref="P:GraphForms.GraphElement.Parent"/> element's coordinate system.
            </summary>
        </member>
        <member name="P:GraphForms.GraphElement.Y">
            <summary>
            The y-coordinate of this element's position in its 
            <see cref="P:GraphForms.GraphElement.Parent"/> element's coordinate system.
            </summary>
        </member>
        <member name="P:GraphForms.GraphElement.Position">
            <summary>
            This element's position in its <see cref="P:GraphForms.GraphElement.Parent"/> 
            element's coordinate system.
            </summary>
        </member>
        <member name="P:GraphForms.GraphElement.CacheList">
            <summary>
            This element's internal list of all the <see cref="T:GraphForms.GraphElement.Cache"/> 
            instances it owns.
            </summary>
        </member>
        <member name="P:GraphForms.GraphElement.IgnoreMouseEvents">
            <summary>
            Whether or not this graph element ignore all mouse events.
            If true, hit tests for this element are also skipped, which
            can speed up the application.
            </summary>
        </member>
        <member name="T:GraphForms.GraphElement.Cache">
            <summary>
            This base class is used for caching some or all of a
            <see cref="T:GraphForms.GraphElement"/>'s visual contents in order to accelerate
            the drawing process for the element.
            </summary><remarks>
            Descendents of this class are meant to be used in implementations of the 
            <see cref="M:GraphForms.GraphElement.OnDrawBackground(System.Windows.Forms.PaintEventArgs)"/> and
            <see cref="M:GraphForms.GraphElement.OnDrawForeground(System.Windows.Forms.PaintEventArgs)"/>
            functions by calling its 
            <see cref="M:GraphForms.GraphElement.Cache.OnDraw(System.Windows.Forms.PaintEventArgs)"/> function.
            </remarks>
        </member>
        <member name="M:GraphForms.GraphElement.Cache.#ctor(GraphForms.GraphElement)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphForms.GraphElement.Cache"/> class
            with the given <paramref name="owner"/>.
            </summary>
            <param name="owner">The <see cref="T:GraphForms.GraphElement"/> that will
            own this cache instance and refit it whenever necessary.
            </param>
        </member>
        <member name="M:GraphForms.GraphElement.Cache.#ctor(GraphForms.GraphElement,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphForms.GraphElement.Cache"/> class
            with the given <paramref name="owner"/> and cache mode.
            </summary>
            <param name="owner">The <see cref="T:GraphForms.GraphElement"/> that will
            own this cache instance and refit it whenever necessary.
            </param>
            <param name="cached">Whether or not this cache is cached in an
            image or redrawn every time its <see cref="P:GraphForms.GraphElement.Cache.Owner"/> is 
            invalidated.</param>
        </member>
        <member name="M:GraphForms.GraphElement.Cache.SetOwner(GraphForms.GraphElement)">
            <summary>
            Sets this cache's owner to the given <paramref name="owner"/>,
            and attempts to refit its internal cache image to the new
            owner's <see cref="P:GraphForms.GraphElement.BoundingBox"/> and redraw it
            if <see cref="P:GraphForms.GraphElement.Cache.Cached"/> is true and it isn't already cached.
            </summary>
            <param name="owner">The new owner of this cache.</param>
        </member>
        <member name="M:GraphForms.GraphElement.Cache.Dispose">
            <summary>
            Disposes this cache's internal image data if it has any.
            </summary>
        </member>
        <member name="M:GraphForms.GraphElement.Cache.OnDraw(System.Windows.Forms.PaintEventArgs)">
            <summary>
            The main drawing function, which draws into the given graphics
            from either a cached image or directly from the implementation
            of <see cref="M:GraphForms.GraphElement.Cache.UserDraw(System.Drawing.Graphics)"/>,
            depending on the <see cref="P:GraphForms.GraphElement.Cache.Cached"/> setting.
            </summary>
            <param name="e">The data from a 
            <see cref="E:System.Windows.Forms.Control.Paint"/> event,
            with its graphics and clipping rectangle adjusted to
            the <see cref="P:GraphForms.GraphElement.Cache.Owner"/> element's local coordinate system.
            </param>
        </member>
        <member name="M:GraphForms.GraphElement.Cache.RefitCache(System.Drawing.RectangleF)">
            <summary>
            Attempts to refit the internal cache image inside 
            the new bounding box by cropping the current cache or
            adjusting the cache offsets or clearing the current cache
            so that it's redrawn on the next draw pass.
            </summary>
            <param name="newBBox">The new bounding box for the
            <see cref="P:GraphForms.GraphElement.Cache.Owner"/> element.</param>
        </member>
        <member name="M:GraphForms.GraphElement.Cache.RedrawCache">
            <summary>
            Clears the current background cache and redraws it using the
            <see cref="M:GraphForms.GraphElement.Cache.UserDraw(System.Drawing.Graphics)"/> function.
            </summary>
            <returns>True if the cache image was successfully re-allocated
            and drawn to, false otherwise (not enough memory or empty 
            <see cref="P:GraphForms.GraphElement.BoundingBox"/>).</returns>
        </member>
        <member name="M:GraphForms.GraphElement.Cache.UserDraw(System.Drawing.Graphics)">
            <summary>
            Draws the visual contents of this cache into the provided 
            graphics in the <see cref="P:GraphForms.GraphElement.Cache.Owner"/> element's local coordinate 
            system.</summary>
            <param name="g">The graphics into which the visual contents 
            are drawn.</param>
            <remarks>Make sure to constrain all everything drawn to within
            the boundaries of the <see cref="P:GraphForms.GraphElement.Cache.Owner"/> element's 
            <see cref="P:GraphForms.GraphElement.BoundingBox"/>.
            Otherwise, anything outside it could be clipped by the cache
            or cause rendering artifacts, depending on the 
            <see cref="P:GraphForms.GraphElement.Cache.Cached"/> setting.</remarks>
        </member>
        <member name="P:GraphForms.GraphElement.Cache.Owner">
            <summary>
            The element that owns this cache and refits it every time its
            <see cref="P:GraphForms.GraphElement.BoundingBox"/> is changed.
            </summary>
        </member>
        <member name="P:GraphForms.GraphElement.Cache.Cached">
            <summary>
            Whether or not this cache is cached in an image or redrawn 
            every time its <see cref="P:GraphForms.GraphElement.Cache.Owner"/> element is invalidated.
            </summary>
            <remarks>
            Beware that this is automatically set to false if there is not
            enough memory available to create the cache, so try to use caching
            sparingly, especially on any element with a large 
            <see cref="P:GraphForms.GraphElement.BoundingBox"/>.
            </remarks>
        </member>
        <member name="T:GraphForms.IHasGraphScene">
            <summary>
            An interface for any class that is linked to a <see cref="T:GraphForms.GraphScene"/>
            instance.
            </summary><remarks>
            This is mainly meant to be implemented by 
            <see cref="T:System.Windows.Forms.Control"/> descendant classes, as it
            is used by <see cref="T:GraphForms.GraphScene"/> in its 
            <see cref="M:GraphForms.GraphScene.AddView(System.Windows.Forms.Control)"/> and 
            <see cref="M:GraphForms.GraphScene.RemoveView(System.Windows.Forms.Control)"/>
            functions for making sure the control instance is no longer linked to 
            the <see cref="T:GraphForms.GraphScene"/> instance.
            </remarks>
        </member>
        <member name="P:GraphForms.IHasGraphScene.Scene">
            <summary>
            The <see cref="T:GraphForms.GraphScene"/> instance that implementers of this 
            interface are linked to.
            </summary>
        </member>
        <member name="T:GraphForms.GraphScene">
            <summary>
            This extension of the <see cref="T:GraphForms.GraphElement"/> class provides
            a way of managing a group of <see cref="T:GraphForms.GraphElement"/> instances and
            linking them to <see cref="T:System.Windows.Forms.Control"/> instances
            that render them with their 
            <see cref="E:System.Windows.Forms.Control.Paint"/> event and relay
            mouse events to them.
            </summary>
        </member>
        <member name="M:GraphForms.GraphScene.AddView(System.Windows.Forms.Control)">
            <summary>
            Adds the given <paramref name="view"/> to this scene's list of
            <see cref="T:System.Windows.Forms.Control"/> instances and starts
            listening to its <see cref="E:System.Windows.Forms.Control.Paint"/>
            event for rendering this scene and its contents and listening to
            its <see cref="T:System.Windows.Forms.MouseEventHandler"/> events
            to relay mouse events to this scene and its contents.
            </summary>
            <param name="view">The <see cref="T:System.Windows.Forms.Control"/>
            instance to add to this scene for rendering its contents and
            relaying mouse events to its contents.</param>
            <returns>True if the <paramref name="view"/> was successfully added
            to this scene or false if the <paramref name="view"/> is already
            tied to this scene (on this scene's view list).</returns>
        </member>
        <member name="M:GraphForms.GraphScene.AttachView(System.Windows.Forms.Control)">
            <summary>
            Attaches the given <paramref name="view"/> to this scene
            right after it's added to the <see cref="P:GraphForms.GraphScene.Views"/> list,
            adding listeners to its <see cref="E:System.Windows.Forms.Control.Paint"/>
            event for rendering and to its other events for relaying messages
            to its contents. </summary>
            <param name="view">The <see cref="T:System.Windows.Forms.Control"/>
            instance to attach to this scene.</param>
        </member>
        <member name="M:GraphForms.GraphScene.UserAttachView(System.Windows.Forms.Control)">
            <summary>
            Reimplement to add additional event listeners to the given
            <paramref name="view"/> after it has been attached to this scene
            and added to this scene's <see cref="T:System.Windows.Forms.View"/> list.
            </summary>
            <param name="view">The view just attached to this scene to add
            additional event listeners to.</param>
        </member>
        <member name="M:GraphForms.GraphScene.RemoveView(System.Windows.Forms.Control)">
            <summary>
            Removes the given <paramref name="view"/> from this scene's list of
            <see cref="T:System.Windows.Forms.Control"/> instances and stops
            listening to its <see cref="E:System.Windows.Forms.Control.Paint"/>
            event and <see cref="T:System.Windows.Forms.MouseEventHandler"/>
            events so that the <paramref name="view"/> no longer renders or
            relays mouse events to this scene and its contents.
            </summary>
            <param name="view">The <see cref="T:System.Windows.Forms.Control"/>
            instance to remove from this scene so that it no longer renders or
            relays mouse events to this scene and its contents.</param>
            <returns>True if the <paramref name="view"/> was successfully
            removed from this scene or false if the <paramref name="view"/>
            wasn't already tied to this scene (on this scene's view list).
            </returns>
        </member>
        <member name="M:GraphForms.GraphScene.DetachView(System.Windows.Forms.Control)">
            <summary>
            Detaches the given <paramref name="view"/> from this scene
            right before it's removed from the <see cref="P:GraphForms.GraphScene.Views"/> list,
            removing listeners from its <see cref="E:System.Windows.Forms.Control.Paint"/>
            event for rendering and from its other events for relaying messages
            to its contents. </summary>
            <param name="view">The <see cref="T:System.Windows.Forms.Control"/>
            instance to detach from this scene.</param>
        </member>
        <member name="M:GraphForms.GraphScene.UserDetachView(System.Windows.Forms.Control)">
            <summary>
            Reimplement to remove additional event listeners from the given
            <paramref name="view"/> after it has been detached from this scene,
            but before it has been removed from this scene's <see cref="T:System.Windows.Forms.View"/>
            list. </summary>
            <param name="view">The view just attached to this scene to add
            additional event listeners to.</param>
        </member>
        <member name="M:GraphForms.GraphScene.ClearViews">
            <summary>
            Removes all <see cref="T:System.Windows.Forms.Control"/> instances
            from this scene's <see cref="T:System.Windows.Forms.View"/> list and detaches them all
            from this scene so that they no longer render or relay events to
            its contents. </summary>
        </member>
        <member name="M:GraphForms.GraphScene.OnDrawBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draws the visual contents of this scene's background.
            </summary>
            <param name="e">The data from a 
            <see cref="E:System.Windows.Forms.Control.Paint"/> event,
            with its graphics and clipping rectangle adjusted to
            this scene's local coordinate system.</param>
        </member>
        <member name="M:GraphForms.GraphScene.InvalidateScene(System.Drawing.Rectangle)">
            <summary>
            This function invalidates the given <paramref name="rect"/> area
            of every <see cref="T:System.Windows.Forms.Control"/> tied to this
            scene, prompting all of them to update that area at the next paint
            operation and causing a paint message to be sent to all of them.
            </summary>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> that
            represents the area to invalidate on every 
            <see cref="T:System.Windows.Forms.Control"/> tied to this scene.
            </param>
        </member>
        <member name="M:GraphForms.GraphScene.OnMouseEnter">
            <summary>
            Occurs when the mouse pointer enters one of the views
            </summary>
        </member>
        <member name="P:GraphForms.GraphScene.Views">
            <summary>
            This scene's list of all <see cref="T:System.Windows.Forms.Control"/>
            instances currently tied to it, which render and relay mouse events
            to its contents.
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.Collections.Tree`1">
            <summary>
            This tree data structure can be used to create a disjoint set forest.
            It can represent both single element and a set which contains both it
            and possibly other elements as well in a spaghetti stack structure.
            It contains fundamental functions for processing sets in the forest,
            including <c>FindSet</c> and <c>Union</c>.
            </summary>
            <typeparam name="T">The type of data stored in each tree.</typeparam>
            <remarks><para>
            See the Wikipedia article on Disjoint-Set Data Structure for details:
            </para><para>
            http://en.wikipedia.org/wiki/Disjoint-set_data_structure
            </para></remarks>
        </member>
        <member name="F:GraphForms.Algorithms.Collections.Tree`1.Value">
            <summary>
            The <typeparamref name="T"/> instance stored in this single
            element of a disjoint forest.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.Tree`1.#ctor(`0)">
            <summary>
            Creates a new tree instance, which initially represents both the 
            single <typeparamref name="T"/> element and the singleton subset
            of the disjoint forest which contains this element.
            </summary>
            <param name="value">The element to insert into a singleton subset
            of a disjoint forest.</param>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.Tree`1.FindSet">
            <summary>
            Finds the subset of the disjoint forest which contains this tree.
            </summary>
            <returns>The element that represents the subset which contains
            both it and this element.</returns>
            <remarks>
            The element returned could be this tree element itself.
            This is always the case when this element is in a singleton,
            a set containing only one element.
            </remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.Tree`1.FindSet(GraphForms.Algorithms.Collections.Tree{`0})">
            <summary>
            Finds the subset of the disjoint forest which contains the given
            <paramref name="tree"/> element.
            </summary>
            <param name="tree">The element used to find its containing subset.
            </param>
            <returns>The element that represents the subset which contains
            both it and the given <paramref name="tree"/> element.</returns>
            <remarks><para>
            The element returned could be <paramref name="tree"/> itself.
            This is always the case when <paramref name="tree"/> is in a
            singleton, a set containing only one tree element.
            </para><para>
            This algorithm also performs path compression when possible for
            increased efficiency.
            </para></remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.Tree`1.AreInSameSet(GraphForms.Algorithms.Collections.Tree{`0},GraphForms.Algorithms.Collections.Tree{`0})">
            <summary>
            Tests whether the two given elements are contained in the same
            subset of the disjoint forest.
            </summary>
            <param name="tree1">The first element to test.</param>
            <param name="tree2">The second element to test.</param>
            <returns>True if <paramref name="tree1"/> and 
            <paramref name="tree2"/> are contained in the same subset of the
            disjoint forest; false if they are in seperate subsets.</returns>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.Tree`1.Union(GraphForms.Algorithms.Collections.Tree{`0},GraphForms.Algorithms.Collections.Tree{`0})">
            <summary>
            Joins the two subsets of the disjoint forest which contain the
            given elements into a single subset (if they are not already
            both contained in the same subset of the disjoint forest).
            </summary>
            <param name="tree1">The first element or subset to join.</param>
            <param name="tree2">The second element or subset to join.</param>
            <returns>True if subsets containing <paramref name="tree1"/> and
            <paramref name="tree2"/> are successfully united, or false if
            the two elements are already in the same subset.</returns>
            <remarks>
            This algorithm performs union by rank for increased efficiency.
            </remarks>
        </member>
        <member name="T:GraphForms.Algorithms.Layout.LayoutAlgorithm`2">
            <summary>
            The base class for algorithms which calculate the layout of a given
            <see cref="T:Digraph`2{Node,Edge}"/> instance by setting the
            positions of its <typeparamref name="Node"/> instances based on the
            <typeparamref name="Edge"/> instances connecting them and their own
            unique parameters and constraints.
            </summary>
            <typeparam name="Node">The type of layout nodes in the graph 
            which are rearranged by this layout algorithm.</typeparam>
            <typeparam name="Edge">The type of edges that connect the 
            <typeparamref name="Node"/> instances that this algorithm 
            rearranges.</typeparam>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.mClusterNode">
            <summary>
            If <see cref="!:mGraph"/> is actually a sub-graph, then
            this is the node in the graph superstructure that encloses it.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.mBBox">
            <summary>
            This bounding box is used as a substitute for 
            <see cref="F:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.mClusterNode"/> if it is null.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.mLastNVers">
            <summary>
            The node version of the graph after the last precalculation.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.mLastEVers">
            <summary>
            The edge version of the graph after the last precalculation.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.bResetting">
            <summary>
            Whether the algorithm should reset back to its starting point
            and re-initialize before beginning the next iteration.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.bItemMoved">
            <summary>
            Whether any nodes changed position during the last iteration.
            If nodes aren't moving, the algorithm has obviously reached an
            equilibrium and finished.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.mLastXs">
            <summary>
            The X-coordinates of the positions of all the nodes 
            in the graph at the end of the last iteration.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.mLastYs">
            <summary>
            The Y-coordinates of the positions of all the nodes 
            in the graph at the end of the last iteration.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.#ctor(GraphForms.Algorithms.Digraph{`0,`1},GraphForms.Algorithms.Layout.IClusterNode)">
            <summary>
            Creates a new layout algorithm instance to operate on the given 
            <paramref name="graph"/> using the given 
            <see cref="T:GraphForms.Algorithms.Layout.IClusterNode"/> instance to affect the positions 
            of the graph's nodes.</summary>
            <param name="graph">The graph that this layout algorithm will
            operate on by setting the positions of its nodes.</param>
            <param name="clusterNode">The <see cref="T:GraphForms.Algorithms.Layout.IClusterNode"/>
            instance that affects the positions of the nodes in the
            <paramref name="graph"/>.</param>
            <seealso cref="!:Graph"/><seealso cref="P:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.ClusterNode"/>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.#ctor(GraphForms.Algorithms.Digraph{`0,`1},GraphForms.Box2F)">
            <summary>
            Creates a new layout algorithm instance to operate on the given
            <paramref name="graph"/> using the given <see cref="!:RectangleF"/>
            instance to constrain the positions of the graph's nodes to
            within its boundaries.
            </summary>
            <param name="graph">The graph that this layout algorithm will
            operate on by setting the positions of its nodes.</param>
            <param name="boundingBox">The <see cref="!:RectangleF"/> instance
            that constrains the positions of the nodes in the
            <paramref name="graph"/> to within its boundaries.</param>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.ResetAlgorithm">
            <summary>
            Resets this algorithm back to its starting point, which causes it
            to re-initialize before beginning its next iteration.
            </summary><remarks>
            This function is useful for when the positions of one or more
            nodes are changed by external code (such as a user dragging them
            with their mouse) before this algorithm finishes or aborts its
            layout computation.</remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.ShuffleNodes">
            <summary>
            Shuffles all layout nodes (but not port nodes) in this layout
            algorithm's <see cref="!:Graph"/> to random positions with
            minimal intersections of their bounding boxes.
            </summary> <remarks>
            The random positions of the nodes are restricted to within the
            bounding box of this algorithm's <see cref="P:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.ClusterNode"/>, or
            within this algorithm's <see cref="P:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.BoundingBox"/> if the cluster
            node is null.
            </remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.ShuffleNodes(GraphForms.Box2F)">
            <summary>
            Shuffles all layout nodes (but not port nodes) in this layout
            algorithm's <see cref="!:Graph"/> to random positions with
            minimal intersections of their bounding boxes.
            </summary>
            <param name="bbox">A rectangle used to restrict the randomly set
            positions of the layout nodes to within its boundaries.</param>
            <remarks>
            The random positions of the nodes are restricted to within the
            bounding box of this algorithm's <see cref="P:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.ClusterNode"/>, or
            within this algorithm's <see cref="P:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.BoundingBox"/> if the cluster
            node is null.
            </remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.InitializeAlgorithm">
            <summary>
            Reimplement this function to initialize any data needed before
            the algorithm begins its layout computation. This function is
            called after <see cref="M:AAlgorithm.OnStarted()"/> and whenever 
            the algorithm is reset using <see cref="M:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.ResetAlgorithm"/>.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.CanIterate">
            <summary>
            Whether the algorithm should perform the next iteration in its
            layout computation, or stop and finish.
            </summary>
            <returns>true if the algorithm should run its next iteration,
            or false if the algorithm should stop and finish.</returns>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.PerformIteration(System.UInt32)">
            <summary>
            Reimplement this function to perform any core calculations
            between the beginning and end of each iteration. This is where
            force-directed layout algorithms should set the new positions
            of each layout node as they approach equilibrium.
            </summary>
            <param name="iteration">The current number of iterations that
            have already occurred in this algorithm's computation.</param>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.EndIteration(System.UInt32)">
            <summary>
            Performs all the necessary actions needed to finish a single
            iteration calculation of this layout algorithm and then calls
            <see cref="M:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.OnEndIteration(System.UInt32,System.Double)"/> to run any
            custom code.</summary>
            <param name="iteration">The current number of iterations that 
            have already occurred in this algorithm's computation.</param>
            <exception cref="T:System.InvalidOperationException">This layout algorithm
            hasn't started started an iteration yet with the
            <see cref="!:BeginIteration(uint)"/> function.</exception>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.OnEndIteration(System.UInt32,System.Double)">
            <summary>
            Reimplement this function to perform actions and trigger events
            at the very end of each iteration, after positions of all the
            layout nodes have been set.
            </summary>
            <param name="iteration">The current number of iterations that
            have already occurred in this algorithm's computation.</param>
            <param name="totalDistanceChange">The sum of the distances
            travelled by each layout node from their positions on the last
            iteration to their current positions.</param>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.InternalCompute">
            <summary>
            Initializes and synchronously runs the layout computation,
            iterating until <see cref="P:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.MaxIterations"/> is reached,
            the algorithm is aborted, no layout node has moved beyond
            <see cref="P:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.MovementTolerance"/>, or <see cref="M:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.CanIterate"/>
            returns false.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.AsyncIterate(System.Boolean)">
            <summary>
            Initializes the layout (if it's just started or has been reset) 
            and asynchronously runs one iteration, and returns whether it
            was able to run the current iteration. Returns false if 
            <see cref="P:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.MaxIterations"/> has been reached, the algorithm has
            been aborted, no layout node has moved beyond 
            <see cref="P:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.MovementTolerance"/>, or <see cref="M:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.CanIterate"/>
            returns false.</summary>
            <param name="forceRestart">Whether to force this algorithm to
            start running again if it has finished or has been aborted.</param>
            <returns>true if the iteration is successfully run, or false if
            the algorithm has finished or has been aborted.</returns>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.Abort">
            <summary>
            Stop running the algorithm and abort its computation,
            both synchronously and asychronously.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.Reset">
            <summary>
            Resets the algorithm both synchronously and asynchronously,
            so that it is ready to begin its layout computation again,
            but only if it is not currently running or aborting.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.ClusterNode">
            <summary>
            If <see cref="!:mGraph"/> is actually a sub-graph, then
            this is the node in the graph superstructure that encloses it.
            </summary>
            <remarks>
            This node is used to calculate the boundary positions of
            port nodes based on their angle around the center of its 
            bounding box.
            This node also affects the positioning each layout node when
            they are being moved or shuffled by this algorithm.
            </remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.BoundingBox">
            <summary>
            This bounding box is used as a substitute for 
            <see cref="P:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.ClusterNode"/> if it is null.
            </summary><remarks><para>
            When this bounding box is used in place of a cluster node, 
            the positions of layout nodes are restricted to inside it 
            when they are being moved and shuffled by this algorithm.
            </para><para>
            This box is also used in place of the cluster node for
            calculating the boundary positions of port nodes based on
            their angle around its center.
            </para></remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.ItemMoved">
            <summary>
            Whether any nodes changed position during the last iteration.
            If nodes aren't moving, the algorithm has obviously reached an
            equilibrium and finished.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.AsyncState">
            <summary>
            The current state of the asynchronous computation 
            of this layout algorithm.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.AsyncIterations">
            <summary>
            The current number of asynchronous iterations completed by the
            asynchronous computation of this layout algorithm.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.MaxIterations">
            <summary>
            The maximum number of iterations this algorithm is allowed 
            to perform before finishing or aborting its layout computation.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.LayoutAlgorithm`2.MovementTolerance">
            <summary>
            This is the minimum distance squared that a node has have been
            moved by this layout algorithm or by <see cref="!:Spring"/> in
            order for the node to be considered "moved" on each iteration.
            If none of the nodes have moved a squared distance greater than
            this tolerance value, the algorithm stops iterating and finishes.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The new tolerance
            is less than zero.</exception>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Tree.ATreeLayoutAlgorithm`3.SpanningTreeGeneration">
            <summary>
            Gets or sets the method this algorithm uses to build its internal
            sparsely connected spanning tree for traversing its graph.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Tree.ATreeLayoutAlgorithm`3.RootFindingMethod">
            <summary>
            Gets or sets the method this algorithm uses to choose the root
            node from which all subtrees branch off and orbit around.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Tree.SimpleTreeLayoutAlgorithm`2.VertexGap">
            <summary>
            Gets or sets the gap between the vertices.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Tree.SimpleTreeLayoutAlgorithm`2.LayerGap">
            <summary>
            Gets or sets the gap between the layers.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Tree.SimpleTreeLayoutAlgorithm`2.Direction">
            <summary>
            Gets or sets the direction of the layout.
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.Layout.ILayoutSpring">
            <summary>
            This interface acts as a virtual spring, creating force vectors 
            that are proportional to given translation vectors and that
            decrease as the spring reaches equilibrium (as the translation
            vector's length approaches zero).
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.ILayoutSpring.GetSpringForce(System.Single,System.Single)">
            <summary>
            Given a translation vector from the current position of an 
            <see cref="T:GraphForms.Algorithms.Layout.ILayoutNode"/> to its new position, this function 
            calculates a "force" vector in the same direction that is
            added to the layout node's current position to get
            an intermediate position for a "twaining" animation.
            </summary>
            <param name="dx">The horizontal difference between
            the layout node's new position and current position.</param>
            <param name="dy">The vertical difference between
            the layout node's new position and current position.</param>
            <returns>A "force" vector that will be added to the 
            current position of the layout node being moved.</returns>
        </member>
        <member name="T:GraphForms.Algorithms.IGraphEdge`1">
            <summary>
            This interface defines the basic template for a weighted edge linking
            two <typeparamref name="Node"/> instances in a directional graph.
            </summary>
            <typeparam name="Node">The type of nodes connected together by this
            weighted edge.</typeparam>
        </member>
        <member name="M:GraphForms.Algorithms.IGraphEdge`1.SetSrcNode(`0)">
            <summary>
            Sets the Source Node (Parent of Connection).
            </summary>
            <param name="srcNode">New source node and
            parent of this connection.</param>
        </member>
        <member name="M:GraphForms.Algorithms.IGraphEdge`1.SetDstNode(`0)">
            <summary>
            Sets the Destination Node (Child of Connection).
            </summary>
            <param name="dstNode">New destination node and
            child of this connection.</param>
        </member>
        <member name="P:GraphForms.Algorithms.IGraphEdge`1.SrcNode">
            <summary>
            Source Node; Parent of Connection
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.IGraphEdge`1.DstNode">
            <summary>
            Destination Node; Child of Connection
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.IGraphEdge`1.Weight">
            <summary>
            Proportionality to other edges; 
            Ideal length of graphical edge
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.SpanningTree.SpanningTreeGen">
            <summary>
            Used by algorithms, particularly tree-based graph layout algorithms,
            to allow the user to specify which method is used to generate 
            a sparsely connected spanning tree from a graph.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.SpanningTree.SpanningTreeGen.BFS">
            <summary>
            Generate the tree with a breadth first traversal of the graph.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.SpanningTree.SpanningTreeGen.DFS">
            <summary>
            Generate the tree with a depth first traversal of the graph.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.SpanningTree.SpanningTreeGen.Boruvka">
            <summary>
            Generate the tree with a 
            <see cref="T:BoruvkaMinSpanningTree`2{Node,Edge}"/> algorithm.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.SpanningTree.SpanningTreeGen.Kruskal">
            <summary>
            Generate the tree with a 
            <see cref="T:KruskalMinSpanningTree`2{Node,Edge}"/> algorithm.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.SpanningTree.SpanningTreeGen.Prim">
            <summary>
            Generate the tree with a 
            <see cref="T:PrimMinSpanningTree`2{Node,Edge}"/> algorithm.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.SpanningTree.BoruvkaMinSpanningTree`2.SpanningTree">
            <summary>
            A sub-graph of the original connected graph that connects all
            its vertices together with a minimal subset of its edges.
            </summary><remarks>
            If the original graph isn't connected, this graph will contain
            multiple spanning trees, one for each weakly connected
            component of the original graph.
            </remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.ForceDirected.LinLogLayoutAlgorithm`2.AddRepulsionDirection(System.Int32,GraphForms.Algorithms.Layout.ForceDirected.LinLogLayoutAlgorithm{`0,`1}.QuadTree,System.Double[])">
            <summary>
            Calculates the force the node at <paramref name="index"/> can apply
            to the numbered points using <paramref name="quadTree"/>.
            </summary>
            <param name="index">The node number to which you want to calculate the 
            repulsion strength.</param>
            <param name="quadTree"></param>
            <param name="dir">The repulsive strength is added to this vector.</param>
            <returns>Repulsion estimate of the second derivative of the energy.</returns>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.ForceDirected.LinLogLayoutAlgorithm`2.BuildQuadTree">
            <summary>
            To build a Quadtree (like the OctTree only in 2D).
            </summary>
            <returns></returns>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.ForceDirected.LinLogLayoutAlgorithm`2.QuadTree.MoveNode(GraphForms.Vec2F,GraphForms.Vec2F,System.Single)">
            <summary>
            The position of the sub recalculated minus the moved node part.
            </summary>
            <param name="oldPos"></param>
            <param name="newPos"></param>
            <param name="nodeWeight"></param>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.NodeSpacing">
            <summary>
            Gets or sets the method this algorithm uses to calculate the
            angles between nodes around the center of the embedding circle.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.MinRadius">
            <summary>
            Gets or sets the minimum radius of the embedding circle
            calculated by this layout algorithm.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.FreeArc">
            <summary>
            Gets or sets the minimum distance between nodes on the 
            embedding circle as measured along the arc between them
            on the embedding circle.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.SpanningTreeGeneration">
            <summary>
            Gets or sets the method this algorithm uses to build its internal
            sparsely connected spanning tree for traversing its graph.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.RootFindingMethod">
            <summary>
            Gets or sets the method this algorithm uses to choose the root
            node from which all subtrees branch off and orbit around.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.InSketchMode">
            <summary>
            Gets or sets whether this balloon tree layout algorithm is in
            "sketch mode", in which it arranges subtree/leaf nodes around
            their respective root nodes based on their original positions
            relative to their roots (in other words, from the original
            "sketch" of the graph before this layout algorithm was applied
            to it).</summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.BranchSpacing">
            <summary>
            Gets or sets the method this algorithm uses to calculate the
            angles between subtrees/leaves around their root.
            </summary><remarks>
            If set to <see cref="F:GraphForms.Algorithms.Layout.Circular.CircleSpacing.SNS"/>, the angle computation 
            will use the subtree's/leaf's bounding wedge defined by its 
            <see cref="P:CircleTree`2.UpperWedge"/> and 
            <see cref="P:CircleTree`2.LowerWedge"/> properties
            calculated by <see cref="M:CircleTree`2.CalculateAngles()"/>.
            </remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.RootCentering">
            <summary>
            Gets or sets the method that this algorithm uses to calculate
            the initial position of the root of the entire balloon tree.
            </summary><remarks>
            Be aware that if the position of the root node of the entire 
            balloon tree is fixed,
            this value is irrelevant (or basically equivalent to 
            <see cref="F:GraphForms.Algorithms.Layout.Circular.CircleCentering.Predefined"/>, even if it isn't
            set to that value).</remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.MinimumEdgeLength">
            <summary>
            Gets or sets the minimum length of an edge connecting a
            subtree/leaf node to its root node.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.EqualizeBranchLengths">
            <summary>
            Gets or sets whether the lengths of distances between a set of
            subtree/leaf nodes and their shared root node are equalized or
            minimized.</summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.MaximumRootWedge">
            <summary><para>
            Gets or sets the maximum allowable wedge in radians that the set
            of subtree/leaf nodes are allowed to occupy around the root node
            of the entire balloon tree.</para><para>
            Be aware that this angle will be normalized to the range [0,2π] 
            ( [0°,360°] ) when used.</para></summary><remarks>
            If the sum the bounding wedges of the set of subtree/leaf nodes
            exceeds this wedge, their <see cref="P:CircleTree`2.Distance"/>s
            are increased until all their bounding wedges can fit within it.
            Then their <see cref="P:CircleTree`2.Angle"/>s are set in the
            range <c>(-wedge / 2, wedge / 2)</c>, measured counterclockwise
            from the +X-axis of their shared root's local coordinate system.
            </remarks><seealso cref="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.MaximumTreeWedge"/>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.MaximumTreeWedge">
            <summary><para>
            Gets or sets the maximum allowable wedge in radians that a set
            of subtree/leaf nodes are allowed to occupy around their 
            shared root node.</para><para>
            Be aware that this angle will be normalized to the range [0,2π] 
            ( [0°,360°] ) when used.</para></summary><remarks>
            If the sum the bounding wedges of the set of subtree/leaf nodes
            exceeds this wedge, their <see cref="P:CircleTree`2.Distance"/>s
            are increased until all their bounding wedges can fit within it.
            Then their <see cref="P:CircleTree`2.Angle"/>s are set in the
            range <c>(-wedge / 2, wedge / 2)</c>, measured counterclockwise
            from the +X-axis of their shared root's local coordinate system.
            </remarks><seealso cref="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.MaximumRootWedge"/>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.AdjustRootCenters">
            <summary>
            Gets or sets whether the roots of any leaf/subtree nodes with
            fixed positions are first repositioned to attempt to set the
            local polar coordinate positions of their fixed branches equal
            to those calculated for the balloon tree.</summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.RootAngle">
            <summary>
            Gets or sets the angle which the entire balloon tree is rotated
            around the center of its root node, measured in radians
            counterclockwise from the +X-axis.
            </summary><remarks>
            Since this angle is measured clockwise from the +X-axis on a
            standard drawing surface (because the Y-axis is negated),
            the final graph will appear as if it has been rotated by the
            negation of this angle on a conventional 2D Euclidean manifold. 
            </remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.DegMaxRootWedge">
            <summary>
            Gets or sets the <see cref="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.MaximumRootWedge"/> parameter of this
            layout algorithm in degrees instead of radians for debugging.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.DegMaxTreeWedge">
            <summary>
            Gets or sets the <see cref="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.MaximumTreeWedge"/> parameter of this
            layout algorithm in degrees instead of radians for debugging.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.DegMaxDeviationAngle">
            <summary>
            Gets or sets the <see cref="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.MaximumDeviationAngle"/> parameter
            of this layout algorithm in degrees instead of radians for 
            debugging.</summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.DegRootAngle">
            <summary>
            Gets or sets the <see cref="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm2`2.RootAngle"/> parameter of this
            layout algorithm in degrees instead of radians for debugging.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.ForceNodeSequencing">
            <summary>
            Forces this algorithm to recalculate the ordering of the nodes
            in the embedding circle on next iteration of its layout
            computation, even if it has already done so after the last time
            the <see cref="P:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.NodeSequencer"/> parameter was changed.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.AngleAt(System.Int32)">
            <summary>
            Gets the calculated angle around the center of the embedding
            circle for the node at the given <paramref name="nodeIndex"/> 
            in the graph of this layout algorithm, measured in radians 
            counterclockwise from the +X-axis.</summary>
            <param name="nodeIndex">The index of the node in the graph
            of this layout algorithm.</param>
            <returns>The angle around the center of the embedding circle
            for the node at the given <paramref name="nodeIndex"/> in the
            graph of this layout algorithm, measured in radians
            counterclockwise from the +X-axis.</returns>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.NodeSequencer">
            <summary><para>
            Gets or sets the node sequencer this algorithm uses to calculate
            the ordering of the nodes in the embedding circle.</para><para>
            If set to <c>null</c>, the nodes will be arranged in the same 
            order they were inserted into their graph.</para></summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.NodeSpacing">
            <summary>
            Gets or sets the method this algorithm uses to calculate the
            angles between nodes around the center of the embedding circle.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.MinRadius">
            <summary>
            Gets or sets the minimum radius of the embedding circle
            calculated by this layout algorithm.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.FreeArc">
            <summary>
            Gets or sets the minimum distance between nodes on the 
            embedding circle as measured along the arc between them
            on the embedding circle.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.Centering">
            <summary>
            Gets or sets the method this algorithm uses to calculate the 
            initial position of the center of its embedding circle.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.CenterX">
            <summary>
            Gets or sets the X-coordinate of the center of the embedding
            circle (in the local coordinate system of the graph).
            </summary><remarks>
            Be aware that this value might change on each iteration if
            <see cref="P:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.AdjustCenter"/> is true or <see cref="P:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.Centering"/>
            is not <see cref="F:GraphForms.Algorithms.Layout.Circular.CircleCentering.Predefined"/>.
            </remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.CenterY">
            <summary>
            Gets or sets the Y-coordinate of the center of the embedding
            circle (in the local coordinate system of the graph).
            </summary><remarks>
            Be aware that this value might change on each iteration if
            <see cref="P:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.AdjustCenter"/> is true or <see cref="P:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.Centering"/>
            is not <see cref="F:GraphForms.Algorithms.Layout.Circular.CircleCentering.Predefined"/>.
            </remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.AdjustCenter">
            <summary>
            Gets or sets whether the center of the embedding circle is
            first repositioned to attempt to set the radii and angle
            of any fixed nodes on the embedding circle equal to those
            calculated for the embedding circle.</summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.RootAngle">
            <summary>
            Gets or sets the angle which the nodes of the graph are rotated
            around the center of the embedding circle, measured in radians
            counterclockwise from the +X-axis.
            </summary><remarks>
            Since this angle is measured clockwise from the +X-axis on a
            standard drawing surface (because the Y-axis is negated),
            the final graph will appear as if it has been rotated by the
            negation of this angle on a conventional 2D Euclidean manifold. 
            </remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.DegRootAngle">
            <summary>
            Gets or sets the <see cref="P:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.RootAngle"/> parameter of this 
            layout algorithm in degrees instead of radians for debugging.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.Radius">
            <summary>
            Gets the current radius of the embedding circle of this layout
            algorithm, as calculated based on the values of
            <see cref="P:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.NodeSpacing"/>, <see cref="P:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.MinRadius"/>, and
            <see cref="P:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.FreeArc"/>.</summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.BoundingRadius">
            <summary>
            Gets the current radius of the smallest circle concentric with
            the embedding circle of this layout algorithm that can enclose
            all the nodes in the graph processed by this layout algorithm.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.SingleCircleLayoutAlgorithm`2.Angles">
            <summary>
            Gets the calculated angles of the nodes of the graph of this
            layout algorithm around the center of its embedding circle, 
            measured in radians counterclockwise from the +X-axis, in the
            same order as their corresponding nodes are stored in the graph.
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.Layout.ILayoutNode">
            <summary>
            This interface helps define nodes used by layout algorithms.
            Its properties are critical for most layout algorithms.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.ILayoutNode.SetPosition(System.Single,System.Single)">
            <summary>
            Sets the position of this layout node
            in its graph's coordinate system.
            </summary>
            <param name="x">The new horizontal offset from the origin
            of the coordinate system of this layout node's graph.</param>
            <param name="y">The new vertical offset from the origin
            of the coordinate system of this layout node's graph.</param>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ILayoutNode.LayoutBBox">
            <summary>
            This layout node's bounding box in its local coordinate system.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ILayoutNode.X">
            <summary>
            The x-coordinate of this layout node's position 
            in its graph's coordinate system.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ILayoutNode.Y">
            <summary>
            The y-coordinate of this layout node's position
            in its graph's coordinate system.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ILayoutNode.PositionFixed">
            <summary>
            Whether this node is fixed to its current position and thereby
            unaffected by any layout algorithm applied to it.
            </summary><remarks>
            This should be true for any nodes being dragged by the mouse when 
            the layout algorithm is running.
            </remarks>
        </member>
        <member name="T:GraphForms.IUpdateable">
            <summary>
            An interface for classes that can be told to update, usually by
            external code which also causes outside changes that will effect
            an <see cref="T:GraphForms.IUpdateable"/> instance, but are outside that
            instance's awareness.
            </summary>
        </member>
        <member name="M:GraphForms.IUpdateable.Update">
            <summary>
            Called when this <see cref="T:GraphForms.IUpdateable"/> should be updated,
            particularly after external changes have occurred that will
            effect this instance, but are outside this instance's awareness.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.GetBoundingRadius(`0,System.Int32)">
            <summary>
            Calculates the radius of a circle that encloses the given
            <paramref name="node"/>, which is used to calculate the convex
            hulls of the subtrees that include the given node in their
            branches.</summary>
            <param name="node">The node enclosed within a circle of the
            returned radius.</param>
            <param name="nodeIndex">The index of the <paramref name="node"/>
            in its graph, which is being processed by this layout algorithm.
            </param>
            <returns>The radius of the bounding circle of the given
            <paramref name="node"/>, which by default is the smallest circle
            that circumscribes the given node's bounding box.</returns>
            <remarks><para>
            This function is only used when the layout algorithm builds its
            balloon tree data structure, which is only done when its 
            <see cref="P:LayoutAlgorithm`2.Graph"/> and/or the values of its
            <see cref="!:SpanningTreeGeneration"/> and/or 
            <see cref="!:RootFindingMethod"/> parameters are changed.
            </para><para>
            By default, this function simply returns half the length of the
            diagonal of the given <paramref name="node"/>'s 
            <see cref="P:GraphForms.Algorithms.Layout.ILayoutNode.LayoutBBox"/>, which is the radius of the
            smallest circle that circumscribes it.  It does not compensate
            for the possibility that the node's "center" might not be the
            center of its bounding box (the box's <see cref="F:GraphForms.Box2F.X"/>
            might not be equal to <c>-<see cref="P:GraphForms.Box2F.W"/> / 2</c>, or its
            <see cref="F:GraphForms.Box2F.Y"/> might not be equal to 
            <c>-<see cref="P:GraphForms.Box2F.H"/> / 2</c>).</para><para>
            This method can be overridden to take that into account, and/or
            to provide a more efficient bounding radius calculation for
            certain nodes. However, be aware that if this function ever
            returns a value less than or equal to zero, an
            <see cref="T:System.ArgumentOutOfRangeException"/> will be thrown when
            the layout algorithm attempts to use that invalid radius.
            </para></remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.CalculateBranchPositions(GraphForms.Algorithms.Collections.GTree{`0,`1,GraphForms.Algorithms.Collections.CircleGeom{`0,`1}}[])">
            <summary>
            Calculates the polar coordinates (the 
            <see cref="P:CircleTree`2{Node,Edge}.Angle"/> and 
            <see cref="P:CircleTree`2{Node,Edge}.Distance"/>) of each
            subtree or leaves in the given array of 
            <paramref name="branches"/>.</summary>
            <param name="branches">An array of layout node subtrees or leaves
            that share the same <see cref="P:CircleTree`2{Node,Edge}.Root"/>.
            </param><remarks><para>
            For classes that reimplement this function, be aware that this
            function is invoked recursively from the root down to the leaves
            of the layout tree, so the polar coordinates of the positions of 
            the <see cref="P:CircleTree`2{Node,Edge}.Branches"/> of each 
            subtree in the given <paramref name="branches"/> have already 
            been calculated by a previous invocation of this function, and 
            then the <see cref="P:CircleTree`2{Node,Edge}.ConvexHull"/> of 
            each subtree was calculated based on those positions.
            </para><para>
            In general, take great care when reimplementing this function, as
            it is the most important function of the entire balloon tree
            layout algorithm. The polar coordinate positions of the given
            <paramref name="branches"/> calculated by this function are not 
            only used to calculate the convex hull of their shared
            <see cref="P:CircleTree`2{Node,Edge}.Root"/>, but they are also 
            used to determine the final positions of the layout nodes at 
            their centers.</para></remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.GetMaximumTreeWedge(GraphForms.Algorithms.Collections.GTree{`0,`1,GraphForms.Algorithms.Collections.CircleGeom{`0,`1}})">
            <summary><para>
            Gets the maximum allowable wedge in radians that the
            <see cref="P:CircleTree`2{Node,Edge}.Branches"/> of the given 
            <paramref name="root"/> can occupy around it.</para><para>
            Be aware that this angle will be normalized to the range [0,2π] 
            ( [0°,360°] ) when used.</para></summary>
            <param name="root">The root to get maximum allowable wedge that
            its branches can occupy around it.</param>
            <returns>The maximum allowable wedge in radians that the branches
            of the given <paramref name="root"/> can occupy around it.
            </returns><remarks>
            By default, this function simply returns 
            <see cref="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.MaximumRootWedge"/> for the root of the entire balloon
            tree and <see cref="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.MaximumTreeWedge"/> for the roots of every
            subtree in the balloon tree, except when the subtree has exactly
            two branches. In that case it returns π (180°) if 
            <see cref="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.MaximumTreeWedge"/> is greater than that amount (when
            normalized) in order to make the tree look better. 
            See those properties for further details on what the 
            <see cref="M:CalculateBranchPositions(CircleTree`2[])"/>
            function does with the wedge angle this function returns.
            </remarks><seealso cref="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.MaximumRootWedge"/>
            <seealso cref="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.MaximumTreeWedge"/>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.SortBranches(GraphForms.Algorithms.Collections.GTree{`0,`1,GraphForms.Algorithms.Collections.CircleGeom{`0,`1}}[])">
            <summary><para>
            Used by <see cref="M:CalculateBranchPositions(CircleTree`2[])"/>
            to sort the given <paramref name="branches"/> in the order in
            which they will be arranged counterclockwise around their shared
            root from -π (-180°) to π (180°). </para><para>
            This ordering is then used to calculate the polar coordinates of 
            the position of each subtree or leaf in 
            <paramref name="branches"/>.</para></summary>
            <param name="branches">An array of layout node subtrees or leaves
            that share the same <see cref="P:CircleTree`2{Node,Edge}.Root"/>.
            </param><remarks>
            Be aware that if this function is reimplemented, it will make
            <see cref="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.InSketchMode"/> and <see cref="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.BranchSorter"/>
            meaningless, unless the reimplementation uses their values.
            </remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.InSketchMode">
            <summary>
            Gets or sets whether this balloon tree layout algorithm is in
            "sketch mode", in which it arranges subtree/leaf nodes around
            their respective root nodes based on their original positions
            relative to their roots (in other words, from the original
            "sketch" of the graph before this layout algorithm was applied
            to it).</summary><remarks>
            Be aware that if this mode is enabled, this will supersede
            <see cref="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.BranchSorter"/> and it will be used instead to 
            arrange subtrees/leaves around their roots.</remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.BranchSorter">
            <summary>
            Gets or sets the comparer used to sort subtrees/leaves in the
            order in which they will be arranged counterclockwise around
            their root from -π (-180°) to π (180°).
            </summary><remarks>
            Be aware that this is superseded by <see cref="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.InSketchMode"/>
            and won't be used if "sketch mode" is enabled.</remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.BranchSpacing">
            <summary>
            Gets or sets the method this algorithm uses to calculate the
            angles between subtrees/leaves around their root.
            </summary><remarks>
            If set to <see cref="F:GraphForms.Algorithms.Layout.Circular.CircleSpacing.SNS"/>, the angle computation 
            will use the subtree's/leaf's bounding wedge defined by its 
            <see cref="P:CircleTree`2.UpperWedge"/> and 
            <see cref="P:CircleTree`2.LowerWedge"/> properties
            calculated by <see cref="M:CircleTree`2.CalculateAngles()"/>.
            </remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.RootCentering">
            <summary>
            Gets or sets the method that this algorithm uses to calculate
            the initial position of the root of the entire balloon tree.
            </summary><remarks>
            Be aware that if the position of the root node of the entire 
            balloon tree is fixed,
            this value is irrelevant (or basically equivalent to 
            <see cref="F:GraphForms.Algorithms.Layout.Circular.CircleCentering.Predefined"/>, even if it isn't
            set to that value).</remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.MinimumEdgeLength">
            <summary>
            Gets or sets the minimum length of an edge connecting a
            subtree/leaf node to its root node.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.EqualizeBranchLengths">
            <summary>
            Gets or sets whether the lengths of distances between a set of
            subtree/leaf nodes and their shared root node are equalized or
            minimized.</summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.MaximumRootWedge">
            <summary><para>
            Gets or sets the maximum allowable wedge in radians that the set
            of subtree/leaf nodes are allowed to occupy around the root node
            of the entire balloon tree.</para><para>
            Be aware that this angle will be normalized to the range [0,2π] 
            ( [0°,360°] ) when used.</para></summary><remarks>
            If the sum the bounding wedges of the set of subtree/leaf nodes
            exceeds this wedge, their <see cref="P:CircleTree`2.Distance"/>s
            are increased until all their bounding wedges can fit within it.
            Then their <see cref="P:CircleTree`2.Angle"/>s are set in the
            range <c>(-wedge / 2, wedge / 2)</c>, measured counterclockwise
            from the +X-axis of their shared root's local coordinate system.
            </remarks><seealso cref="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.MaximumTreeWedge"/>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.MaximumTreeWedge">
            <summary><para>
            Gets or sets the maximum allowable wedge in radians that a set
            of subtree/leaf nodes are allowed to occupy around their 
            shared root node.</para><para>
            Be aware that this angle will be normalized to the range [0,2π] 
            ( [0°,360°] ) when used.</para></summary><remarks>
            If the sum the bounding wedges of the set of subtree/leaf nodes
            exceeds this wedge, their <see cref="P:CircleTree`2.Distance"/>s
            are increased until all their bounding wedges can fit within it.
            Then their <see cref="P:CircleTree`2.Angle"/>s are set in the
            range <c>(-wedge / 2, wedge / 2)</c>, measured counterclockwise
            from the +X-axis of their shared root's local coordinate system.
            </remarks><seealso cref="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.MaximumRootWedge"/>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.AdjustRootCenters">
            <summary>
            Gets or sets whether the roots of any leaf/subtree nodes with
            fixed positions are first repositioned to attempt to set the
            local polar coordinate positions of their fixed branches equal
            to those calculated for the balloon tree.</summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.RootAngle">
            <summary>
            Gets or sets the angle which the entire balloon tree is rotated
            around the center of its root node, measured in radians
            counterclockwise from the +X-axis.
            </summary><remarks>
            Since this angle is measured clockwise from the +X-axis on a
            standard drawing surface (because the Y-axis is negated),
            the final graph will appear as if it has been rotated by the
            negation of this angle on a conventional 2D Euclidean manifold. 
            </remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.DegMaxRootWedge">
            <summary>
            Gets or sets the <see cref="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.MaximumRootWedge"/> parameter of this
            layout algorithm in degrees instead of radians for debugging.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.DegMaxTreeWedge">
            <summary>
            Gets or sets the <see cref="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.MaximumTreeWedge"/> parameter of this
            layout algorithm in degrees instead of radians for debugging.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.DegRootAngle">
            <summary>
            Gets or sets the <see cref="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.RootAngle"/> parameter of this
            layout algorithm in degrees instead of radians for debugging.
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.SketchSorter">
            <summary>
            This comparer sorts subtree/leaf nodes by their angles in radians
            around their shared root node, measured counterclockwise from the
            +X-axis using <c>Atan2(leaf.Y - <see cref="F:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.SketchSorter.CX"/>,
            leaf.X - <see cref="F:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.SketchSorter.CY"/>)</c>.
            </summary><remarks>
            This comparer is provided for any descendant balloon tree layout
            algorithms that reimplement the 
            <see cref="M:SortBranches(CircleTree`2{Node,Edge}[])"/> function 
            and still support <see cref="P:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.InSketchMode"/> property.
            Anything that uses this comparer should give meaningful values to
            its <see cref="F:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.SketchSorter.CX"/>, <see cref="F:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.SketchSorter.CY"/>,
            and <see cref="F:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.SketchSorter.RootAngle"/> fields before using it
            to sort of a set of <see cref="T:CircleTree`2{Node,Edge}"/>
            instances that share the same 
            <see cref="P:CircleTree`2{Node,Edge}.Root"/>.</remarks>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.SketchSorter.CX">
            <summary>
            The X-coordinate of the center of the shared root of x and y.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.SketchSorter.CY">
            <summary>
            The Y-coordinate of the center of the shared root of x and y.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.SketchSorter.RootAngle">
            <summary><para>
            The angle in radians measured counterclockwise from the 
            +X-axis of the ray from the center of the shared root of 
            x and y to the center of its own root,</para><para>which  
            basically represents the direction of the -X-axis of the
            local coordinate system of the shared root of x and y.
            </para><para>
            This is used to make sure that x and y are on the same side
            of the -X-axis of the local coordinate system of their shared
            root so that they are correctly compared.
            </para><para>
            If the shared root of x and y has no root of its own (it is
            the base root of the entire balloon tree), -π (-180°) should
            be used in order to reduce the number of normalization
            operations performed on the angles of x and y.
            </para></summary>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.Tree.BalloonTreeLayoutAlgorithm`2.SketchSorter.Compare(GraphForms.Algorithms.Collections.GTree{`0,`1,GraphForms.Algorithms.Collections.CircleGeom{`0,`1}},GraphForms.Algorithms.Collections.GTree{`0,`1,GraphForms.Algorithms.Collections.CircleGeom{`0,`1}})">
            <summary>
            Compares the two given subtree/leaf nodes based their current
            angles (measured counterclockwise from the +X-axis) around
            their shared <see cref="P:CircleTree`2.Root"/>.</summary>
            <param name="x">A node to compare by angle.</param>
            <param name="y">A node to compare by angle.</param>
            <returns>0 if <paramref name="x"/> and <paramref name="y"/>
            are at the same angle around their root; 1 if 
            <paramref name="x"/> is at a greater angle than 
            <paramref name="y"/>; -1 if <paramref name="x"/> is at a
            lesser angle than <paramref name="y"/>.</returns>
        </member>
        <member name="T:GraphForms.Algorithms.ConnectedComponents.ICCAlgorithm`2">
            <summary>
            This interface defines a template for algorithms that calculate
            connected components of a graph and return them as groups of nodes
            in that graph. The properties of the connected components can differ 
            between algorithms that implement this interface.
            </summary>
            <typeparam name="Node">The type of nodes in the graph that the
            connected component algorithm operates on.</typeparam>
        </member>
        <member name="P:GraphForms.Algorithms.ConnectedComponents.ICCAlgorithm`2.Components">
            <summary>
            The connected components of a graph, returned as a series of 
            <typeparamref name="Node"/> arrays containing the nodes in each 
            connected component.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.ConnectedComponents.ICCAlgorithm`2.ComponentRoots">
            <summary>
            The roots or starting points of each connected component,
            in the same order as <see cref="P:GraphForms.Algorithms.ConnectedComponents.ICCAlgorithm`2.Components"/>.
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.Collections.CircleGeom`2">
            <summary>
            A tree data structure used for storing a circle with a distinct
            radius and position around its parent in polar coordinates,
            which can then compute the net convex hull of its circle and the
            circles on all of its branches and return that hull as a series of 
            arcs for processing.
            </summary>
            <typeparam name="Node">The type of data stored in each circle
            in the tree, which usually represent something inscribed within
            each circle.</typeparam>
            <typeparam name="Edge">The type of data that connects each circle
            back to its root in this tree.</typeparam>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.CircleGeom`2.#ctor(System.Double)">
            <summary>
            Creates a new circle tree with the given <paramref name="nData"/>
            that has a circle of the given <paramref name="radius"/> at its 
            center and the specified initial capacity for storing its 
            branches.</summary>
            <param name="nData">The <see cref="!:NodeData"/> stored in this 
            circle tree instance.</param>
            <param name="eData">The <see cref="!:EdgeData"/> stored in this
            circle tree instance.</param>
            <param name="radius">The radius of the circle at the center
            of the new circle tree.</param>
            <param name="capacity">The number of branches that the new
            circle tree can initially store without resizing.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="radius"/> is less than or equal to zero or 
            <paramref name="capacity"/> is less than zero.</exception>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.CircleGeom`2.CalculateConvexHull">
            <summary>
            Forces this circle tree to calculate its <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.ConvexHull"/>
            and causes all of its branches which have been invalidated to 
            also calculate their convex hulls.</summary><remarks><para>
            This algorithm is based on the following scientific article,
            which helped a lot in figuring out how to implement it:
            </para><para>
            Incremental Algorithms for Finding the Convex Hulls of Circles 
            and the Lower Envelopes of Parabolas </para><para> 
            Olivier Devillers, Mordecai J Golin </para><para>
            Information Processing Letters 56 (3), 157-164, 1995</para><para>
            http://hal.archives-ouvertes.fr/docs/00/41/31/63/PDF/dg-iafch-95.pdf
            </para></remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.CircleGeom`2.CalculateBoundingWedge">
            <summary>
            Forces this circle tree to calculate the angles and lengths of 
            the two rays that form the bounding wedge of its 
            <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.ConvexHull"/>.</summary><remarks>
            This forces the circle tree to recalculate its convex hull 
            if it hasn't done so already or if its <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.Radius"/> or
            branches have been changed since the last time its convex hull
            was calculated.</remarks>
            <seealso cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.UpperWedge"/><seealso cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.LowerWedge"/>
            <seealso cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.UpperLength"/><seealso cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.LowerLength"/>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.CircleGeom`2.CalculateBoundingBox">
            <summary>
            Calculates the smallest rectangle that can completely enclose
            this circle tree's <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.ConvexHull"/>.
            </summary>
            <returns>The smallest rectangle that can completely enclose
            this circle tree's <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.ConvexHull"/>.</returns><remarks>
            This forces the circle tree to recalculate its convex hull 
            if it hasn't done so already or if its <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.Radius"/> or
            branches have been changed since the last time its convex hull
            was calculated.</remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.CircleGeom`2.Radius">
            <summary>
            The radius of the circle at the center of this circle tree.
            </summary><exception cref="T:System.ArgumentOutOfRangeException">
            <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.Radius"/> is set to a value that is less than or 
            equal to zero.</exception><remarks>
            Changing this value invalidates the <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.ConvexHull"/>
            of this tree and all its ancestors, causing them to be
            recalculated the next time their values are retrieved.
            </remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.CircleGeom`2.Distance">
            <summary>
            The distance between the centers of this circle tree and its 
            <see cref="!:Root"/>. Attempting to set a negative value causes
            the distance to be set to the inverse value and the 
            <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.Angle"/> to be increased by π radians (180°).
            </summary><remarks><para>
            This value is part of the polar coordinates that define the
            position of this circle tree.</para><para>
            Changing this value invalidates the <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.ConvexHull"/>
            of all the ancestors of this tree, causing them to be
            recalculated the next time their values are retrieved.
            </para></remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.CircleGeom`2.Angle">
            <summary>
            The positional angle of this circle tree's center around the 
            center of its <see cref="!:Root"/> in radians measured 
            counterclockwise from the +X-axis of local coordinate system of
            <see cref="!:Root"/>. This value is normalized to within the range 
            [-π,π] ([-180°,180°]).</summary><remarks><para>
            This value is part of the polar coordinates that define the
            position of this circle tree.</para><para>
            Changing this value invalidates the <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.ConvexHull"/>
            of all the ancestors of this tree, causing them to be
            recalculated the next time their values are retrieved.
            </para></remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.CircleGeom`2.ConvexHullDirty">
            <summary>
            Gets whether this circle tree's <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.ConvexHull"/> will be
            recalculated the next time it is retrieved because either its
            <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.Radius"/> or <see cref="!:Branches"/> have been changed
            since the last time its convex hull was calculated.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.CircleGeom`2.ConvexHull">
            <summary>
            The convex hull that encloses the circle at the center of this
            circle tree and all the circles on all the branches of this
            circle tree, ordered by increasing <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.ZSortAngle"/>.
            </summary><remarks>
            This forces the circle tree to recalculate its convex hull 
            if it hasn't done so already or if its <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.Radius"/> or
            branches have been changed since the last time its convex hull
            was calculated.
            </remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.CircleGeom`2.ConvexHullBoundingCircle">
            <summary>
            The bounding circle of the convex hull of this circle tree, 
            which is the smallest circle that can completely enclose this 
            circle tree's <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.ConvexHull"/>.
            </summary><remarks>
            This forces the circle tree to recalculate its convex hull 
            if it hasn't done so already or if its <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.Radius"/> or
            branches have been changed since the last time its convex hull
            was calculated.
            </remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.CircleGeom`2.UpperWedge">
            <summary>
            The smallest angle in radians measured counterclockwise
            from the X-axis to a ray starting at the point 
            <c>(-<see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.Distance"/>,0)</c> that does not intersect
            the <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.ConvexHull"/>, but is tangent to one or more 
            of its arcs.</summary><remarks>
            This forces the circle tree to recalculate its bounding wedge
            (<see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.UpperWedge"/>, <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.LowerWedge"/>,
             <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.UpperLength"/>, and <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.LowerLength"/>)
            if it hasn't already done so or if its <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.Distance"/>
            or <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.ConvexHull"/> have changed since the last time
            its bounding wedge was calculated.
            </remarks><seealso cref="M:GraphForms.Algorithms.Collections.CircleGeom`2.CalculateBoundingWedge"/>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.CircleGeom`2.LowerWedge">
            <summary>
            The smallest angle in radians measured clockwise
            from the X-axis to a ray starting at the point 
            <c>(-<see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.Distance"/>,0)</c> that does not intersect
            the <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.ConvexHull"/>, but is tangent to one or more 
            of its arcs.</summary><remarks>
            This forces the circle tree to recalculate its bounding wedge
            (<see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.UpperWedge"/>, <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.LowerWedge"/>,
             <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.UpperLength"/>, and <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.LowerLength"/>)
            if it hasn't already done so or if its <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.Distance"/>
            or <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.ConvexHull"/> have changed since the last time
            its bounding wedge was calculated.
            </remarks><seealso cref="M:GraphForms.Algorithms.Collections.CircleGeom`2.CalculateBoundingWedge"/>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.CircleGeom`2.UpperLength">
            <summary>
            The length of the ray that forms the <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.UpperWedge"/> of
            the bounding wedge of this circle tree's 
            <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.ConvexHull"/>.</summary><remarks>
            This forces the circle tree to recalculate its bounding wedge
            (<see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.UpperWedge"/>, <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.LowerWedge"/>,
             <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.UpperLength"/>, and <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.LowerLength"/>)
            if it hasn't already done so or if its <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.Distance"/>
            or <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.ConvexHull"/> have changed since the last time
            its bounding wedge was calculated.
            </remarks><seealso cref="M:GraphForms.Algorithms.Collections.CircleGeom`2.CalculateBoundingWedge"/>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.CircleGeom`2.LowerLength">
            <summary>
            The length of the ray that forms the <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.LowerWedge"/> of
            the bounding wedge of this circle tree's 
            <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.ConvexHull"/>.</summary><remarks>
            This forces the circle tree to recalculate its bounding wedge
            (<see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.UpperWedge"/>, <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.LowerWedge"/>,
             <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.UpperLength"/>, and <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.LowerLength"/>)
            if it hasn't already done so or if its <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.Distance"/>
            or <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.ConvexHull"/> have changed since the last time
            its bounding wedge was calculated.
            </remarks><seealso cref="M:GraphForms.Algorithms.Collections.CircleGeom`2.CalculateBoundingWedge"/>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.CircleGeom`2.DegAngle">
            <summary>
            Gets this circle tree's <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.Angle"/> in degrees 
            instead of radians for debugging.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.CircleGeom`2.DegUpperWedge">
            <summary>
            Gets this circle tree's <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.UpperWedge"/> in degrees
            instead of radians for debugging.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.CircleGeom`2.DegLowerWedge">
            <summary>
            Gets this circle tree's <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.LowerWedge"/> in degrees
            instead of radians for debugging.
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc">
            <summary><para>
            This data structure represents an individual arc in the convex
            hull of a circle tree instance.</para><para>
            It includes the arc's radius, its polar coordinates around the 
            center of its parent convex hull, and angles that represent its 
            endpoints around its own center.</para><para>
            Unless stated otherwise, all fields that store an angular value
            are in radians in the range [-π,π] ( [-180°,180°] ).
            </para></summary>
        </member>
        <member name="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.Data">
            <summary>
            The <see cref="P:CircleTree`2{Node,Edge}.NodeData"/> of the 
            circle that formed this arc in its convex hull and/or the 
            convex hulls of its ancestors.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.Rad">
            <summary>
            The radius this arc.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.Dst">
            <summary>
            The distance between this arc's center and the center of
            its parent convex hull.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.Ang">
            <summary>
            The angle of the center of this arc around the center of its
            parent convex hull, measured in radians counterclockwise from
            the +X-axis of the local coordinate system of its parent 
            convex hull.</summary>
        </member>
        <member name="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.LowerWedge">
            <summary><para>
            The wedge between this arc's lower endpoint and the infinite
            ray from the center of its parent convex hull through its own
            center,</para><para>measured in radians clockwise from
            the latter ray around this arc's own center (not the center
            of its parent convex hull).</para></summary>
        </member>
        <member name="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.UpperWedge">
            <summary><para>
            The wedge between this arc's upper endpoint and the infinite
            ray from the center of its parent convex hull through its own
            center,</para><para>measured in radians counterclockwise from
            the latter ray around this arc's own center (not the center 
            of its parent convex hull).</para></summary>
        </member>
        <member name="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.WedgeOffset">
            <summary><para>
            The angle between an infinite ray from the center of this
            arc's parent convex hull through a point intersecting this
            arc and the ray from the center of this arc's parent convex
            hull to its own center,</para><para>measured in radians 
            counterclockwise from the latter ray around the center of 
            this arc's parent convex hull.</para>
            Unlike all the other angular fields, this field has a range
            of [-2π,2π] ( [-360°,360°] ) instead of [-π,π] 
            ( [-180°,180°] ).<para></para></summary><remarks><para>
            This field is almost always zero, and it is really only used
            when there are two or more arcs with the same 
            <see cref="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.Ang"/> and <see cref="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.Dst"/>, but different
            <see cref="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.LowerWedge"/> and <see cref="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.UpperWedge"/> values
            as a result of being split by another arc. In this case,
            these two new arcs need to be differentiated from each other
            and have a way being arranged both before and after the arc
            that split them when sorted by their angle around the center
            of their parent convex hull.</para><para>
            This is why the arcs that form a convex hull are sorted by
            the sum of their <see cref="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.Ang"/> and this wedge offset,
            instead of just their <see cref="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.Ang"/>, which might not be
            unique.</para><para>
            This field is not needed when the arc's center is also the
            center of its parent convex hull (its <see cref="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.Dst"/> is
            zero), as the <see cref="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.Ang"/> values of the two new arcs
            resulting from a split can be set to be centered within
            their respective wedges.</para></remarks>
            <seealso cref="!:SortAngle"/>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.#ctor(`0,System.Double)">
            <summary>
            Creates a new arc with the given <see cref="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.Data"/> and 
            <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.Radius"/> and all its other fields set to zero.
            </summary>
            <param name="data">The data of the circle tree leaf/subtree
            that created this arc in the convex hull.</param>
            <param name="rad">The radius of this arc.</param>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.#ctor(GraphForms.Algorithms.Collections.CircleGeom{`0,`1}.CHArc)">
            <summary>
            Creates a new arc with all its values equal to those of the
            given <paramref name="arc"/>.
            </summary>
            <param name="arc">The arc to copy.</param>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.ToString">
            <summary>
            Returns the results of the <see cref="M:System.Object.ToString"/>
            method of the <see cref="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.Data"/> field for debugging.
            </summary>
            <returns>The <see cref="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.Data"/> field as a string.</returns>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.ZSortAngle">
            <summary>
            The sum of this arc's <see cref="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.Ang"/> and 
            <see cref="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.WedgeOffset"/>, which is a unique value used
            to sort the arcs that form a convex hull. This value is 
            almost always equal to <see cref="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.Ang"/>, as
            <see cref="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.WedgeOffset"/> is almost always zero.
            </summary><seealso cref="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.WedgeOffset"/><seealso cref="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.Ang"/>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.DegAng">
            <summary>
            The <see cref="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.Ang"/> field in degrees 
            instead of radians for debugging.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.DegLowerWedge">
            <summary>
            The <see cref="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.LowerWedge"/> field in degrees
            instead of radians for debugging.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.DegUpperWedge">
            <summary>
            The <see cref="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.UpperWedge"/> field in degrees
            instead of radians for debugging.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.DegWedgeOffset">
            <summary>
            The <see cref="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.WedgeOffset"/> field in degrees
            instead of radians for debugging.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.DegZSortAngle">
            <summary>
            The <see cref="P:GraphForms.Algorithms.Collections.CircleGeom`2.CHArc.ZSortAngle"/> property in degrees
            instead of radians for debugging.
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.Collections.CircleGeom`2.CHRadComp">
            <summary>
            This comparer is used to sort an array of convex hull circles
            by decreasing radius.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Collections.CircleGeom`2.CHRadComp.S">
            <summary>
            Static singleton instance of this comparer,
            used to conserve memory.
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.Collections.CircleGeom`2.CHAngComp">
            <summary>
            This comparer is used to sort an array of convex hull arcs
            by increasing sort angle (angle + wedge offset).
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.Layout.ForceDirected.FRFreeLayoutAlgorithm`2">
            <summary>
            Free version of the Fruchterman-Reingold Force-Directed Algorithm, 
            which lets the user set the ideal edge length and calculates the 
            initial temperature based on that length.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.ForceDirected.FRLayoutAlgorithm`2.mTemperature">
            <summary>
            Actual temperature of the 'mass'. Used for cooling.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.ForceDirected.FRLayoutAlgorithm`2.mCoA">
            <summary>
            Constant of Attraction calculated from the parameters
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.ForceDirected.FRLayoutAlgorithm`2.mCoR">
            <summary>
            Constant of Repulsion calculated from the parameters
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.ForceDirected.FRLayoutAlgorithm`2.UpdateParameters">
            <summary>
            Recalculates all parameters that are dependent on the values
            of other parameters, including <see cref="P:GraphForms.Algorithms.Layout.ForceDirected.FRLayoutAlgorithm`2.ConstantOfRepulsion"/>
            and <see cref="P:GraphForms.Algorithms.Layout.ForceDirected.FRLayoutAlgorithm`2.ConstantOfAttraction"/>.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ForceDirected.FRLayoutAlgorithm`2.K">
            <summary>
            Gets the computed ideal edge length.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ForceDirected.FRLayoutAlgorithm`2.InitialTemperature">
            <summary>
            Gets the initial temperature of the mass.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ForceDirected.FRLayoutAlgorithm`2.ConstantOfAttraction">
            <summary>
            Constant of the attraction, which equals <code><see cref="P:GraphForms.Algorithms.Layout.ForceDirected.FRLayoutAlgorithm`2.K"/> * 
            <see cref="P:GraphForms.Algorithms.Layout.ForceDirected.FRLayoutAlgorithm`2.AttractionMultiplier"/></code>.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ForceDirected.FRLayoutAlgorithm`2.AttractionMultiplier">
            <summary>
            Multiplier of the attraction. Default value is 2.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ForceDirected.FRLayoutAlgorithm`2.ConstantOfRepulsion">
            <summary>
            Constant of the repulsion, which equals <code>Pow(<see cref="P:GraphForms.Algorithms.Layout.ForceDirected.FRLayoutAlgorithm`2.K"/> *
            <see cref="P:GraphForms.Algorithms.Layout.ForceDirected.FRLayoutAlgorithm`2.RepulsiveMultiplier"/>, 2)</code>.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ForceDirected.FRLayoutAlgorithm`2.RepulsiveMultiplier">
            <summary>
            Multiplier of the repulsion. Default value is 1.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ForceDirected.FRLayoutAlgorithm`2.Lambda">
            <summary>
            Lambda for the cooling function. Default value is 0.95.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ForceDirected.FRLayoutAlgorithm`2.CoolingFunction">
            <summary>
            Gets or sets the cooling function 
            which could be Linear or Exponential.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ForceDirected.FRFreeLayoutAlgorithm`2.K">
            <summary>
            Gets the computed ideal edge length.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ForceDirected.FRFreeLayoutAlgorithm`2.InitialTemperature">
            <summary>
            Gets the initial temperature of the mass, which equals 
            <code>Sqrt(Pow(<see cref="P:GraphForms.Algorithms.Layout.ForceDirected.FRFreeLayoutAlgorithm`2.IdealEdgeLength"/>, 2) * nodeCount)
            </code>.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ForceDirected.FRFreeLayoutAlgorithm`2.IdealEdgeLength">
            <summary>
            Constant which represents the ideal length of the edges.
            Default value is 10.
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.SpanningTree.BFSpanningTree`2">
            <summary>
            This algorithm uses a simple breadth first traversal of a given graph
            to generate a spanning tree.</summary>
            <typeparam name="Node">The type of vertices in the spanning tree 
            generated by this algorithm.</typeparam>
            <typeparam name="Edge">The type of edges in the spanning tree 
            generated by this algorithm.</typeparam>
        </member>
        <member name="M:GraphForms.Algorithms.SpanningTree.BFSpanningTree`2.OnTreeEdge(GraphForms.Algorithms.Digraph{`0,`1}.GEdge,System.Boolean,System.UInt32)">
            <summary>
            Called whenever the algorithm explores an edge in the graph
            connected to an unexplored node, that edge is then added to the
            spanning tree.
            </summary>
            <param name="e">The edge being explored by this graph traversal 
            algorithm.</param>
            <param name="reversed">True if the edge is being explored from 
            destination to source instead of from source to destination.
            </param>
        </member>
        <member name="P:GraphForms.Algorithms.SpanningTree.BFSpanningTree`2.SpanningTree">
            <summary>
            A sub-graph of the original connected graph that connects all
            its vertices together with a minimal subset of its edges.
            </summary><remarks>
            If the original graph isn't connected, this graph will contain
            multiple spanning trees, one for each (weakly) connected
            component of the original graph.
            </remarks>
        </member>
        <member name="T:GraphForms.Algorithms.Layout.Circular.CircleCentering">
            <summary>
            Used to specify which method a circular layout algorithm uses to
            calculate the initial position of the center of a circle of nodes
            or the root node of a circular tree of nodes.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.Circular.CircleCentering.Predefined">
            <summary>
            Use a center position that has already been predefined by
            parameters of the circular layout algorithm and/or by
            the position of the root node of the circular tree.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.Circular.CircleCentering.Centroid">
            <summary>
            Calculate the center from the numeric averages of the
            coordinates of the positions of all the nodes in the graph
            being operated on by the circular layout algorithm.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.Circular.CircleCentering.BBoxCenter">
            <summary>
            Use the calculated center of the
            <see cref="P:ILayoutNode.LayoutBBox"/> of the
            <see cref="P:LayoutAlgorithm`2.ClusterNode"/>
            of the circular layout algorithm, or its
            <see cref="P:LayoutAlgorithm`2.BoundingBox"/>
            if it does not have a cluster node.
            </summary>
        </member>
        <member name="T:GraphForms.GraphMouseEventArgs">
            <summary>
            Provides data for mouse events that are propagated to 
            <see cref="T:GraphForms.GraphElement"/> instances.
            </summary>
        </member>
        <member name="T:GraphForms.GraphEventArgs">
            <summary>
            Base class for arguments of events that are propagated to
            <see cref="T:GraphForms.GraphElement"/> instances down their ancestry chains.
            </summary>
        </member>
        <member name="M:GraphForms.GraphEventArgs.#ctor">
            <summary>
            Initializes a new unhandled instance of the 
            <see cref="T:GraphForms.GraphEventArgs"/> class.
            </summary>
        </member>
        <member name="M:GraphForms.GraphEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphForms.GraphEventArgs"/>
            class with its <see cref="P:GraphForms.GraphEventArgs.Handled"/> value set to 
            <paramref name="handled"/>. </summary>
            <param name="handled">Whether or not the event has already been 
            <see cref="P:GraphForms.GraphEventArgs.Handled"/>.</param>
        </member>
        <member name="P:GraphForms.GraphEventArgs.Handled">
            <summary>
            Whether or not the event has been handled by another event
            handler in a different <see cref="T:GraphForms.GraphElement"/> before it
            was passed to the current event handler.
            </summary>
        </member>
        <member name="M:GraphForms.GraphMouseEventArgs.#ctor(System.Boolean,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphForms.GraphMouseEventArgs"/>
            class. </summary>
            <param name="handled">Whether or not the event has already been
            handled by another graph element's mouse event handler.</param>
            <param name="button">One of the 
            <see cref="T:System.Windows.Forms.MouseButtons"/> values indicating 
            which mouse button was pressed.</param>
            <param name="clicks">The number of times a mouse button was 
            pressed.</param>
            <param name="sceneX">The x-coordinate of a mouse click, in pixels, 
            relative to the <see cref="T:GraphForms.GraphScene"/>'s view's coordinate 
            system. </param>
            <param name="sceneY">The y-coordinate of a mouse click, in pixels, 
            relative to the <see cref="T:GraphForms.GraphScene"/>'s view's coordinate 
            system. </param>
            <param name="x">The x-coordinate of a mouse click, in pixels, 
            relative to the <see cref="T:GraphForms.GraphElement"/>'s coordinate system.
            </param>
            <param name="y">The y-coordinate of a mouse click, in pixels, 
            relative to the <see cref="T:GraphForms.GraphElement"/>'s coordinate system.
            </param>
            <param name="delta">A signed count of the number of detents the 
            wheel has rotated.</param>
        </member>
        <member name="M:GraphForms.GraphMouseEventArgs.#ctor(GraphForms.GraphMouseEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphForms.GraphMouseEventArgs"/>
            class by copying the values of the given instance of the same class.
            </summary>
            <param name="e">The <see cref="T:GraphForms.GraphMouseEventArgs"/> instance
            whose values are cloned into this <see cref="T:GraphForms.GraphMouseEventArgs"/>
            instance.</param>
        </member>
        <member name="M:GraphForms.GraphMouseEventArgs.#ctor(GraphForms.GraphMouseEventArgs,System.Boolean,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphForms.GraphMouseEventArgs"/>
            class by copying the values of the given instance of the same class,
            and offsets the new instance's <see cref="P:GraphForms.GraphMouseEventArgs.Pos"/> by the given
            values <paramref name="dx"/> and <paramref name="dy"/>.
            </summary>
            <param name="e">The <see cref="T:GraphForms.GraphMouseEventArgs"/> instance
            whose values are cloned into this <see cref="T:GraphForms.GraphMouseEventArgs"/>
            instance.</param>
            <param name="dx">The horizontal offset to add to 
            <paramref name="e"/>'s <see cref="P:GraphForms.GraphMouseEventArgs.X"/> value to get this instance's
            <see cref="P:GraphForms.GraphMouseEventArgs.X"/> value. </param>
            <param name="dy">The vertical offset to add to 
            <paramref name="e"/>'s <see cref="P:GraphForms.GraphMouseEventArgs.Y"/> value to get this instance's
            <see cref="P:GraphForms.GraphMouseEventArgs.Y"/> value. </param>
        </member>
        <member name="P:GraphForms.GraphMouseEventArgs.Button">
            <summary>
            Gets which mouse button was pressed.
            </summary><value>
            One of the <see cref="T:System.Windows.Forms.MouseButtons"/> values.
            </value>
        </member>
        <member name="P:GraphForms.GraphMouseEventArgs.Clicks">
            <summary>
            Gets the number of times the mouse button was pressed and released.
            </summary><value>
            An <see cref="T:System.Int32"/> containing the number of times the
            mouse button was pressed and released.
            </value>
        </member>
        <member name="P:GraphForms.GraphMouseEventArgs.SceneX">
            <summary>
            Gets the x-coordinate of the mouse during the generating mouse 
            event, relative to the <see cref="T:GraphForms.GraphScene"/>'s view's
            coordinate system. </summary><value>
            The x-coordinate of the mouse, in pixels, relative to the 
            <see cref="T:GraphForms.GraphScene"/>'s local coordinate system.</value>
        </member>
        <member name="P:GraphForms.GraphMouseEventArgs.SceneY">
            <summary>
            Gets the y-coordinate of the mouse during the generating mouse 
            event, relative to the <see cref="T:GraphForms.GraphScene"/>'s view's
            coordinate system. </summary><value>
            The y-coordinate of the mouse, in pixels, relative to the 
            <see cref="T:GraphForms.GraphScene"/>'s local coordinate system.</value>
        </member>
        <member name="P:GraphForms.GraphMouseEventArgs.ScenePos">
            <summary>
            Gets the position of the mouse during the generating mouse 
            event, relative to the <see cref="T:GraphForms.GraphScene"/>'s view's
            coordinate system. </summary><value>
            A <see cref="T:System.Drawing.Point"/> containing the
            x- and y- coordinates of the mouse, in pixels, relative to 
            the <see cref="T:GraphForms.GraphScene"/>'s view's local coordinate system.
            </value>
        </member>
        <member name="P:GraphForms.GraphMouseEventArgs.X">
            <summary>
            Gets the x-coordinate of the mouse during the generating mouse 
            event, relative to the <see cref="T:GraphForms.GraphElement"/>'s local
            coordinate system. </summary><value>
            The x-coordinate of the mouse, in pixels, relative to the 
            <see cref="T:GraphForms.GraphElement"/>'s local coordinate system.</value>
        </member>
        <member name="P:GraphForms.GraphMouseEventArgs.Y">
            <summary>
            Gets the y-coordinate of the mouse during the generating mouse 
            event, relative to the <see cref="T:GraphForms.GraphElement"/>'s local
            coordinate system. </summary><value>
            The y-coordinate of the mouse, in pixels, relative to the 
            <see cref="T:GraphForms.GraphElement"/>'s local coordinate system.</value>
        </member>
        <member name="P:GraphForms.GraphMouseEventArgs.Pos">
            <summary>
            Gets the position of the mouse during the generating mouse 
            event, relative to the <see cref="T:GraphForms.GraphElement"/>'s local
            coordinate system. </summary><value>
            A <see cref="T:System.Drawing.PointF"/> containing the
            x- and y- coordinates of the mouse, in pixels, relative to 
            the <see cref="T:GraphForms.GraphElement"/>'s local coordinate system.
            </value>
        </member>
        <member name="P:GraphForms.GraphMouseEventArgs.Location">
            <summary>
            Gets the location of the mouse during the generating mouse 
            event, relative to the <see cref="T:GraphForms.GraphElement"/>'s local
            coordinate system. </summary><value>
            A <see cref="T:System.Drawing.Point"/> containing the
            x- and y- coordinates of the mouse, in pixels, relative to 
            the <see cref="T:GraphForms.GraphElement"/>'s local coordinate system.
            </value>
        </member>
        <member name="P:GraphForms.GraphMouseEventArgs.Delta">
            <summary>
            Gets a signed count of the number of detents the mouse wheel has 
            rotated. A detent is one notch of the mouse wheel.
            </summary><value>
            A signed count of the number of detents the mouse wheel has 
            rotated.</value>
        </member>
        <member name="T:GraphForms.GraphHelpers">
            <summary>
            A global class containing static functions for helping with
            mathematics and drawing element manipulation.
            </summary>
        </member>
        <member name="M:GraphForms.GraphHelpers.FuzzyCompare(System.Single,System.Single)">
            <summary>
            Compares the two given numbers in a relative way,
            where the exactness is stronger the smaller the numbers are.
            </summary>
            <param name="p1">A number to compare with <paramref name="p2"/>.
            </param>
            <param name="p2">A number to compare with <paramref name="p1"/>.
            </param>
            <returns>True if <paramref name="p1"/> and <paramref name="p2"/>
            are considered equal, otherwise false.</returns>
            <remarks>
            Note that comparing values where either <paramref name="p1"/> or
            <paramref name="p2"/> is 0.0 will not work. The solution to this
            is to compare against values greater than or equal to 1.0.
            </remarks>
        </member>
        <member name="M:GraphForms.GraphHelpers.FuzzyCompare(System.Double,System.Double)">
            <summary>
            Compares the two given numbers in a relative way,
            where the exactness is stronger the smaller the numbers are.
            </summary>
            <param name="p1">A number to compare with <paramref name="p2"/>.
            </param>
            <param name="p2">A number to compare with <paramref name="p1"/>.
            </param>
            <returns>True if <paramref name="p1"/> and <paramref name="p2"/>
            are considered equal, otherwise false.</returns>
            <remarks>
            Note that comparing values where either <paramref name="p1"/> or
            <paramref name="p2"/> is 0.0 will not work. The solution to this
            is to compare against values greater than or equal to 1.0.
            </remarks>
        </member>
        <member name="M:GraphForms.GraphHelpers.FuzzyIsNull(System.Single)">
            <summary>
            Returns whether or not the given number is relatively
            equal to zero (less than or equal to the single precision
            fuzziness factor 0.00001).
            </summary>
            <param name="f">The number to test if it's relatively zero.</param>
            <returns>True if <c><paramref name="f"/> &lt;= 0.00001</c>,
            false otherwise.</returns>
        </member>
        <member name="M:GraphForms.GraphHelpers.FuzzyIsNull(System.Double)">
            <summary>
            Returns whether or not the given number is relatively
            equal to zero (less than or equal to the double precision
            fuzziness factor 0.000000000001).
            </summary>
            <param name="d">The number to test if it's relatively zero.</param>
            <returns>True if <c><paramref name="d"/> &lt;= 0.000000000001</c>,
            false otherwise.</returns>
        </member>
        <member name="M:GraphForms.GraphHelpers.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Constrains a given <paramref name="value"/> to be between the 
            given <paramref name="min"/> and <paramref name="max"/> values.
            </summary>
            <param name="value">The value to constrain.</param>
            <param name="min">The minimum allowable value.</param>
            <param name="max">The maximum allowable value.</param>
            <returns><paramref name="min"/> if <paramref name="value"/> is
            less than <paramref name="min"/>, or <paramref name="max"/> if
            <paramref name="value"/> is greater than <paramref name="max"/>, 
            or <paramref name="value"/> in all other cases.</returns>
        </member>
        <member name="M:GraphForms.GraphHelpers.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constrains a given <paramref name="value"/> to be between the 
            given <paramref name="min"/> and <paramref name="max"/> values.
            </summary>
            <param name="value">The value to constrain.</param>
            <param name="min">The minimum allowable value.</param>
            <param name="max">The maximum allowable value.</param>
            <returns><paramref name="min"/> if <paramref name="value"/> is
            less than <paramref name="min"/>, or <paramref name="max"/> if
            <paramref name="value"/> is greater than <paramref name="max"/>, 
            or <paramref name="value"/> in all other cases.</returns>
        </member>
        <member name="M:GraphForms.GraphHelpers.Length(System.Drawing.PointF)">
            <summary>
            Returns the distance between the given <paramref name="point"/>
            and the origin.</summary>
            <param name="point">The vector to calculate the length of.</param>
            <returns>The distance between the given <paramref name="point"/>
            and the origin.</returns>
        </member>
        <member name="M:GraphForms.GraphHelpers.ToAlignedRect(System.Drawing.RectangleF)">
            <summary>
            Returns the smallest possible integer rectangle that
            completely contains the given <paramref name="rect"/>.
            </summary>
            <param name="rect">The rectangle to be aligned.</param>
            <returns>The smallest possible integer rectangle that
            completely contains the given <paramref name="rect"/>.
            </returns>
        </member>
        <member name="M:GraphForms.GraphHelpers.ToAlignedRect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the smallest possible integer rectangle that
            completely contains the given rectangle.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of 
            the rectangle to be aligned.</param>
            <param name="y">The y-coordinate of the upper-left corner of
            the rectangle to be aligned.</param>
            <param name="width">The width of the rectangle to be aligned.
            </param>
            <param name="height">The height of the rectangle to be aligned.
            </param>
            <returns>The smallest possible integer rectangle that
            completely contains the given rectangle.</returns>
        </member>
        <member name="M:GraphForms.GraphHelpers.ToInsetRect(System.Drawing.RectangleF)">
            <summary>
            Returns the largest possible integer rectangle that is
            completely contained within the given <paramref name="rect"/>.
            </summary>
            <param name="rect">The rectangle to be inset.</param>
            <returns>The largest possible integer rectangle that is
            completely contained within the given <paramref name="rect"/>.
            </returns>
        </member>
        <member name="M:GraphForms.GraphHelpers.ToInsetRect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the largest possible integer rectangle that is
            completely contained within the given rectangle.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of 
            the rectangle to be inset.</param>
            <param name="y">The y-coordinate of the upper-left corner of
            the rectangle to be inset.</param>
            <param name="width">The width of the rectangle to be inset.
            </param>
            <param name="height">The height of the rectangle to be inset.
            </param>
            <returns>The largest possible integer rectangle that is
            completely contained within the given rectangle.</returns>
        </member>
        <member name="M:GraphForms.GraphHelpers.ToRoundedRect(System.Drawing.RectangleF)">
            <summary>
            Returns the integer rectangle that results from rounding all four
            corners of the given <paramref name="rect"/> to the nearest 
            integer.</summary>
            <param name="rect">The rectangle to be rounded.</param>
            <returns>the integer rectangle that results from rounding all four
            corners of the given <paramref name="rect"/> to the nearest 
            integer.</returns>
        </member>
        <member name="M:GraphForms.GraphHelpers.ToRoundedRect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the integer rectangle that results from rounding all four
            corners of the given rectangle to the nearest integer.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of
            the rectangle to be rounded.</param>
            <param name="y">The y-coordinate of the upper-left corner of
            the rectangle to be rounded.</param>
            <param name="width">The width of the rectangle to be rounded.
            </param>
            <param name="height">The height of the rectangle to be rounded.
            </param>
            <returns>The integer rectangle that results from rounding all four
            corners of the given rectangle to the nearest integer.</returns>
        </member>
        <member name="M:GraphForms.GraphHelpers.MapRect(System.Drawing.Drawing2D.Matrix,System.Drawing.Rectangle)">
            <summary>
            Uses the given <paramref name="matrix"/> to transform the corners
            of the given <paramref name="rect"/> and then returns the bounding
            box of that quadrilateral polygon. </summary>
            <param name="matrix">The matrix to use to transform the given
            <paramref name="rect"/>.</param>
            <param name="rect">The rectangle to be transformed by the given
            <paramref name="matrix"/>.</param>
            <returns>The bounding box of the resulting <paramref name="matrix"/>
            transformation of the given <paramref name="rect"/>. </returns>
        </member>
        <member name="M:GraphForms.GraphHelpers.MapRect(System.Drawing.Drawing2D.Matrix,System.Drawing.RectangleF)">
            <summary>
            Uses the given <paramref name="matrix"/> to transform the corners
            of the given <paramref name="rect"/> and then returns the bounding
            box of that quadrilateral polygon. </summary>
            <param name="matrix">The matrix to use to transform the given
            <paramref name="rect"/>.</param>
            <param name="rect">The rectangle to be transformed by the given
            <paramref name="matrix"/>.</param>
            <returns>The bounding box of the resulting <paramref name="matrix"/>
            transformation of the given <paramref name="rect"/>. </returns>
        </member>
        <member name="M:GraphForms.GraphHelpers.Center(System.Drawing.RectangleF)">
            <summary>
            Returns the center point of the given <paramref name="rect"/>.
            </summary>
            <param name="rect">The rectangle to find the center of.</param>
            <returns>The center point of the given <paramref name="rect"/>.
            </returns>
        </member>
        <member name="M:GraphForms.GraphHelpers.Center(System.Drawing.Rectangle)">
            <summary>
            Returns the center point of the given <paramref name="rect"/>.
            </summary>
            <param name="rect">The rectangle to find the center of.</param>
            <returns>The center point of the given <paramref name="rect"/>.
            </returns>
        </member>
        <member name="T:GraphForms.Algorithms.Layout.Circular.CircleSpacing">
            <summary>
            Used to specify which method a circular layout algorithm uses to
            calculate the angles between subtrees/leaves/nodes around the
            root of their shared circular tree or the center of their circle.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.Circular.CircleSpacing.Fractal">
            <summary>
            The angles between all subtrees/leaves/nodes are equal and
            based on the number of subtrees/leaves/nodes around their
            shared root/center.</summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.Circular.CircleSpacing.SNS">
            <summary>
            Subtrees of Nonuniform Size. The angles between two 
            subtrees/leaves/nodes around their shared root/center are 
            based on their "sizes" (calculated with their bounding box
            and/or convex hull or shape), which usually results in more 
            compact graphs.</summary>
        </member>
        <member name="T:GraphForms.Algorithms.Layout.LayoutDirection">
            <summary>
            A enumeration of possible directions in which layout
            nodes are arranged by certain layout algorithms.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.LayoutDirection.LeftToRight">
            <summary>
            Arranged from the Left side of the layout 
            algorithm's boundary to its Right side.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.LayoutDirection.TopToBottom">
            <summary>
            Arranged from the Top of the layout
            algorithm's boundary to its Bottom.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.LayoutDirection.RightToLeft">
            <summary>
            Arranged from the Right side of the layout
            algorithm's boundary to its Left side.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.LayoutDirection.BottomToTop">
            <summary>
            Arranged from the Bottom of the layout
            algorithm's boundary to its Top.
            </summary>
        </member>
        <member name="T:GraphForms.GraphPanel">
            <summary><para>
            A simple double-buffered extension of the 
            <see cref="T:System.Windows.Forms.Panel"/> class,
            which also doesn't allow auto-scrolling.
            </para><para>
            This class is mainly meant for rendering and relaying mouse events
            to <see cref="T:GraphForms.GraphElement"/> instances.
            </para></summary>
        </member>
        <member name="M:GraphForms.GraphPanel.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:GraphForms.GraphPanel"/> class.
            </summary>
        </member>
        <member name="P:GraphForms.GraphPanel.AutoScroll">
            <summary>
            Always returns false because this control doesn't allow the user
            to scroll to any controls placed outside of its visible boundaries.
            Technically this container shouldn't contain any other controls.
            </summary>
        </member>
        <member name="P:GraphForms.GraphPanel.Scene">
            <summary>
            The <see cref="T:GraphForms.GraphScene"/> instance that this graph panel is
            attached to for rendering it and relaying mouse events to it.
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.AGraphEdge`1">
            <summary>
            An abstract implementation of the <see cref="T:IGraphEdge`1{Node}"/>
            interface that defines a weighted edge with read-only properties
            linking two <typeparamref name="Node"/> instances in a directional
            graph.</summary>
            <typeparam name="Node"></typeparam>
        </member>
        <member name="M:GraphForms.Algorithms.AGraphEdge`1.#ctor(`0,`0)">
            <summary>
            Initializes a new <see cref="T:AGraphEdge`1{Node}"/> instance with the
            given source and destination nodes and a <see cref="P:GraphForms.Algorithms.AGraphEdge`1.Weight"/> of 1.
            </summary>
            <param name="srcNode">The source node of this edge.</param>
            <param name="dstNode">The destination node of this edge.</param>
        </member>
        <member name="M:GraphForms.Algorithms.AGraphEdge`1.#ctor(`0,`0,System.Single)">
            <summary>
            Initializes a new <see cref="T:AGraphEdge`1{Node}"/> instance with the
            given source and destination nodes and the given weight.
            </summary>
            <param name="srcNode">The source node of this edge.</param>
            <param name="dstNode">The destination node of this edge.</param>
            <param name="weight">The proportionality of this edge's
            theoretical length to that of other edges.</param>
        </member>
        <member name="M:GraphForms.Algorithms.AGraphEdge`1.SetSrcNode(`0)">
            <summary>
            Sets the Source Node (Parent of Connection).
            </summary>
            <param name="srcNode">New source node and
            parent of this connection.</param>
        </member>
        <member name="M:GraphForms.Algorithms.AGraphEdge`1.SetDstNode(`0)">
            <summary>
            Sets the Destination Node (Child of Connection).
            </summary>
            <param name="dstNode">New destination node and
            child of this connection.</param>
        </member>
        <member name="P:GraphForms.Algorithms.AGraphEdge`1.SrcNode">
            <summary>
            Source Node; Parent of Connection
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.AGraphEdge`1.DstNode">
            <summary>
            Destination Node; Child of Connection
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.AGraphEdge`1.Weight">
            <summary>
            Proportionality to other edges; 
            Ideal length of graphical edge
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.Layout.IClusterNode">
            <summary>
            This interface represents a special type of node used by layout
            algorithms to define a node in a graph superstructure that encloses
            a sub-graph.  Its main functions are to help augment the positions
            of layout nodes and determine the positions of port nodes in its
            sub-graph.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.IClusterNode.LearnNodePosition(System.Single,System.Single,GraphForms.Box2F)">
            <summary>
            Processes a potential new position of a layout node in the
            coordinate system of cluster node's sub-graph and possibly 
            reacts to it.</summary>
            <param name="x">The X-coordinate of a potential new position of
            the layout node in the coordinate system of this cluster node's
            sub-graph.</param>
            <param name="y">The Y-coordinate of a potential new position of
            the layout node in the coordinate system of this cluster node's 
            sub-graph.</param>
            <param name="boundingBox">The bounding box of the layout node in
            its own local coordinate system.</param><remarks>
            This is where the cluster node could adjust its own shape or
            bounding box to fit the node's position, or calculate a global
            offset vector for normalizing the potential new position of each
            layout node with its <see cref="!:AugmentNodePos(float,float)"/>
            implementation.</remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.IClusterNode.AdjustNodePosition(System.Single,System.Single,GraphForms.Box2F)">
            <summary>
            Processes a potential new position of a layout node in the
            coordinate system of this cluster node's sub-graph and
            returns it, possibly modified to fit constraints.</summary>
            <param name="x">The X-coordinate of a potential new position of
            a layout node in this cluster node's sub-graph.</param>
            <param name="y">The Y-coordinate of a potential new position of
            a layout node in this cluster node's sub-graph.</param>
            <param name="boundingBox">The bounding box of the layout node in
            its own local coordinate system.</param>
            <returns>A point in this node's local coordinate system that
            will be the new position of a layout node, modified to fit any
            constraints of this cluster node, such as fitting within its
            shape.</returns><remarks>
            This is not only where the cluster node can adjust a node's 
            position to fit within its shape, but also where it can adjust 
            its own shape to fit the node's position and return the position
            unmodified.</remarks>
        </member>
        <member name="T:GraphForms.Algorithms.Layout.Tree.TreeRootFinding">
            <summary>
            Used to specify which method a tree-based layout algorithm uses to 
            choose the root node from which all subtrees branch off.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.Tree.TreeRootFinding.UserDefined">
            <summary>
            Chooses a root based on the values set with
            <see cref="M:AGraphAlgorithm`2{Node,Edge}.AddRoot(Node)"/>.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.Tree.TreeRootFinding.SourceDirected">
            <summary>
            Chooses a root with no incoming edges, only outgoing ones.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.Tree.TreeRootFinding.SinkDirected">
            <summary>
            Chooses a root with no outgoing edges, only incoming ones.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.Tree.TreeRootFinding.Center">
            <summary>
            Chooses a root such that the depth of the tree is minimized.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.Tree.TreeRootFinding.PathCenter">
            <summary>
            Chooses a root that has the most undirected paths from one
            node to another going through it (the true tree root).
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.AngleAt(System.Int32)">
            <summary>
            Gets the calculated angle around the center of the embedding
            circle for the node at the given <paramref name="nodeIndex"/> 
            in the graph of this layout algorithm, measured in radians 
            counterclockwise from the +X-axis.</summary>
            <param name="nodeIndex">The index of the node in the graph
            of this layout algorithm.</param>
            <returns>The angle around the center of the embedding circle
            for the node at the given <paramref name="nodeIndex"/> in the
            graph of this layout algorithm, measured in radians
            counterclockwise from the +X-axis.</returns>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.NodeSpacing">
            <summary>
            Gets or sets the method this algorithm uses to calculate the
            angles between nodes around the center of the embedding circle.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.Centering">
            <summary>
            Gets or sets the method this algorithm uses to calculate the 
            initial position of the center of its embedding circle.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.CenterX">
            <summary>
            Gets or sets the X-coordinate of the center of the embedding
            circle (in the local coordinate system of the graph), which is
            only used if <see cref="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.Centering"/> is set to
            <see cref="F:GraphForms.Algorithms.Layout.Circular.CircleCentering.Predefined"/>.</summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.CenterY">
            <summary>
            Gets or sets the Y-coordinate of the center of the embedding
            circle (in the local coordinate system of the graph), which is
            only used if <see cref="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.Centering"/> is set to
            <see cref="F:GraphForms.Algorithms.Layout.Circular.CircleCentering.Predefined"/>.</summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.MinRadius">
            <summary>
            Gets or sets the minimum radius of the embedding circle
            calculated by this layout algorithm.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.FreeArc">
            <summary>
            Gets or sets the minimum distance between nodes on the 
            embedding circle as measured along the arc between them
            on the embedding circle.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.AdjustCenter">
            <summary>
            Gets or sets whether the center of the embedding circle is
            first repositioned to attempt to set the radii and angle
            of any fixed nodes on the embedding circle equal to those
            calculated for the embedding circle.</summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.Angle">
            <summary>
            Gets or sets the angle which the nodes of the graph are rotated
            around the center of the embedding circle, measured in radians
            counterclockwise from the +X-axis.
            </summary><remarks>
            Since this angle is measured clockwise from the +X-axis on a
            standard drawing surface (because the Y-axis is negated),
            the final graph will appear as if it has been rotated by the
            negation of this angle on a conventional 2D Euclidean manifold. 
            </remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.DegAngle">
            <summary>
            Gets or sets the <see cref="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.Angle"/> parameter of this layout
            algorithm in degrees instead of radians for debugging.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.Radius">
            <summary>
            Gets the current radius of the embedding circle of this layout
            algorithm, as calculated based on the values of
            <see cref="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.NodeSpacing"/>, <see cref="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.MinRadius"/>, and
            <see cref="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.FreeArc"/>.</summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.BoundingRadius">
            <summary>
            Gets the current radius of the smallest circle concentric with
            the embedding circle of this layout algorithm that can enclose
            all the nodes in the graph processed by this layout algorithm.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.Angles">
            <summary>
            Gets the calculated angles of the nodes of the graph of this
            layout algorithm around the center of its embedding circle, 
            measured in radians counterclockwise from the +X-axis, in the
            same order as their corresponding nodes are stored in the graph.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.CalcCenterX">
            <summary>
            Gets or sets the current X-coordinate of the center of the
            embedding circle of this layout algorithm, as calculated during 
            the last iteration based on the <see cref="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.Centering"/>,
            <see cref="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.CenterX"/>, <see cref="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.CenterY"/>, 
            <see cref="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.AdjustCenter"/>, and <see cref="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.AdjustAngle"/>
            parameters.</summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.CalcCenterY">
            <summary>
            Gets or sets the current Y-coordinate of the center of the
            embedding circle of this layout algorithm, as calculated during 
            the last iteration based on the <see cref="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.Centering"/>,
            <see cref="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.CenterX"/>, <see cref="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.CenterY"/>, 
            <see cref="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.AdjustCenter"/>, and <see cref="P:GraphForms.Algorithms.Layout.Circular.FDSingleCircleLayoutAlgorithm`2.AdjustAngle"/>
            parameters.</summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.NodeSpacing">
            <summary>
            Gets or sets the method this algorithm uses to calculate the
            angles between nodes around the center of the embedding circle.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.MinRadius">
            <summary>
            Gets or sets the minimum radius of the embedding circle
            calculated by this layout algorithm.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.FreeArc">
            <summary>
            Gets or sets the minimum distance between nodes on the 
            embedding circle as measured along the arc between them
            on the embedding circle.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.SpanningTreeGeneration">
            <summary>
            Gets or sets the method this algorithm uses to build its internal
            sparsely connected spanning tree for traversing its graph.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.RootFindingMethod">
            <summary>
            Gets or sets the method this algorithm uses to choose the root
            node from which all subtrees branch off and orbit around.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.InSketchMode">
            <summary>
            Gets or sets whether this balloon tree layout algorithm is in
            "sketch mode", in which it arranges subtree/leaf nodes around
            their respective root nodes based on their original positions
            relative to their roots (in other words, from the original
            "sketch" of the graph before this layout algorithm was applied
            to it).</summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.BranchSpacing">
            <summary>
            Gets or sets the method this algorithm uses to calculate the
            angles between subtrees/leaves around their root.
            </summary><remarks>
            If set to <see cref="F:GraphForms.Algorithms.Layout.Circular.CircleSpacing.SNS"/>, the angle computation 
            will use the subtree's/leaf's bounding wedge defined by its 
            <see cref="P:CircleTree`2.UpperWedge"/> and 
            <see cref="P:CircleTree`2.LowerWedge"/> properties
            calculated by <see cref="M:CircleTree`2.CalculateAngles()"/>.
            </remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.RootCentering">
            <summary>
            Gets or sets the method that this algorithm uses to calculate
            the initial position of the root of the entire balloon tree.
            </summary><remarks>
            Be aware that if the position of the root node of the entire 
            balloon tree is fixed,
            this value is irrelevant (or basically equivalent to 
            <see cref="F:GraphForms.Algorithms.Layout.Circular.CircleCentering.Predefined"/>, even if it isn't
            set to that value).</remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.MinimumEdgeLength">
            <summary>
            Gets or sets the minimum length of an edge connecting a
            subtree/leaf node to its root node.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.EqualizeBranchLengths">
            <summary>
            Gets or sets whether the lengths of distances between a set of
            subtree/leaf nodes and their shared root node are equalized or
            minimized.</summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.MaximumRootWedge">
            <summary><para>
            Gets or sets the maximum allowable wedge in radians that the set
            of subtree/leaf nodes are allowed to occupy around the root node
            of the entire balloon tree.</para><para>
            Be aware that this angle will be normalized to the range [0,2π] 
            ( [0°,360°] ) when used.</para></summary><remarks>
            If the sum the bounding wedges of the set of subtree/leaf nodes
            exceeds this wedge, their <see cref="P:CircleTree`2.Distance"/>s
            are increased until all their bounding wedges can fit within it.
            Then their <see cref="P:CircleTree`2.Angle"/>s are set in the
            range <c>(-wedge / 2, wedge / 2)</c>, measured counterclockwise
            from the +X-axis of their shared root's local coordinate system.
            </remarks><seealso cref="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.MaximumTreeWedge"/>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.MaximumTreeWedge">
            <summary><para>
            Gets or sets the maximum allowable wedge in radians that a set
            of subtree/leaf nodes are allowed to occupy around their 
            shared root node.</para><para>
            Be aware that this angle will be normalized to the range [0,2π] 
            ( [0°,360°] ) when used.</para></summary><remarks>
            If the sum the bounding wedges of the set of subtree/leaf nodes
            exceeds this wedge, their <see cref="P:CircleTree`2.Distance"/>s
            are increased until all their bounding wedges can fit within it.
            Then their <see cref="P:CircleTree`2.Angle"/>s are set in the
            range <c>(-wedge / 2, wedge / 2)</c>, measured counterclockwise
            from the +X-axis of their shared root's local coordinate system.
            </remarks><seealso cref="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.MaximumRootWedge"/>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.AdjustRootCenters">
            <summary>
            Gets or sets whether the roots of any leaf/subtree nodes with
            fixed positions are first repositioned to attempt to set the
            local polar coordinate positions of their fixed branches equal
            to those calculated for the balloon tree.</summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.RootAngle">
            <summary>
            Gets or sets the angle which the entire balloon tree is rotated
            around the center of its root node, measured in radians
            counterclockwise from the +X-axis.
            </summary><remarks>
            Since this angle is measured clockwise from the +X-axis on a
            standard drawing surface (because the Y-axis is negated),
            the final graph will appear as if it has been rotated by the
            negation of this angle on a conventional 2D Euclidean manifold. 
            </remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.DegMaxRootWedge">
            <summary>
            Gets or sets the <see cref="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.MaximumRootWedge"/> parameter of this
            layout algorithm in degrees instead of radians for debugging.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.DegMaxTreeWedge">
            <summary>
            Gets or sets the <see cref="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.MaximumTreeWedge"/> parameter of this
            layout algorithm in degrees instead of radians for debugging.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.DegMaxDeviationAngle">
            <summary>
            Gets or sets the <see cref="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.MaximumDeviationAngle"/> parameter
            of this layout algorithm in degrees instead of radians for 
            debugging.</summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.DegRootAngle">
            <summary>
            Gets or sets the <see cref="P:GraphForms.Algorithms.Layout.Circular.BalloonCirclesLayoutAlgorithm`2.RootAngle"/> parameter of this
            layout algorithm in degrees instead of radians for debugging.
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.SpanningTree.DFSpanningTree`2">
            <summary>
            This algorithm uses a simple depth first traversal of a given graph
            to generate a spanning tree.</summary>
            <typeparam name="Node">The type of vertices in the spanning tree 
            generated by this algorithm.</typeparam>
            <typeparam name="Edge">The type of edges in the spanning tree 
            generated by this algorithm.</typeparam>
        </member>
        <member name="M:GraphForms.Algorithms.SpanningTree.DFSpanningTree`2.OnTreeEdge(GraphForms.Algorithms.Digraph{`0,`1}.GEdge,System.Boolean,System.UInt32)">
            <summary>
            Called whenever the algorithm explores an edge in the graph
            connected to an unexplored node, that edge is then added to the
            spanning tree.
            </summary>
            <param name="e">The edge being explored by this graph traversal 
            algorithm.</param>
            <param name="reversed">True if the edge is being explored from 
            destination to source instead of from source to destination.
            </param>
        </member>
        <member name="P:GraphForms.Algorithms.SpanningTree.DFSpanningTree`2.SpanningTree">
            <summary>
            A sub-graph of the original connected graph that connects all
            its vertices together with a minimal subset of its edges.
            </summary><remarks>
            If the original graph isn't connected, this graph will contain
            multiple spanning trees, one for each (weakly) connected
            component of the original graph.
            </remarks>
        </member>
        <member name="T:GraphForms.Algorithms.Collections.HeapDirection">
            <summary>
            Specifies the order in which a prioritized queue will serve items.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Collections.HeapDirection.Increasing">
            <summary>
            Items are served in Increasing order from least to greatest
            or lowest priority to highest priority.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Collections.HeapDirection.Decreasing">
            <summary>
            Items are served in Decreasing order, from greatest to least
            or highest priority to lowest priority.
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.ISpecialNode">
            <summary>
            This simple flagging interface is used to distinguish nodes
            that implement it from other nodes in a graph, 
            usually when that graph is being processed by an algorithm.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.SpanningTree.PrimMinSpanningTree`2.SpanningTree">
            <summary>
            A sub-graph of the original connected graph that connects all
            its vertices together with a minimal subset of its edges.
            </summary><remarks>
            If the original graph isn't connected, this graph will contain
            multiple spanning trees, one for each weakly connected
            component of the original graph.
            </remarks>
        </member>
        <member name="T:GraphForms.Algorithms.Search.SearchMethod">
            <summary>
            Enumeration of the major methods of traversing the nodes and edges
            in a <see cref="T:Digraph`2{Node,Edge}"/> for searching or
            other data processing.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Search.SearchMethod.BFS">
            <summary>
            Traverse the graph breadth first.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Search.SearchMethod.DFS">
            <summary>
            Traverse the graph depth first.
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.Layout.IPortNode">
            <summary><para>
            This interface represents a special type of virtual node used by
            layout algorithms to convey positioning information between
            sub-graphs and their higher graph superstructure.
            </para><para>
            Beware that some layout algorithms will treat this port nodes
            differently than they treat <see cref="T:GraphForms.Algorithms.Layout.ILayoutNode"/> nodes.
            </para></summary>
            <remarks><para>
            Instances of classes implementing this interface are typically
            created when a graph is divided into sub-graphs enclosed within
            "cluster" nodes in the graph superstructure.
            </para><para>
            Port nodes essentially represent a node that is outside its sub-graph
            and connected to one or more nodes in its sub-graph, which could be
            either a node in another sub-graph or a "cluster" node enclosing
            another sub-graph in the graph superstructure.
            </para></remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.IPortNode.ClusterId">
            <summary>
            The unique identifier for the node in the graph superstructure
            that this port node represents, or which contains the node
            that this port node represents.
            </summary>
            <remarks>
            This identifier is used by some layout algorithms to make sure
            that port nodes affiliated with the same cluster node and edge
            in the graph superstructure are kept close together in their
            sub-graph instead of possibly ending up on opposite sides of it.
            </remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.IPortNode.MinAngle">
            <summary>
            The minimum allowable angle of the position of this port node
            around the center of the bounding box of the cluster node
            that encloses the sub-graph of this port node.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.IPortNode.MaxAngle">
            <summary>
            The maximum allowable angle of the position of this port node
            around the center of the bounding box of the cluster node
            that encloses the sub-graph of this port node.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.Circular.CircularLayoutAlgorithm`2.BCCNode.Index">
            <summary>
            The index of this cluster node in graph superstructure
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.Circular.CircularLayoutAlgorithm`2.BCCNode.Subgraph">
            <summary>
            The sub-graph enclosed by this cluster node.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.Circular.CircularLayoutAlgorithm`2.BCCNode.PortNodes">
            <summary>
            Each sub-graph could potentially contain a port node that
            represents any node not in the sub-graph.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.CircularLayoutAlgorithm`2.BCCEdge.SrcPorts">
            <summary>
            Ports in the source cluster node's sub-graph that point
            to the destination cluster node or nodes
            in the destination cluster node's sub-graph.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.Circular.CircularLayoutAlgorithm`2.BCCEdge.DstPorts">
            <summary>
            Ports in the destination cluster node's sub-graph that point
            to the source cluster node or nodes
            in the source cluster node's sub-graph.
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.Collections.FibonacciNode`2">
            <summary>
            This data structure represents a single element in a Fibonacci Heap,
            an efficient implementation of a priority queue. It stores a value 
            along with a "priority" that determines the order in which it is 
            removed from its heap relative to other elements in its heap. 
            </summary>
            <typeparam name="P">A comparable type used to represent the 
            "priorities" of elements which determine the order in which they
            are removed from their Fibonacci Heap.</typeparam>
            <typeparam name="V">A type used to represent the values stored in
            each element in a Fibonacci Heap.</typeparam>
            <remarks>
            For more information on Fibonacci Heaps, see the Wikipedia article:
            http://en.wikipedia.org/wiki/Fibonacci_heap
            </remarks>
        </member>
        <member name="F:GraphForms.Algorithms.Collections.FibonacciNode`2.Marked">
            <summary>
            Determines if this node has had a child cut from it before.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Collections.FibonacciNode`2.Removed">
            <summary>
            Determines if this node has been removed from the heap.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Collections.FibonacciNode`2.Deg">
            <summary>
            Determines the depth/degree of this node.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.FibonacciNode`2.Priority">
            <summary>
            The "priority" of this element, which determines the order in
            which it is removed from its Fibonacci Heap in relation to
            other elements in its Fibonacci Heap.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.FibonacciNode`2.Value">
            <summary>
            Gets the value stored in this element.
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap">
            <summary>
            A Fibonacci Heap data structure that consists of a collection of
            trees. It is an efficient implementation of a priority queue,
            which is like a regular queue, but each element also has a
            "priority" associated with it, and these "priorities" are used
            to determine the order in which the elements are removed.
            </summary><remarks>
            For more information on Fibonacci Heaps, see the Wikipedia 
            article: http://en.wikipedia.org/wiki/Fibonacci_heap
            </remarks>
        </member>
        <member name="F:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.mMult">
            <summary>
            Used to control the direction of the heap.
            Set to 1 if the Heap is increasing, -1 if it's decreasing.
            We use the approach to avoid unneccesary branches.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.#ctor">
            <summary>
            Initializes an empty Fibonacci Heap in which its elements 
            will be prioritized in increasing order using the default
            comparer for the priority type <typeparamref name="P"/>.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.#ctor(GraphForms.Algorithms.Collections.HeapDirection)">
            <summary>
            Initializes an empty Fibonacci Heap in which its elements 
            will be prioritized in the given <paramref name="order"/> 
            using the default comparer for the priority type 
            <typeparamref name="P"/>.
            </summary>
            <param name="order">The order in which elements are
            removed based on the comparison of their "priorities".
            </param>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.#ctor(GraphForms.Algorithms.Collections.HeapDirection,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes an empty Fibonacci Heap in which its elements 
            will be prioritized in the given <paramref name="order"/> 
            using the given <paramref name="comparer"/> for the 
            priority type <typeparamref name="P"/>.
            </summary>
            <param name="order">The order in which elements are
            removed based on the comparison of their "priorities".
            </param>
            <param name="comparer">The comparer used to prioritize
            elements by determining the relation between the 
            "priorities" of different elements.</param>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.EnsureDegreeNodeStorage(System.Int32)">
            <summary>
            Ensures that the internal degree to node array can store
            a node reference at the given degree by resizing it if 
            necessary.</summary>
            <param name="degree">The degree of the node reference to be
            stored in the internal degree to node array.</param>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.ReduceNodes(GraphForms.Algorithms.Collections.FibonacciNode{`0,`1},GraphForms.Algorithms.Collections.FibonacciNode{`0,`1})">
            <summary>
            Given two nodes, 
            adds the child node as a child of the parent node.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="childNode">The child node.</param>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.UpdateNext">
            <summary>
            Updates the Next pointer, maintaining the heap
            by folding duplicate heap degrees into each other.
            Takes O(log(N)) time amortized.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.UpdateNodesDegree(GraphForms.Algorithms.Collections.FibonacciNode{`0,`1})">
            <summary>
            Updates the degree of a node, cascading to update the degree 
            of its ancestors if neccesary.
            </summary>
            <param name="parentNode">The node that will have its degree
            updated (as well as its ancestors if necessary).</param>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enqueue(`0,`1)">
            <summary>
            Adds a new element to this Fibonacci Heap, which stores the
            given <paramref name="value"/> with the given
            <paramref name="priority"/>, which is used to determine its
            ordering relative to other elements already in this heap.
            </summary>
            <param name="priority">The "priority" of the element, which
            determines its order in this Fibonacci Heap.</param>
            <param name="value">The value stored in the element.</param>
            <returns>A <see cref="T:FibonacciNode`2"/> instance that
            represents the new element added to this Fibonacci Heap.
            </returns><remarks>
            This operation is done in <c>O(1)</c> time, and it is also
            fast as well because it does not do any book keeping or
            maintenance of the heap. It just adds the new element to 
            the end of the list of heaps, updating <see cref="P:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Top"/>
            if necessary (if the new element has the highest/lowest
            <see cref="P:FibonacciNode`2.Priority"/> of all the
            elements in this Fibonacci Heap).
            </remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Peek">
            <summary>
            Returns the next element to be removed from this Fibonacci
            Heap without removing it, which is the element with the 
            highest (or lowest, depending on the <see cref="P:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Order"/>)
            <see cref="P:FibonacciNode`2.Priority"/> out of all the
            elements in this Fibonacci Heap.
            </summary><returns>
            The next element to be removed from this Fibonacci Heap, 
            which is the element with the highest/lowest "priority".
            </returns><remarks>
            This operation is done in <c>O(1)</c> time because all
            Fibonacci Heaps maintain a pointer to the next element 
            to be removed.
            </remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Dequeue">
            <summary>
            Removes the element currently at the front of this Fibonacci 
            Heap, which is element with the highest (or lowest, depending
            on the <see cref="P:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Order"/>) "priority".
            </summary><returns>
            The element that was just removed from this Fibonacci Heap,
            which was the element with the highest/lowest "priority".
            </returns><remarks><para>
            This operation is done in <c>O(log n)</c> amortized time,
            because it operates in three phases, first removing the
            <see cref="P:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Top"/> element and making its children the roots
            of new trees in the internal tree list of this Fibonacci
            Heap, which is done in <c>O(log n)</c> amortized time. 
            </para><para>
            In the second phase, the internal tree list is compressed by
            successively linking together roots of the same degree, which
            is done in <c>O(log n)</c> amortized time. 
            </para><para>
            In the final phase, the new <see cref="P:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Top"/> element is
            located among the remaining roots, which is done in 
            <c>O(log n)</c> time, since that's the maximum number of 
            remaining roots at the end of the second phase.
            </para></remarks><seealso cref="M:Delete(FibonacciNode`2)"/>
            <exception cref="T:System.InvalidOperationException">This Fibonacci
            Heap is empty and has no elements to remove.</exception>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Delete(GraphForms.Algorithms.Collections.FibonacciNode{`0,`1})">
            <summary>
            Removes the given <paramref name="node"/> from this Fibonacci
            Heap if it hasn't already been removed.
            </summary>
            <param name="node">The <see cref="T:FibonacciNode`2"/> 
            instance to be removed from this Fibonacci Heap.</param>
            <remarks>
            This operation is done in <c>O(log n)</c> amortized time,
            since it is basically a combination of the 
            <see cref="M:ChangePriority(FibonacciNode`2,P)"/> and 
            <see cref="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Dequeue"/> operations. The priority of the given
            <paramref name="node"/> is first set so that it becomes the
            new <see cref="P:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Top"/> element, which takes <c>O(1)</c>
            amortized time, and then it is removed from this Fibonacci
            Heap, which takes <c>O(log n)</c> amortized time.
            </remarks><seealso cref="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Dequeue"/>
            <seealso cref="M:ChangePriority(FibonacciNode`2,P)"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <c>null</c>.</exception>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.ChangePriority(GraphForms.Algorithms.Collections.FibonacciNode{`0,`1},`0)">
            <summary>
            Sets the <see cref="P:FibonacciNode`2.Priority"/> of the
            given <paramref name="node"/> to the given 
            <paramref name="priority"/>, which will affect the order in
            which affect the order in which <paramref name="node"/> is
            removed from this heap if it hasn't already been removed.
            </summary>
            <param name="node">The <see cref="T:FibonacciNode`2"/>
            instance that will have its priority changed.</param>
            <param name="priority">The new priority for the given
            <paramref name="node"/>.</param><remarks>
            This operation is done in <c>O(1)</c> amortized time,
            since the new <paramref name="priority"/> for the given
            <paramref name="node"/> could violate the heap property
            by being out of order with the priority of the parent of
            <paramref name="node"/>, which means that the operation
            could take longer by having to alter the internal tree list
            of this Fibonacci Heap.</remarks>
            <seealso cref="M:Delete(FibonacciNode`2)"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <c>null</c>.</exception>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Merge(GraphForms.Algorithms.Collections.FibonacciNode{`0,`1}.Heap)">
            <summary>
            Merges this Fibonacci Heap with the <paramref name="other"/>
            Fibonacci Heap by concatenating the elements of the other
            heap with the elements of this Fibonacci Heap.
            </summary>
            <param name="other">The Fibonacci Heap to merge with this
            heap.</param>
            <remarks>
            This operation is done in <c>O(1)</c> time because all it
            does is concatenate the internal list of trees in the
            <paramref name="other"/> Fibonacci Heap with the internal
            list of trees in this Fibonacci Heap, which is a quick
            operation since they are doubly linked lists.
            </remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.ToArray">
            <summary>
            Copies the elements of this Fibonacci Heap to an array in the
            order in which they are to be removed (basically sorted by
            their priorities) without removing them from this Fibonacci
            Heap.</summary><returns>
            An array of the elements in this Fibonacci Heap, sorted by
            the order in which they are to be removed from this Fibonacci
            Heap.</returns><remarks>
            Be aware that this function works by creating a "clone" of
            this Fibonacci Heap that takes up as much memory as it does,
            and then repeatedly removing elements from that "clone" and
            adding them to the returned array, so this function is both
            processor and memory intensive.
            </remarks><seealso cref="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.DestroyToArray(System.Boolean)"/>
            <seealso cref="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.ToUnsortedArray"/>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.DestroyToArray(System.Boolean)">
            <summary>
            Copies the elements of this Fibonacci Heap to an array in the
            order in which they are to be removed (basically sorted by
            their priorities) by repeatedly removing them from this 
            Fibonacci Heap until it is empty.</summary>
            <param name="restore">If true, this function re-adds every
            element it removed from this Fibonacci Heap to create the
            returned array.</param><returns>
            An array of the elements in this Fibonacci Heap, sorted by
            the order in which they were removed from this Fibonacci
            Heap.</returns><remarks>
            Be aware that this function works by repeatedly removing
            elements from this Fibonacci Heap until it is empty and then
            adding them to the returned array, which basically "destroys"
            this Fibonacci Heap in the process.</remarks>
            <seealso cref="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.ToArray"/>
            <seealso cref="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.ToUnsortedArray"/>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.ToUnsortedArray">
            <summary>
            Copies the elements of this Fibonacci Heap to an array in the
            order in which they are stored in its internal list of trees,
            which might not be the order in which they are to be removed.
            </summary><returns>
            An unsorted array of the elements in this Fibonacci Heap.
            </returns><remarks><para>
            This is a quick and clean function for creating an array of
            all the elements of this Fibonacci Heap without altering it. 
            This function is much less processor and memory intensive 
            than both <see cref="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.DestroyToArray(System.Boolean)"/> and 
            <see cref="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.ToArray"/>. </para><para>
            The only catch is that the elements in the returned array 
            might not be in the order in which they would be removed 
            from this heap. However, that could be easily fixed by just 
            sorting the elements of the returned array by their keys 
            using this heap's <see cref="P:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.PriorityComparer"/> and then 
            reversing it if this heap's <see cref="P:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Order"/> is 
            <see cref="F:GraphForms.Algorithms.Collections.HeapDirection.Decreasing"/> instead of
            <see cref="F:GraphForms.Algorithms.Collections.HeapDirection.Increasing"/>.</para></remarks>
            <seealso cref="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.ToArray"/>
            <seealso cref="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.DestroyToArray(System.Boolean)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.GetEnumerator">
            <summary>
            Creates a new "non-destructive" <see cref="T:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enumerator"/>
            instance which enumerates the elements of this Fibonacci
            Heap without removing them.
            </summary><returns>
            A new <see cref="T:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enumerator"/> that enumerates the  
            elements of this Fibonacci Heap without altering it.
            </returns><remarks>
            Be aware that the <see cref="T:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enumerator"/> returned by this
            function operates by removing elements from a "clone" of this
            Fibonacci Heap in order to keep it unaltered. This "clone"
            takes up as much memory as this Fibonacci Heap, and the act
            of creating it takes additional processing time.</remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.GetDestructiveEnumerator">
            <summary>
            Creates a new "destructive" <see cref="T:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enumerator"/>
            instance which enumerates the elements of this Fibonacci
            Heap by repeatedly removing them.
            </summary><returns>
            A new <see cref="T:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enumerator"/> that enumerates the 
            elements of this Fibonacci Heap by emptying it.
            </returns><remarks>
            Be aware the the <see cref="T:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enumerator"/> returned by this
            function operates by repeatedly removing elements from this
            Fibonacci Heap until it is empty, which makes it a one use 
            only enumerator that basically "destroys" this Fibonacci 
            Heap.</remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.DrawHeap">
            <summary>
            Creates a string that is a visualization (when printed in a 
            monospaced font, such as Courier New) of the internal list 
            of trees of elements in this Fibonacci Heap, with each node
            represented by its <see cref="P:FibonacciNode`2.Priority"/>
            in string form, and followed by an asterisk if the node has
            had a child cut from it before.
            </summary><returns>
            A string that is a visualization (when monospaced) of the
            internal tree list data structure of this Fibonacci Heap.
            </returns>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Order">
            <summary>
            The order in which elements are removed from this 
            Fibonacci Heap based on the comparison of their 
            <see cref="P:FibonacciNode`2.Priority"/> values.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.PriorityComparer">
            <summary>
            The comparer used to prioritize the elements in
            this Fibonacci Heap by determining whether the 
            <see cref="P:FibonacciNode`2.Priority"/> of one 
            element is higher than, lower than, or equal to 
            that of another element.</summary>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.IsEmpty">
            <summary>
            Whether this Fibonacci Heap is currently empty and does not 
            contain any elements.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Top">
            <summary>
            Gets the node currently at the front of this Fibonacci Heap,
            which is node with the highest (or lowest, depending on the
            <see cref="P:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Order"/>) "priority" and the next node to be
            removed from this Fibonacci Heap.
            </summary><remarks>
            Retrieving the value of this property is basically the same
            as using the <see cref="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Peek"/> function.</remarks>
            <seealso cref="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Peek"/><seealso cref="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Dequeue"/>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Count">
            <summary>
            Gets the number of elements currently stored in this 
            Fibonacci Heap.
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap"/>.
            </summary><remarks>
            Be aware that this enumerator works by repeatedly removing 
            elements via the <see cref="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Dequeue"/> function on either 
            the <see cref="T:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap"/> instance that created it or a "clone"
            of that heap instance, which can make it both processor and
            memory intensive.
            </remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enumerator.Create(GraphForms.Algorithms.Collections.FibonacciNode{`0,`1}.Heap)">
            <summary>
            Creates a new "non-destructive" <see cref="T:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enumerator"/>
            instance which enumerates the elements of the given
            <paramref name="heap"/> without removing them.
            </summary>
            <param name="heap">The Fibonacci Heap that will be
            enumerated by the returned <see cref="T:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enumerator"/>
            instance.</param><returns>
            A new <see cref="T:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enumerator"/> that enumerates the 
            elements of <paramref name="heap"/> without altering it.
            </returns><remarks>
            Be aware that the <see cref="T:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enumerator"/> returned by
            this function operates by removing elements from a
            "clone" of the given <paramref name="heap"/> in order
            to keep the original Fibonacci Heap unaltered. This
            "clone" takes up as much memory as the original heap,
            and the act of creating it takes additional processing
            time.</remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enumerator.CreateDestructive(GraphForms.Algorithms.Collections.FibonacciNode{`0,`1}.Heap)">
            <summary>
            Creates a new "destructive" <see cref="T:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enumerator"/>
            instance which enumerates the elements of the given
            <paramref name="heap"/> by repeatedly removing them.
            </summary>
            <param name="heap">The Fibonacci Heap that will be
            enumerated by the returned <see cref="T:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enumerator"/>
            instance.</param><returns>
            A new <see cref="T:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enumerator"/> that enumerates the 
            elements of <paramref name="heap"/> by emptying it.
            </returns><remarks>
            Be aware the the <see cref="T:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enumerator"/> returned by
            this function operates by repeatedly removing elements
            from the given <paramref name="heap"/> until it is
            empty, which makes it a one use only enumerator that
            basically "destroys" the original heap.
            </remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enumerator.Dispose">
            <summary>
            Releases all resources used by this enumerator, which
            includes removing any remaining elements from the
            internal
            </summary><remarks>
            If this enumerator is non-destructive, this empties the
            internal clone of the <see cref="T:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap"/> that created it.
            </remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element in the 
            <see cref="T:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap"/> that created it.
            </summary>
            <returns>The next element in the <see cref="T:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap"/>
            that created this enumerator.</returns>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enumerator.Current">
            <summary>
            Gets the element at the current position of this
            enumerator.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enumerator.Priority">
            <summary>
            Gets the <see cref="P:FibonacciNode`2.Priority"/> of the
            element at the current position of this enumerator.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.FibonacciNode`2.Heap.Enumerator.Value">
            <summary>
            Gets the <see cref="P:FibonacciNode`2.Value"/> of the
            element at the current position of this enumerator.
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.ComputeState">
            <summary>
            Describes the state of the computation of an algorithm, 
            primarily <see cref="T:GraphForms.Algorithms.IAlgorithm"/> 
            and classes that implement it. </summary>
        </member>
        <member name="F:GraphForms.Algorithms.ComputeState.None">
            <summary>
            Algorithm has not yet started its computation.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.ComputeState.Running">
            <summary>
            Algorithm has been started and is currently computing.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.ComputeState.Aborting">
            <summary>
            Algorithm is about to abort its computation.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.ComputeState.Finished">
            <summary>
            Algorithm has successfully finished its computation.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.ComputeState.Aborted">
            <summary>
            Algorithm was aborted before finishing its computation.
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.Layout.ForceDirected.FRBoundedLayoutAlgorithm`2">
            <summary>
            Bounded version of the Fruchterman-Reingold Force-Directed Algorithm,
            which calculates its ideal edge length and initial temperature based 
            on the size of its bounding box.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ForceDirected.FRBoundedLayoutAlgorithm`2.K">
            <summary>
            Ideal edge length, which equals 
            <code>Sqrt(height * width / nodeCount)</code>.
            </summary><remarks>
            <c>nodeCount</c> is the number of nodes in the graph of the 
            algorithm using these parameters.
            </remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ForceDirected.FRBoundedLayoutAlgorithm`2.InitialTemperature">
            <summary>
            Gets the initial temperature of the mass, which equals 
            <code>Min(width, height) / 10</code>.
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.Collections.EdgeWeightComparer`2">
            <summary>
            Compares the <see cref="P:IGraphEdge`1.Weight"/> values of
            graph edges for sorting them from least to greatest weight or
            from greatest to least weight.</summary>
            <typeparam name="Node">The type of graph nodes linked by the graph
            edges being compared.</typeparam>
            <typeparam name="Edge">The type of graph edges being compared and
            sorted by weight.</typeparam>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.EdgeWeightComparer`2.#ctor">
            <summary>
            Initializes a new <see cref="T:EdgeWeightComparer`2"/> that can
            be used to sort a set of graph edges from least to greatest
            <see cref="P:IGraphEdge`1.Weight"/>.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.EdgeWeightComparer`2.#ctor(System.Boolean)">
            <summary>
            Initializes a new <see cref="T:EdgeWeightComparer`2"/> that can
            be used to sort a set of graph edges from least to greatest
            <see cref="P:IGraphEdge`1.Weight"/>, or from greatest to least
            <see cref="P:IGraphEdge`1.Weight"/> if 
            <paramref name="reversed"/>.</summary>
            <param name="reversed">Whether to sort graph edges from
            greatest to least weight instead of from least to greatest
            weight.</param>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.EdgeWeightComparer`2.Compare(GraphForms.Algorithms.Digraph{`0,`1}.GEdge,GraphForms.Algorithms.Digraph{`0,`1}.GEdge)">
            <summary>
            Compares the <see cref="P:IGraphEdge`1{Node}.Weight"/> values of
            the <see cref="P:Digraph`2{Node,Edge}.GEdge.Data"/> values of
            the given <see cref="T:Digraph`2{Node,Edge}.GEdge"/> instances.
            </summary>
            <param name="x">The first edge to compare by weight.</param>
            <param name="y">The second edge to compare by weight.</param>
            <returns>Result of <c>x.Data.Weight.CompareTo(y.Data.Weight)</c>,
            or its negation if this comparer is <see cref="P:GraphForms.Algorithms.Collections.EdgeWeightComparer`2.Reversed"/>.
            </returns><seealso cref="M:System.Single.CompareTo(System.Single)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Collections.EdgeWeightComparer`2.Compare(`1,`1)">
            <summary>
            Compares the <see cref="P:IGraphEdge`1{Node}.Weight"/> values of
            the given <typeparamref name="Edge"/> instances.
            </summary>
            <param name="x">The first edge to compare by weight.</param>
            <param name="y">The second edge to compare by weight.</param>
            <returns>Result of <c>x.Weight.CompareTo(y.Weight)</c>,
            or its negation if this comparer is <see cref="P:GraphForms.Algorithms.Collections.EdgeWeightComparer`2.Reversed"/>.
            </returns><seealso cref="M:System.Single.CompareTo(System.Single)"/>
        </member>
        <member name="P:GraphForms.Algorithms.Collections.EdgeWeightComparer`2.Reversed">
            <summary>
            Whether this <see cref="T:EdgeWeightComparer`2"/> sorts edges
            from greatest to least <see cref="P:IGraphEdge`1.Weight"/>
            instead of from least to greatest
            <see cref="P:IGraphEdge`1.Weight"/>.</summary>
        </member>
        <member name="T:GraphForms.Vec2F">
            <summary>
            Defines a vector with two single-precision components.
            </summary>
        </member>
        <member name="F:GraphForms.Vec2F.X">
            <summary>
            The X-coordinate of the vector.
            </summary>
        </member>
        <member name="F:GraphForms.Vec2F.Y">
            <summary>
            The Y-coordinate of the vector.
            </summary>
        </member>
        <member name="M:GraphForms.Vec2F.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new vector with the two given single-precision
            components.
            </summary>
            <param name="x">The X-coordinate of the vector.</param>
            <param name="y">The Y-coordinate of the vector.</param>
        </member>
        <member name="M:GraphForms.Vec2F.Distance(GraphForms.Vec2F,GraphForms.Vec2F)">
            <summary>
            Calculates the distance between the given source 
            and destination points.
            </summary>
            <param name="u">The source point.</param>
            <param name="v">The destination point.</param>
            <returns>The distance between 
            <paramref name="u"/> and <paramref name="v"/>.</returns>
        </member>
        <member name="M:GraphForms.Vec2F.DistanceSquared(GraphForms.Vec2F,GraphForms.Vec2F)">
            <summary>
            Calculates the squared distance between the given source 
            and destination points.
            </summary>
            <param name="u">The source point.</param>
            <param name="v">The destination point.</param>
            <returns>The squared distance between 
            <paramref name="u"/> and <paramref name="v"/>.</returns>
        </member>
        <member name="M:GraphForms.Vec2F.ManhattanDistance(GraphForms.Vec2F,GraphForms.Vec2F)">
            <summary>
            Calculates the Manhattan distance between the given source 
            and destination points.
            </summary>
            <param name="u">The source point.</param>
            <param name="v">The destination point.</param>
            <returns>The Manhattan distance between 
            <paramref name="u"/> and <paramref name="v"/>.</returns>
        </member>
        <member name="M:GraphForms.Vec2F.DotProduct(GraphForms.Vec2F,GraphForms.Vec2F)">
            <summary>
            Calculates the dot/inner product of the vectors 
            <paramref name="u"/> and <paramref name="v"/>.
            </summary>
            <param name="u">A source vector.</param>
            <param name="v">A source vector.</param>
            <returns>The dot/inner product of the two given vectors.
            </returns>
        </member>
        <member name="M:GraphForms.Vec2F.CrossProduct(GraphForms.Vec2F,GraphForms.Vec2F)">
            <summary>
            Calculates the cross product of the vectors 
            <paramref name="u"/> and <paramref name="v"/>.
            </summary>
            <param name="u">A source vector.</param>
            <param name="v">A source vector.</param>
            <returns>The cross product of the two given vectors.
            </returns>
        </member>
        <member name="M:GraphForms.Vec2F.Add(GraphForms.Vec2F,GraphForms.Vec2F)">
            <summary>
            Adds the vector <paramref name="v"/>
            to the vector <paramref name="u"/>.
            </summary>
            <param name="u">A source vector.</param>
            <param name="v">A source vector.</param>
            <returns>The sum of the two given vectors.</returns>
        </member>
        <member name="M:GraphForms.Vec2F.Subtract(GraphForms.Vec2F,GraphForms.Vec2F)">
            <summary>
            Subtracts the vector <paramref name="v"/>
            from the vector <paramref name="u"/>.
            </summary>
            <param name="u">A source vector.</param>
            <param name="v">A source vector.</param>
            <returns>The difference between the two given vectors.</returns>
        </member>
        <member name="M:GraphForms.Vec2F.Equals(GraphForms.Vec2F)">
            <summary>
            Tests whether the components of the given vector are equal to
            the respective components of this vector.
            </summary>
            <param name="other">The vector to test.</param>
            <returns>True if the <see cref="F:GraphForms.Vec2F.X"/> and <see cref="F:GraphForms.Vec2F.Y"/>
            components of <paramref name="other"/> are equal to the
            corresponding components of this vector; otherwise false.
            </returns>
        </member>
        <member name="P:GraphForms.Vec2F.Zero">
            <summary>
            Creates a vector with all its components set to zero.
            </summary>
        </member>
        <member name="P:GraphForms.Vec2F.One">
            <summary>
            Creates a vector with all its components set to one.
            </summary>
        </member>
        <member name="P:GraphForms.Vec2F.UnitX">
            <summary>
            Creates the unit vector for the Euclidean X-axis.
            </summary>
        </member>
        <member name="P:GraphForms.Vec2F.UnitY">
            <summary>
            Creates the unit vector for the Euclidean Y-axis.
            </summary>
        </member>
        <member name="P:GraphForms.Vec2F.Length">
            <summary>
            Gets the length of this vector.
            </summary>
        </member>
        <member name="P:GraphForms.Vec2F.LengthSquared">
            <summary>
            Gets the squared length of this vector.
            </summary>
        </member>
        <member name="P:GraphForms.Vec2F.ManhattanLength">
            <summary>
            Gets the Manhattan length of this vector, which is the sum of 
            the absolute values of its components.
            </summary>
        </member>
        <member name="T:GraphForms.Box2F">
            <summary>
            Stores a set of four single-precision floating-point numbers
            that represent the location and size of a bounding box.
            </summary>
        </member>
        <member name="F:GraphForms.Box2F.X">
            <summary>
            The X-coordinate of the upper-left corner of this bounding box.
            </summary>
        </member>
        <member name="F:GraphForms.Box2F.Y">
            <summary>
            The Y-coordinate of the upper-left corner of this bounding box.
            </summary>
        </member>
        <member name="F:GraphForms.Box2F.mW">
            <summary>
            The width of this bounding box.
            </summary>
        </member>
        <member name="F:GraphForms.Box2F.mH">
            <summary>
            The height of this bounding box.
            </summary>
        </member>
        <member name="M:GraphForms.Box2F.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of <see cref="T:GraphForms.Box2F"/>
            with the specified location and size.
            </summary>
            <param name="x">The X-coordinate of 
            the upper-left corner of the bounding box.</param>
            <param name="y">The Y-coordinate of
            the upper-left corner of the bounding box.</param>
            <param name="w">The width of the bounding box.</param>
            <param name="h">The height of the bounding box.</param>
        </member>
        <member name="M:GraphForms.Box2F.#ctor(GraphForms.Vec2F,GraphForms.Vec2F)">
            <summary>
            Initializes a new instance of <see cref="T:GraphForms.Box2F"/>
            with the specified location and size.
            </summary>
            <param name="location">A <see cref="T:GraphForms.Vec2F"/> that represents
            the upper-left corner of the bounding box.</param>
            <param name="size">A <see cref="T:GraphForms.Vec2F"/> that represents
            the width and height of the bounding box.</param>
        </member>
        <member name="M:GraphForms.Box2F.#ctor(GraphForms.Box2F)">
            <summary>
            Initializes a new instance of <see cref="T:GraphForms.Box2F"/> 
            with a location and size equal to those of the given 
            <paramref name="box"/>.</summary>
            <param name="box">The box to copy.</param>
        </member>
        <member name="M:GraphForms.Box2F.FromLTRB(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:GraphForms.Box2F"/> with its upper-left corner 
            and lower-right corner at the specified locations.
            </summary>
            <param name="left">The X-coordinate of
            the upper-left corner of the bounding box.</param>
            <param name="top">The Y-coordinate of 
            the upper-left corner of the bounding box.</param>
            <param name="right">The X-coordinate of
            the lower-right corner of the bounding box.</param>
            <param name="bottom">The Y-coordinate of
            the lower-right corner of the bounding box.</param>
            <returns>The new <see cref="T:GraphForms.Box2F"/> that this method creates.
            </returns>
        </member>
        <member name="M:GraphForms.Box2F.Inflate(System.Single,System.Single)">
            <summary>
            Inflates this bounding box by the specified amount.
            </summary>
            <param name="x">The amount to inflate this bounding box 
            vertically.</param>
            <param name="y">The amount to inflate this bounding box 
            horizontally.</param>
        </member>
        <member name="M:GraphForms.Box2F.Contains(System.Single,System.Single)">
            <summary>
            Determines if the specified point is contained within this box.
            </summary>
            <param name="x">The X-coordinate of the point to test.</param>
            <param name="y">The Y-coordinate of the point to test.</param>
            <returns>True if the given point is contained within this box;
            otherwise false.</returns>
        </member>
        <member name="M:GraphForms.Box2F.Contains(GraphForms.Vec2F)">
            <summary>
            Determines if the specified point is contained within this box.
            </summary>
            <param name="pt">The point to test.</param>
            <returns>True if the given point is contained within this box;
            otherwise false.</returns>
        </member>
        <member name="M:GraphForms.Box2F.Contains(GraphForms.Box2F)">
            <summary>
            Determines if the bounding box represented by 
            <paramref name="box"/> is entirely contained within this box.
            </summary>
            <param name="box">The box to test.</param>
            <returns>True if the specified bounding box is entirely contained
            within this bounding box; otherwise false.</returns>
        </member>
        <member name="M:GraphForms.Box2F.IntersectsWith(GraphForms.Box2F)">
            <summary>
            Determines if this bounding box intersects with the bounding box
            represented by <paramref name="box"/>.
            </summary>
            <param name="box">The bounding box to test.</param>
            <returns>True if there is any intersection between this bounding
            box and the specified bounding box; otherwise false.</returns>
        </member>
        <member name="M:GraphForms.Box2F.Intersect(GraphForms.Box2F,GraphForms.Box2F)">
            <summary>
            Creates a bounding box that represents the intersection of the
            two specified bounding boxes.  If there is no intersection,
            an empty bounding box is returned.
            </summary>
            <param name="boxA">A bounding box to intersect.</param>
            <param name="boxB">A bounding box to intersect.</param>
            <returns>A new <see cref="T:GraphForms.Box2F"/> which represents the 
            overlapped area of the two specified bounding boxes.</returns>
        </member>
        <member name="M:GraphForms.Box2F.Union(GraphForms.Box2F,GraphForms.Box2F)">
            <summary>
            Creates a bounding box that represents the union of the two
            specified bounding boxes, which is the smallest possible bounding
            box that can contain both <paramref name="boxA"/> and
            <paramref name="boxB"/>.
            </summary>
            <param name="boxA">A bounding box to unite.</param>
            <param name="boxB">A bounding box to unite.</param>
            <returns>A new <see cref="T:GraphForms.Box2F"/> which represents the smallest
            possible bounding box that can contain both of the specified
            bounding boxes.</returns>
        </member>
        <member name="M:GraphForms.Box2F.Equals(GraphForms.Box2F)">
            <summary>
            Tests whether <paramref name="other"/> is a bounding box
            with the same location and size as this bounding box.
            </summary>
            <param name="other">The bounding box to test.</param>
            <returns>True if the <see cref="F:GraphForms.Box2F.X"/>, <see cref="F:GraphForms.Box2F.Y"/>, 
            <see cref="P:GraphForms.Box2F.W"/>, and <see cref="P:GraphForms.Box2F.H"/> values of 
            <paramref name="other"/> are equal to the corresponding values of
            this bounding box; otherwise false.</returns>
        </member>
        <member name="P:GraphForms.Box2F.W">
            <summary>
            Gets or sets the width of this bounding box.
            </summary>
            <remarks><para>
            If the user attempts to set a negative width, that negative 
            value is instead added to this bounding box's <see cref="F:GraphForms.Box2F.X"/> and
            this bounding box's width is set to the negation of that value.
            </para><para>
            This ensures that this bounding box remains "normalized" so that
            its hit testing and binary operations function properly.
            </para></remarks>
        </member>
        <member name="P:GraphForms.Box2F.H">
            <summary>
            Gets or sets the height of this bounding box.
            </summary>
            <remarks><para>
            If the user attempts to set a negative height, that negative 
            value is instead added to this bounding box's <see cref="F:GraphForms.Box2F.Y"/> and
            this bounding box's height is set to the negation of that value.
            </para><para>
            This ensures that this bounding box remains "normalized" so that
            its hit testing and binary operations function properly.
            </para></remarks>
        </member>
        <member name="P:GraphForms.Box2F.IsEmpty">
            <summary>
            Tests whether the width or height of this bounding box 
            has a value of zero.
            </summary>
        </member>
        <member name="P:GraphForms.Box2F.Location">
            <summary>
            Gets or sets the coordinates of 
            the upper-left corner of this box.
            </summary>
        </member>
        <member name="P:GraphForms.Box2F.Size">
            <summary>
            Gets or sets the size of this box.
            </summary>
            <remarks><para>
            If either component of the given size is negative, that component
            is instead added to the respective component in this bounding
            box's <see cref="P:GraphForms.Box2F.Location"/> and the respective component of this
            bounding box's size is set to the negation of that component.
            </para><para>
            This ensures that this bounding box remains "normalized" so that
            its hit testing and binary operations function properly.
            </para></remarks>
        </member>
        <member name="P:GraphForms.Box2F.Left">
            <summary>
            Gets the X-coordinate of the left edge of this box.
            </summary>
        </member>
        <member name="P:GraphForms.Box2F.Top">
            <summary>
            Gets the Y-coordinate of the top edge of this box.
            </summary>
        </member>
        <member name="P:GraphForms.Box2F.Right">
            <summary>
            Gets the X-coordinate of the right edge of this box,
            which is the sum of <see cref="F:GraphForms.Box2F.X"/> and <see cref="P:GraphForms.Box2F.W"/>.
            </summary>
        </member>
        <member name="P:GraphForms.Box2F.Bottom">
            <summary>
            Gets the Y-coordinate of the bottom edge of this box,
            which is the sum of <see cref="F:GraphForms.Box2F.Y"/> and <see cref="P:GraphForms.Box2F.H"/>.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.SpanningTree.KruskalMinSpanningTree`2.SpanningTree">
            <summary>
            A sub-graph of the original connected graph that connects all
            its vertices together with a minimal subset of its edges.
            </summary><remarks>
            If the original graph isn't connected, this graph will contain
            multiple spanning trees, one for each weakly connected
            component of the original graph.
            </remarks>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ForceDirected.ISOMLayoutAlgorithm`2.RadiusConstantTime">
            <summary>
            Radius constant time. Default value is 100.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ForceDirected.ISOMLayoutAlgorithm`2.InitialRadius">
            <summary>
            Initial radius. Default value is 5.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ForceDirected.ISOMLayoutAlgorithm`2.MinRadius">
            <summary>
            Minimum radius. Default value is 1.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ForceDirected.ISOMLayoutAlgorithm`2.InitialAdaptation">
            <summary>
            Initial adaptation. Default value is 0.9.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ForceDirected.ISOMLayoutAlgorithm`2.MinAdaptation">
            <summary>
            Minimum Adaptation. Default value is 0.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ForceDirected.ISOMLayoutAlgorithm`2.CoolingFactor">
            <summary>
            Cooling factor. Default value is 2.
            </summary>
        </member>
        <member name="T:GraphForms.PrintArray`1">
            <summary>
            A simple class used for holding an array of values of type
            <typeparamref name="T"/> and recursively printing their
            <see cref="M:System.Object.ToString"/> results in its own
            <see cref="M:PrintableArray`1.ToString()"/> method with a
            specified separating string between each value.
            </summary><typeparam name="T">The type of values stored in 
            this printable array container.</typeparam>
        </member>
        <member name="F:GraphForms.PrintArray`1.Data">
            <summary>
            The array of <typeparamref name="T"/> instances
            stored in this printable array container.
            </summary>
        </member>
        <member name="F:GraphForms.PrintArray`1.Separator">
            <summary>
            The separator that is placed between the printed instances
            in the <see cref="F:GraphForms.PrintArray`1.Data"/> array when it is printed with
            the <see cref="M:GraphForms.PrintArray`1.ToString"/> function.
            </summary>
        </member>
        <member name="M:GraphForms.PrintArray`1.#ctor">
            <summary>
            Initializes a new printable array instance with its
            <see cref="F:GraphForms.PrintArray`1.Data"/> set to <c>null</c> and its 
            <see cref="F:GraphForms.PrintArray`1.Separator"/> set to a single comma.
            </summary>
        </member>
        <member name="M:GraphForms.PrintArray`1.#ctor(`0[])">
            <summary>
            Initializes a new printable array instance with the given
            array of <paramref name="data"/> to be printed with its
            <see cref="M:GraphForms.PrintArray`1.ToString"/> function with a single comma
            printed between each of them.</summary>
            <param name="data">The array of data to be printed 
            by this printable array container.</param>
        </member>
        <member name="M:GraphForms.PrintArray`1.#ctor(`0[],System.String)">
            <summary>
            Initializes a new printable array instance with the given
            array of <paramref name="data"/> to be printed with its
            <see cref="M:GraphForms.PrintArray`1.ToString"/> function with the given
            <paramref name="separator"/> printed between each of them.
            </summary>
            <param name="data">The array of data to be printed 
            by this printable array container.</param>
            <param name="separator">The string that printed between the
            string print out of each value in <paramref name="data"/>.
            </param>
        </member>
        <member name="M:GraphForms.PrintArray`1.ToString">
            <summary>
            Iteratively prints each <typeparamref name="T"/> instance in
            this printable array's <see cref="F:GraphForms.PrintArray`1.Data"/> by using their
            implementation of the <see cref="M:System.Object.ToString"/> method,
            and separates them with this printable array's
            <see cref="F:GraphForms.PrintArray`1.Separator"/> string.</summary>
            <returns>The string version of this printable array.</returns>
        </member>
        <member name="T:GraphForms.Algorithms.GraphColor">
            <summary>
            Enumeration of the different states of visitation of a node or edge 
            in a graph being traversed by an algorithm for searching or other 
            data processing.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.GraphColor.White">
            <summary>
            The node/edge has not yet been visited by the algorithm.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.GraphColor.Gray">
            <summary>
            The node/edge is currently being visited by the algorithm.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.GraphColor.Black">
            <summary>
            The node/edge has already been visited by the algorithm.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.ForceDirected.KKLayoutAlgorithm`2.mDistances">
            <summary>
            Minimal distances between the nodes;
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.ForceDirected.KKLayoutAlgorithm`2.mXs">
            <summary>
            Scene-level X-coordinates of new node positions
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.ForceDirected.KKLayoutAlgorithm`2.mYs">
            <summary>
            Scene-level Y-coordinates of new node positions
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Layout.ForceDirected.KKLayoutAlgorithm`2.mHidden">
            <summary>
            Whether or not each node is currently hidden.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.ForceDirected.KKLayoutAlgorithm`2.CalcEnergyIfExchanged(System.Int32,System.Int32)">
            <summary>
            Calculates the energy of the state where the positions of the nodes
            at <paramref name="p"/> and <paramref name="q"/> are exchanged.
            </summary>
            <param name="p">The index of the node exchanged with 
            the node at <paramref name="q"/>.</param>
            <param name="q">The index of the node exchanged with 
            the node at <paramref name="p"/>.</param>
            <returns>The energy of the state where the positions of the nodes
            at <paramref name="p"/> and <paramref name="q"/> are exchanged.
            </returns>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.ForceDirected.KKLayoutAlgorithm`2.CalcEnergy">
            <summary>
            Calculates the energy of the spring system.
            </summary>
            <returns>The energy of the spring system.</returns>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.ForceDirected.KKLayoutAlgorithm`2.CalcDeltaXY(System.Int32)">
            <summary>
            Determines a step to a new position for a node, 
            and adds that step to the new position of that node.
            </summary>
            <param name="m">The index of the node.</param>
            <returns>The step to a new position for the node at 
            <paramref name="m"/>.</returns>
        </member>
        <member name="M:GraphForms.Algorithms.Layout.ForceDirected.KKLayoutAlgorithm`2.CalculateEnergyGradient(System.Int32)">
            <summary>
            Calculates the gradient energy of a node.
            </summary>
            <param name="m">The index of the node.</param>
            <returns>The gradient energy of the node at <paramref name="m"/>.
            </returns>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ForceDirected.KKLayoutAlgorithm`2.AdjustForGravity">
            <summary>
            If true, then after the layout process, the nodes will be moved, 
            so the barycenter will be in the center point of the 
            this algorithm's cluster node's bounding box or its own
            bounding box if its cluster node is null. </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ForceDirected.KKLayoutAlgorithm`2.LengthFactor">
            <summary>
            Multiplier of the ideal edge length. 
            (With this parameter the user can modify the ideal edge length).
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Layout.ForceDirected.KKLayoutAlgorithm`2.DisconnectedMultiplier">
            <summary>
            Ideal distance between the disconnected points 
            (1 is equal the ideal edge length).
            </summary>
        </member>
        <member name="T:GraphForms.Algorithms.Digraph`2">
            <summary>
            A container for a list of <typeparamref name="Node"/> instances 
            connected by one-way <typeparamref name="Edge"/> instances, along with
            algorithms for traversing those <typeparamref name="Node"/> instances 
            along with <typeparamref name="Edge"/> instances.
            </summary>
            <typeparam name="Node">The type of vertices contained in this 
            directional graph.</typeparam>
            <typeparam name="Edge">The type of edges connecting the 
            vertices contained in this directional graph.</typeparam>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.#ctor">
            <summary>
            Initializes a new <see cref="T:Digraph`2{Node,Edge}"/>
            instance that is empty and has the default initial capacities
            for its internal node and edge lists.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:Digraph`2{Node,Edge}"/>
            instance that is empty and has the specified initial capacities
            for its internal node and edge lists.
            </summary>
            <param name="nodeCapacity">The number of nodes that the new graph
            can initially store.</param>
            <param name="edgeCapacity">The number of edges that the new graph
            can initially store.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="nodeCapacity"/> and/or 
            <paramref name="edgeCapacity"/> are less than zero.</exception>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.FindCenter(System.Boolean,System.Boolean)">
            <summary>
            Finds the "center" node of this graph based on an undirected 
            breadth first "pruning" of edges, starting from its "leaf" nodes
            (nodes with only one edge connecting them to the rest of the 
            graph) and working its way inward until a single "center" node 
            is left.</summary>
            <returns>Null if this graph could not be "pruned" because it has 
            no nodes or no edges or no "leaf" nodes; otherwise the "center" 
            found via the undirected breadth first "pruning".</returns>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.NodeAt(System.Int32)">
            <summary>
            Retrieves the <typeparamref name="Node"/> instance at the given
            <paramref name="nodeIndex"/> in this directional graph's
            internal list of <see cref="P:GraphForms.Algorithms.Digraph`2.Nodes"/>.
            </summary>
            <param name="nodeIndex">The index of the <typeparamref name="Node"/>
            instance to retrieve from this directional graph's internal list of
            <see cref="P:GraphForms.Algorithms.Digraph`2.Nodes"/>.</param>
            <returns>The <typeparamref name="Node"/> instance at 
            <paramref name="nodeIndex"/> in this directional graph's internal
            list of <see cref="P:GraphForms.Algorithms.Digraph`2.Nodes"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="nodeIndex"/> is less than <c>0</c> or greater 
            than or equal to <see cref="P:GraphForms.Algorithms.Digraph`2.NodeCount"/>.</exception>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.InternalNodeAt(System.Int32)">
            <summary>
            Retrieves the <see cref="T:GraphForms.Algorithms.Digraph`2.GNode"/> instance at the given
            <paramref name="nodeIndex"/> in this directional graph's
            internal list of <see cref="P:GraphForms.Algorithms.Digraph`2.InternalNodes"/>.
            </summary>
            <param name="nodeIndex">The index of the <see cref="T:GraphForms.Algorithms.Digraph`2.GNode"/>
            instance to retrieve from this directional graph's internal list of
            <see cref="P:GraphForms.Algorithms.Digraph`2.InternalNodes"/>.</param>
            <returns>The <see cref="T:GraphForms.Algorithms.Digraph`2.GNode"/> instance at 
            <paramref name="nodeIndex"/> in this directional graph's internal
            list of <see cref="P:GraphForms.Algorithms.Digraph`2.InternalNodes"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="nodeIndex"/> is less than <c>0</c> or greater 
            than or equal to <see cref="P:GraphForms.Algorithms.Digraph`2.NodeCount"/>.</exception>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.InternalNodeFor(`0)">
            <summary>
            A convenience function that retrieves the <see cref="T:GraphForms.Algorithms.Digraph`2.GNode"/>
            instance that corresponds to and contains the given
            <paramref name="node"/>.  If <paramref name="node"/> is not in
            this graph, null is returned.
            </summary>
            <param name="node">The <typeparamref name="Node"/> instance to
            find the corresponding <see cref="T:GraphForms.Algorithms.Digraph`2.GNode"/> instance.</param>
            <returns>The <see cref="T:GraphForms.Algorithms.Digraph`2.GNode"/> instance corresponding to
            <paramref name="node"/>, or null if <paramref name="node"/> is not
            in this graph.</returns>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.IndexOfNode(`0)">
            <summary>
            Searches for the specified <typeparamref name="Node"/> instance
            and returns the zero-based index of its occurrence within this
            <see cref="T:Digraph`2{Node,Edge}"/>'s internal list of 
            <see cref="P:GraphForms.Algorithms.Digraph`2.Nodes"/>.</summary>
            <param name="node">The <typeparamref name="Node"/> to locate
            in this <see cref="T:Digraph`2{Node,Edge}"/>.</param>
            <returns>The zero-based index of the occurrence of 
            <paramref name="node"/> within this <see cref="T:Digraph`2{Node,Edge}"/>, if found; otherwise, -1.
            </returns><seealso cref="M:GraphForms.Algorithms.Digraph`2.IndexOfEdge(`0,`0)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.ContainsNode(`0)">
            <summary>
            Determines whether the given <typeparamref name="Node"/> is in
            this <see cref="T:Digraph`2{Node,Edge}"/>.
            </summary>
            <param name="node">The <typeparamref name="Node"/> instance to
            locate in this <see cref="T:Digraph`2{Node,Edge}"/>.
            </param>
            <returns>true if <paramref name="node"/> is found in this
            <see cref="T:Digraph`2{Node,Edge}"/>; otherwise, false.
            </returns><remarks>
            This is really just a convenience function for testing whether the
            <see cref="M:GraphForms.Algorithms.Digraph`2.IndexOfNode(`0)"/> is greater than or equal to zero.
            </remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.AddNode(`0)">
            <summary>
            Adds a <typeparamref name="Node"/> instance to the end of this
            <see cref="T:Digraph`2{Node,Edge}"/>, if it isn't already
            contained in this graph.</summary>
            <param name="node">The <typeparamref name="Node"/> instance to be
            added to the end of this <see cref="T:Digraph`2{Node,Edge}"/>.
            </param>
            <returns>true if the <paramref name="node"/> is added to the end of
            this <see cref="T:Digraph`2{Node,Edge}"/>, false if it's already
            contained in it.</returns><seealso cref="M:GraphForms.Algorithms.Digraph`2.AddEdge(`1)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.InsertNode(System.Int32,`0)">
            <summary>
            Inserts a <typeparamref name="Node"/> instance into this 
            <see cref="T:Digraph`2"/> at the specified 
            <paramref name="index"/>, if it isn't already contained 
            in this graph.</summary>
            <param name="index">The zero-based index at which 
            <paramref name="node"/> should be inserted.</param>
            <param name="node">The <typeparamref name="Node"/> instance
            to insert into this graph.</param>
            <returns>true if the given <paramref name="node"/> is inserted 
            into this <see cref="T:Digraph`2{Node,Edge}"/> at the given 
            <paramref name="index"/>, or false if it's already contained 
            in this graph.</returns>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.ReplaceNode(`0,`0)">
            <summary>
            If <paramref name="oldNode"/> is found within this
            <see cref="T:Digraph`2{Node,Edge}"/>, it is replaced with 
            <paramref name="newNode"/>, but only if <paramref name="newNode"/>
            isn't already contained in this <see cref="T:Digraph`2{Node,Edge}"/>.
            </summary>
            <param name="oldNode">The <typeparamref name="Node"/> instance to
            be replaced with <paramref name="newNode"/>.</param>
            <param name="newNode">The <typeparamref name="Node"/> instance to
            replace <paramref name="oldNode"/>.</param>
            <returns>true if the <paramref name="oldNode"/> was successfully
            replaced with <paramref name="newNode"/>, false otherwise
            (<paramref name="oldNode"/> isn't in this graph or <paramref name="newNode"/> already is in it).</returns>
            <remarks><para>
            This function's main purpose is to obviate the task of otherwise
            having to meticulously replace every single <typeparamref name="Edge"/> instance connecting <paramref name="oldNode"/> to the
            rest of this graph with new <typeparamref name="Edge"/> instances
            connecting <paramref name="newNode"/> to the same <typeparamref name="Node"/> instances <paramref name="oldNode"/> is connected to,
            since using <see cref="M:GraphForms.Algorithms.Digraph`2.RemoveNode(`0)"/> or any related function
            also removes all of the node's connections.
            </para><para>
            However, in order to do this, this function relies heavily on the
            implementation of the <see cref="M:IGraphEdge`1{Node}.Copy`1{Edge}(Node,Node)"/>
            function in the <typeparamref name="Edge"/> class to create
            replacement connections. So, ensure that function is properly
            implemented before using this function in order to avoid 
            erraneous results.</para></remarks>
            <seealso cref="M:IGraphEdge`1{Node}.Copy`1{Edge}(Node,Node)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.HideNode(`0)">
            <summary>
            Sets to true the <see cref="P:GraphForms.Algorithms.Digraph`2.GNode.Hidden"/> property of the 
            <see cref="T:GraphForms.Algorithms.Digraph`2.GNode"/> corresponding to the given 
            <paramref name="node"/> in the graph if the given
            <paramref name="node"/> is in the graph.</summary>
            <param name="node">The <typeparamref name="Node"/> instance
            to hide from algorithms that will process this graph.</param>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.UnhideNode(`0)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.HideNodeAt(System.Int32)">
            <summary>
            Sets to true the <see cref="P:GraphForms.Algorithms.Digraph`2.GNode.Hidden"/> property of the
            <see cref="T:GraphForms.Algorithms.Digraph`2.GNode"/> at the given <see cref="!:nodeIndex"/> in
            this graph's internal list of nodes.
            </summary>
            <param name="nodeIndex">The index of the node in this graph
            to hide from algorithms that will process this graph.</param>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.UnhideNodeAt(System.Int32)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.HideAllNodes">
            <summary>
            Sets to true the <see cref="P:GraphForms.Algorithms.Digraph`2.GNode.Hidden"/> property of every
            <see cref="T:GraphForms.Algorithms.Digraph`2.GNode"/> in this graph, making it appear empty to
            any algorithm that will process it.</summary>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.UnhideAllNodes"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.UnhideNode(`0)">
            <summary>
            Sets to false the <see cref="P:GraphForms.Algorithms.Digraph`2.GNode.Hidden"/> property of the 
            <see cref="T:GraphForms.Algorithms.Digraph`2.GNode"/> corresponding to the given 
            <paramref name="node"/> in the graph if the given
            <paramref name="node"/> is in the graph.</summary>
            <param name="node">The <typeparamref name="Node"/> instance
            to unhide from algorithms that will process this graph.</param>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.HideNode(`0)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.UnhideNodeAt(System.Int32)">
            <summary>
            Sets to false the <see cref="P:GraphForms.Algorithms.Digraph`2.GNode.Hidden"/> property of the
            <see cref="T:GraphForms.Algorithms.Digraph`2.GNode"/> at the given <see cref="!:nodeIndex"/> in
            this graph's internal list of nodes.
            </summary>
            <param name="nodeIndex">The index of the node in this graph
            to unhide from algorithms that will process this graph.</param>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.HideNodeAt(System.Int32)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.UnhideAllNodes">
            <summary>
            Sets to false the <see cref="P:GraphForms.Algorithms.Digraph`2.GNode.Hidden"/> property of every
            <see cref="T:GraphForms.Algorithms.Digraph`2.GNode"/> in this graph.</summary>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.HideAllNodes"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.RemoveNode(`0)">
            <summary>
            Removes the specified <typeparamref name="Node"/> instance from
            this <see cref="T:Digraph`2{Node,Edge}"/>, along with all
            <typeparamref name="Edge"/> instances connecting it to the rest of 
            this graph, but doesn't remove any nodes orphaned by the removal
            of <paramref name="node"/>.</summary>
            <param name="node">The <typeparamref name="Node"/> instance to 
            remove from this <see cref="T:Digraph`2{Node,Edge}"/>.</param>
            <returns>true if <paramref name="node"/> is successfully removed;
            otherwise false if <paramref name="node"/> wasn't found in this
            <see cref="T:Digraph`2{Node,Edge}"/>.</returns>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.RemoveNodeAt(System.Int32)"/>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.OrphanNode(`0)"/>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.RemoveEdge(`0,`0)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.RemoveNode(`0,System.Boolean)">
            <summary>
            Removes the specified <typeparamref name="Node"/> instance from
            this <see cref="T:Digraph`2{Node,Edge}"/>, along with all
            <typeparamref name="Edge"/> instances connecting it to the rest of 
            this graph.</summary>
            <param name="node">The <typeparamref name="Node"/> instance to 
            remove from this <see cref="T:Digraph`2{Node,Edge}"/>.</param>
            <param name="removeOrphans">Whether or not to remove any 
            <typeparamref name="Node"/> instances orphaned by the removal of
            <paramref name="node"/>.</param>
            <returns>true if <paramref name="node"/> is successfully removed;
            otherwise false if <paramref name="node"/> wasn't found in this
            <see cref="T:Digraph`2{Node,Edge}"/>.</returns>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.RemoveNodeAt(System.Int32,System.Boolean)"/>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.OrphanNode(`0)"/>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.RemoveEdge(`0,`0,System.Boolean)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.RemoveNodeAt(System.Int32)">
            <summary>
            Removes the <typeparamref name="Node"/> instance at the specified
            index in this <see cref="T:Digraph`2{Node,Edge}"/>'s list of
            <see cref="P:GraphForms.Algorithms.Digraph`2.Nodes"/>, along with all <typeparamref name="Edge"/>
            instances connecting it to the rest of this graph, but doesn't 
            remove any any nodes orphaned by the removal of the node at 
            <paramref name="nodeIndex"/>.</summary>
            <param name="nodeIndex">The zero-based index of the <typeparamref name="Node"/> instance to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="nodeIndex"/> is less than 0 or <paramref name="nodeIndex"/>
            is greater than or equal to <see cref="P:GraphForms.Algorithms.Digraph`2.NodeCount"/>.</exception>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.RemoveNode(`0)"/>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.RemoveEdgeAt(System.Int32)"/>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.OrphanNodeAt(System.Int32)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.RemoveNodeAt(System.Int32,System.Boolean)">
            <summary>
            Removes the <typeparamref name="Node"/> instance at the specified
            index in this <see cref="T:Digraph`2{Node,Edge}"/>'s list of
            <see cref="P:GraphForms.Algorithms.Digraph`2.Nodes"/>, along with all <typeparamref name="Edge"/>
            instances connecting it to the rest of this graph.</summary>
            <param name="nodeIndex">The zero-based index of the <typeparamref name="Node"/> instance to remove.</param>
            <param name="removeOrphans">Whether or not to remove any 
            <typeparamref name="Node"/> instances orphaned by the removal of
            the node at <paramref name="nodeIndex"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="nodeIndex"/> is less than 0 or <paramref name="nodeIndex"/>
            is greater than or equal to <see cref="P:GraphForms.Algorithms.Digraph`2.NodeCount"/>.</exception>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.RemoveNode(`0,System.Boolean)"/>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.RemoveEdgeAt(System.Int32,System.Boolean)"/>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.OrphanNodeAt(System.Int32)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.OrphanNode(`0)">
            <summary>
            Removes all <typeparamref name="Edge"/> instances connecting the
            given <typeparamref name="Node"/> instance to all other instances 
            in this <see cref="T:Digraph`2{Node,Edge}"/>, essentially
            orphaning it from the rest of this graph.</summary>
            <param name="node">The <typeparamref name="Node"/> instance to be
            orphaned from the rest of this <see cref="T:Digraph`2{Node,Edge}"/>.
            </param>
            <returns>true if <paramref name="node"/> is successfully orphaned;
            otherwise, false if <paramref name="node"/> wasn't found in this
            <see cref="T:Digraph`2{Node,Edge}"/>.</returns>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.OrphanNodeAt(System.Int32)"/>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.RemoveNode(`0,System.Boolean)"/>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.RemoveEdge(`0,`0,System.Boolean)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.OrphanNodeAt(System.Int32)">
            <summary>
            Removes all <typeparamref name="Edge"/> instances connecting the
            <typeparamref name="Node"/> instance at the given index to all 
            other instances in this <see cref="T:Digraph`2{Node,Edge}"/>,
            essentially orphaning it from the rest of this graph.</summary>
            <param name="nodeIndex">The zero-based index of the <typeparamref name="Node"/> instance to be orphaned.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="nodeIndex"/> is less than 0 or <paramref name="nodeIndex"/>
            is greater than or equal to <see cref="P:GraphForms.Algorithms.Digraph`2.NodeCount"/>.</exception>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.RemoveNodeAt(System.Int32,System.Boolean)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.FindOrphanedNodes">
            <summary>
            Retrieves all orphaned <typeparamref name="Node"/> instances (nodes
            without any <typeparamref name="Edge"/> instances connecting them
            to any other <typeparamref name="Node"/> instances) from this
            <see cref="T:Digraph`2{Node,Edge}"/>.
            </summary>
            <returns>An array containing all orphaned <typeparamref name="Node"/> currently in this <see cref="T:Digraph`2{Node,Edge}"/>.
            </returns><seealso cref="P:GraphForms.Algorithms.Digraph`2.Nodes"/>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.OrphanNode(`0)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.FindOrphanedInternalNodes">
            <summary>
            Retrieves all orphaned <see cref="T:GraphForms.Algorithms.Digraph`2.GNode"/> instances (nodes
            without any <typeparamref name="Edge"/> instances connecting them
            to any other <see cref="T:GraphForms.Algorithms.Digraph`2.GNode"/> instances) from this
            <see cref="T:Digraph`2{Node,Edge}"/>.
            </summary>
            <returns>An array containing all orphaned <typeparamref name="Node"/> currently in this <see cref="T:Digraph`2{Node,Edge}"/>.
            </returns><seealso cref="P:GraphForms.Algorithms.Digraph`2.InternalNodes"/>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.OrphanNode(`0)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.ClearOrphanedNodes">
            <summary>
            Removes all orphaned <typeparamref name="Node"/> instances (nodes
            without any <typeparamref name="Edge"/> instances connecting them
            to any other <typeparamref name="Node"/> instances) from this
            <see cref="T:Digraph`2{Node,Edge}"/>.
            </summary><remarks>
            Remember that this will remove any <typeparamref name="Node"/>
            instances recently added without any connections yet, as well as
            any orphaned as a side-effect of a function, including
            <see cref="M:GraphForms.Algorithms.Digraph`2.RemoveNode(`0)"/>, <see cref="M:GraphForms.Algorithms.Digraph`2.RemoveEdge(`0,`0)"/>
            and <see cref="M:GraphForms.Algorithms.Digraph`2.OrphanNode(`0)"/>.</remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.ClearNodes">
            <summary>
            Removes all <typeparamref name="Node"/> instances from this <see cref="T:Digraph`2{Node,Edge}"/>, as well as all <typeparamref name="Edge"/> instances, since they're meaningless without any
            <typeparamref name="Node"/> instances.
            </summary><seealso cref="M:GraphForms.Algorithms.Digraph`2.ClearOrphanedNodes"/>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.ClearEdges"/>.
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.EdgeAt(System.Int32)">
            <summary>
            Retrieves the <typeparamref name="Edge"/> instance at the given
            <paramref name="edgeIndex"/> in this directional graph's
            internal list of <see cref="P:GraphForms.Algorithms.Digraph`2.Edges"/>.
            </summary>
            <param name="edgeIndex">The index of the <typeparamref name="Edge"/>
            instance to retrieve from this directional graph's internal list of
            <see cref="P:GraphForms.Algorithms.Digraph`2.Edges"/>.</param>
            <returns>The <typeparamref name="Edge"/> instance at 
            <paramref name="edgeIndex"/> in this directional graph's internal
            list of <see cref="P:GraphForms.Algorithms.Digraph`2.Edges"/>.</returns>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.InternalEdgeAt(System.Int32)">
            <summary>
            Retrieves the <see cref="T:GraphForms.Algorithms.Digraph`2.GEdge"/> instance at the given
            <paramref name="edgeIndex"/> in this directional graph's
            internal list of <see cref="P:GraphForms.Algorithms.Digraph`2.InternalEdges"/>.
            </summary>
            <param name="edgeIndex">The index of the <see cref="T:GraphForms.Algorithms.Digraph`2.GEdge"/>
            instance to retrieve from this directional graph's internal list of
            <see cref="P:GraphForms.Algorithms.Digraph`2.InternalEdges"/>.</param>
            <returns>The <see cref="T:GraphForms.Algorithms.Digraph`2.GEdge"/> instance at 
            <paramref name="edgeIndex"/> in this directional graph's internal
            list of <see cref="P:GraphForms.Algorithms.Digraph`2.InternalEdges"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="edgeIndex"/> is less than <c>0</c> or greater 
            than or equal to <see cref="P:GraphForms.Algorithms.Digraph`2.EdgeCount"/>.</exception>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.IndexOfEdge(`0,`0)">
            <summary>
            Searches for the <typeparamref name="Edge"/> instance with the
            specified source and destination <typeparamref name="Node"/>s
            and returns the zero-based index of its occurrence within this
            <see cref="T:Digraph`2{Node,Edge}"/>'s internal list of 
            <see cref="P:GraphForms.Algorithms.Digraph`2.Edges"/>.</summary>
            <param name="srcNode">The <see cref="P:IGraphEdge`1{Node}.SrcNode"/>
            of the <typeparamref name="Edge"/> instance to locate.</param>
            <param name="dstNode">The <see cref="P:IGraphEdge`1{Node}.DstNode"/>
            of the <typeparamref name="Edge"/> instance to locate.</param>
            <returns>The zero-based index of the occurrence of the
            edge with the given <paramref name="srcNode"/> source and
            <paramref name="dstNode"/> destination within this <see cref="T:Digraph`2{Node,Edge}"/>, if found; otherwise, -1.
            </returns>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.IndexOfNode(`0)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.ContainsEdge(`0,`0)">
            <summary>
            Determines whether an <typeparamref name="Edge"/> instance with the
            specified source and destination <typeparamref name="Node"/>s is in
            this <see cref="T:Digraph`2{Node,Edge}"/>.
            </summary>
            <param name="srcNode">The <see cref="P:IGraphEdge`1{Node}.SrcNode"/>
            of the <typeparamref name="Edge"/> instance to locate.</param>
            <param name="dstNode">The <see cref="P:IGraphEdge`1{Node}.DstNode"/>
            of the <typeparamref name="Edge"/> instance to locate.</param>
            <returns>true if an <typeparamref name="Edge"/> instance with the
            given <paramref name="srcNode"/> source and 
            <paramref name="dstNode"/> destination is in this 
            <see cref="T:Digraph`2{Node,Edge}"/>; otherwise, false.
            </returns><remarks>
            This is really just a convenience function for testing whether the
            <see cref="M:GraphForms.Algorithms.Digraph`2.IndexOfEdge(`0,`0)"/> is greater than or equal to 
            zero. </remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.FindEdge(`0,`0)">
            <summary>
            Searches for the <typeparamref name="Edge"/> instance with the
            specified sourc and destination <typeparamref name="Node"/>s
            and returns that instance if its found, or the default value of
            the <typeparamref name="Edge"/> type if it isn't found.
            </summary>
            <param name="srcNode">The <see cref="P:IGraphEdge`1{Node}.SrcNode"/>
            of the <typeparamref name="Edge"/> instance to locate.</param>
            <param name="dstNode">The <see cref="P:IGraphEdge`1{Node}.DstNode"/>
            of the <typeparamref name="Edge"/> instance to locate.</param>
            <returns>The <typeparamref name="Edge"/> instance with the given
            <paramref name="srcNode"/> source and <paramref name="dstNode"/>
            destination in this <see cref="T:Digraph`2{Node,Edge}"/>,
            if found; otherwise, the default value of the <typeparamref 
            name="Edge"/> type.</returns>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.AddEdge(`1)">
            <summary>
            Adds an <typeparamref name="Edge"/> instance to the end of this
            <see cref="T:Digraph`2{Node,Edge}"/>, or replaces the 
            <typeparamref name="Edge"/> instance with the same <see cref="P:IGraphEdge`1{Node}.SrcNode"/> and <see cref="P:IGraphNode`1{Node}.DstNode"/> already in this graph with the
            given <paramref name="edge"/>.</summary>
            <param name="edge">The <typeparamref name="Edge"/> instance to be
            added to the end of this <see cref="T:Digraph`2{Node,Edge}"/>, or 
            replace the instance with the same source and destination.</param>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.AddEdge(`1,System.Boolean)"/><seealso cref="M:GraphForms.Algorithms.Digraph`2.AddNode(`0)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.AddEdge(`1,System.Boolean)">
            <summary>
            Adds an <typeparamref name="Edge"/> instance to the end of this
            <see cref="T:Digraph`2{Node,Edge}"/>, or replaces the 
            <typeparamref name="Edge"/> instance with the same <see cref="M:IGraphEdge`1{Node}.SrcNode"/> and <see cref="M:IGraphNode`1{Node}.DstNode"/> already in this graph with the
            given <paramref name="edge"/>.</summary>
            <param name="edge">The <typeparamref name="Edge"/> instance to be
            added to the end of this <see cref="T:Digraph`2{Node,Edge}"/>, or to
            replace the instance with the same source and destination.</param>
            <param name="replace">Whether or not <paramref name="edge"/>
            replaces any existing <typeparamref name="Edge"/> instance with the
            same source and destination <typeparamref name="Node"/>s.</param>
            <returns>true if the <paramref name="edge"/> is added to this <see cref="T:Digraph`2{Node,Edge}"/>, false if it's already contained in it 
            and replacement isn't allowed.</returns>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.AddEdge(`1)"/><seealso cref="M:GraphForms.Algorithms.Digraph`2.AddNode(`0)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.RemoveEdge(`0,`0)">
            <summary>
            Removes the <typeparamref name="Edge"/> instance with the specified
            <paramref name="srcNode"/> and <paramref name="dstNode"/> from
            this <see cref="T:Digraph`2{Node,Edge}"/>, but doesn't remove 
            any nodes orphaned by the removal of the edge.</summary>
            <param name="srcNode">The <see cref="P:IGraphEdge`1{Node}.SrcNode"/>
            of the <typeparamref name="Edge"/> instance to remove.</param>
            <param name="dstNode">The <see cref="P:IGraphEdge`1{Node}.DstNode"/>
            of the <typeparamref name="Edge"/> instance to remove.</param>
            <returns>true if the <typeparamref name="Edge"/> instance is 
            successfully removed; otherwise false if there is no instance with
            specified source and destination <typeparamref name="Node"/>
            instances in this <see cref="T:Digraph`2{Node,Edge}"/>.</returns>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.RemoveEdgeAt(System.Int32)"/>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.OrphanNode(`0)"/>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.RemoveNode(`0)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.RemoveEdge(`0,`0,System.Boolean)">
            <summary>
            Removes the <typeparamref name="Edge"/> instance with the specified
            <paramref name="srcNode"/> and <paramref name="dstNode"/> from
            this <see cref="T:Digraph`2{Node,Edge}"/>.</summary>
            <param name="srcNode">The <see cref="P:IGraphEdge`1{Node}.SrcNode"/>
            of the <typeparamref name="Edge"/> instance to remove.</param>
            <param name="dstNode">The <see cref="P:IGraphEdge`1{Node}.DstNode"/>
            of the <typeparamref name="Edge"/> instance to remove.</param>
            <param name="removeOrphans">Whether or not to also remove <paramref name="srcNode"/> or <paramref name="dstNode"/> if either is 
            orphaned by the removal of the edge connecting them.</param>
            <returns>true if the <typeparamref name="Edge"/> instance is 
            successfully removed; otherwise false if there is no instance with
            specified source and destination <typeparamref name="Node"/>
            instances in this <see cref="T:Digraph`2{Node,Edge}"/>.</returns>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.RemoveEdgeAt(System.Int32,System.Boolean)"/>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.OrphanNode(`0)"/>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.RemoveNode(`0,System.Boolean)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.RemoveEdgeAt(System.Int32)">
            <summary>
            Removes the <typeparamref name="Edge"/> instance at the specified
            index in this <see cref="T:Digraph`2{Node,Edge}"/>'s list of
            <see cref="P:GraphForms.Algorithms.Digraph`2.Edges"/>, but doesn't remove any any nodes orphaned by 
            the removal of the edge at <paramref name="edgeIndex"/>.</summary>
            <param name="edgeIndex">The zero-based index of the <typeparamref name="Edge"/> instance to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="edgeIndex"/> is less than 0 or <paramref name="edgeIndex"/>
            is greater than or equal to <see cref="P:GraphForms.Algorithms.Digraph`2.NodeCount"/>.</exception>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.RemoveEdge(`0,`0)"/>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.RemoveNodeAt(System.Int32)"/>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.OrphanNodeAt(System.Int32)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.RemoveEdgeAt(System.Int32,System.Boolean)">
            <summary>
            Removes the <typeparamref name="Edge"/> instance at the specified
            index in this <see cref="T:Digraph`2{Node,Edge}"/>'s list of
            <see cref="P:GraphForms.Algorithms.Digraph`2.Edges"/>, but doesn't remove any any nodes orphaned by 
            the removal of the edge at <paramref name="edgeIndex"/>.</summary>
            <param name="edgeIndex">The zero-based index of the <typeparamref name="Edge"/> instance to remove.</param>
            <param name="removeOrphans">Whether or not to also remove the
            <see cref="P:IGraphEdge`1{Node}.SrcNode"/> or <see cref="P:IGraphEdge`1{Node}.DstNode"/>
            of the <typeparamref name="Edge"/> instance at <paramref name="edgeIndex"/> if either is orphaned by its removal.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="edgeIndex"/> is less than 0 or <paramref name="edgeIndex"/>
            is greater than or equal to <see cref="P:GraphForms.Algorithms.Digraph`2.NodeCount"/>.</exception>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.RemoveEdge(`0,`0,System.Boolean)"/>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.RemoveNodeAt(System.Int32,System.Boolean)"/>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.OrphanNodeAt(System.Int32)"/>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.ClearEdges">
            <summary>
            Removes all <typeparamref name="Edge"/> instances from this <see cref="T:Digraph`2{Node,Edge}"/>, effectively orphaning
            every <typeparamref name="Node"/> instance in this graph.
            </summary><remarks>
            This is equivalent to calling <see cref="M:GraphForms.Algorithms.Digraph`2.OrphanNode(`0)"/> for
            every <typeparamref name="Node"/> instance in this <see cref="T:Digraph`2{Node,Edge}"/>, except it's much faster.
            </remarks><seealso cref="M:GraphForms.Algorithms.Digraph`2.ClearOrphanedNodes"/>
            <seealso cref="M:GraphForms.Algorithms.Digraph`2.ClearNodes"/>.
        </member>
        <member name="P:GraphForms.Algorithms.Digraph`2.NodeCount">
            <summary>
            The number of <typeparamref name="Node"/> instances currently
            contained in this <see cref="T:Digraph`2{Node,Edge}"/>.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Digraph`2.NodeCapacity">
            <summary>
            Gets or sets the total number of nodes this graph's 
            internal node list can hold without resizing.
            </summary><value>
            The number of nodes that this graph can contain 
            before resizing is required.
            </value><exception cref="T:System.ArgumentOutOfRangeException">
            <see cref="P:GraphForms.Algorithms.Digraph`2.NodeCapacity"/> is set to a value that is 
            less than <see cref="P:GraphForms.Algorithms.Digraph`2.NodeCount"/>.
            </exception><exception cref="T:System.OutOfMemoryException">
            There is not enough memory available on the system.
            </exception>
        </member>
        <member name="P:GraphForms.Algorithms.Digraph`2.NodeVersion">
            <summary>
            Gets the current "version" of this graph's internal node list,
            which is incremented each time a node is inserted into or 
            removed from this graph.</summary><seealso cref="P:GraphForms.Algorithms.Digraph`2.EdgeVersion"/>
        </member>
        <member name="P:GraphForms.Algorithms.Digraph`2.Nodes">
            <summary>
            An array of all the <typeparamref name="Node"/> instances
            contained in this <see cref="T:Digraph`2{Node,Edge}"/>,
            in the same order as all functions with a <c>nodeIndex</c>
            argument.</summary><seealso cref="P:GraphForms.Algorithms.Digraph`2.InternalNodes"/>
            <seealso cref="P:GraphForms.Algorithms.Digraph`2.Edges"/>
        </member>
        <member name="P:GraphForms.Algorithms.Digraph`2.InternalNodes">
            <summary>
            An array of all the <see cref="T:GraphForms.Algorithms.Digraph`2.GNode"/> instances currently
            contained within this <see cref="T:Digraph`2{Node,Edge}"/>,
            in the same order as all functions with a <c>nodeIndex</c>
            argument.</summary><seealso cref="P:GraphForms.Algorithms.Digraph`2.Nodes"/>
            <seealso cref="P:GraphForms.Algorithms.Digraph`2.InternalEdges"/>
        </member>
        <member name="P:GraphForms.Algorithms.Digraph`2.EdgeCount">
            <summary>
            The number of <typeparamref name="Edge"/> instances currently
            contained in this <see cref="T:Digraph`2{Node,Edge}"/>.
            </summary><seealso cref="P:GraphForms.Algorithms.Digraph`2.NodeCount"/>
        </member>
        <member name="P:GraphForms.Algorithms.Digraph`2.EdgeCapacity">
            <summary>
            Gets or sets the total number of edges this graph's 
            internal edge list can hold without resizing.
            </summary><value>
            The number of edges that this graph can contain 
            before resizing is required.
            </value><exception cref="T:System.ArgumentOutOfRangeException">
            <see cref="P:GraphForms.Algorithms.Digraph`2.EdgeCapacity"/> is set to a value that is 
            less than <see cref="P:GraphForms.Algorithms.Digraph`2.EdgeCount"/>.
            </exception><exception cref="T:System.OutOfMemoryException">
            There is not enough memory available on the system.
            </exception>
        </member>
        <member name="P:GraphForms.Algorithms.Digraph`2.EdgeVersion">
            <summary>
            Gets the current "version" of this graph's internal edge list,
            which is incremented each time an edge is inserted into or 
            removed from this graph.</summary><seealso cref="P:GraphForms.Algorithms.Digraph`2.NodeVersion"/>
        </member>
        <member name="P:GraphForms.Algorithms.Digraph`2.Edges">
            <summary>
            An array of all the <typeparamref name="Edge"/> instances
            contained in this <see cref="T:Digraph`2{Node,Edge}"/>,
            in the same order as all functions with an <c>edgeIndex</c>
            argument.</summary><seealso cref="P:GraphForms.Algorithms.Digraph`2.InternalEdges"/>
            <seealso cref="P:GraphForms.Algorithms.Digraph`2.Nodes"/>
        </member>
        <member name="P:GraphForms.Algorithms.Digraph`2.InternalEdges">
            <summary>
            An array of all the <see cref="T:GraphForms.Algorithms.Digraph`2.GEdge"/> instances currently
            contained within this <see cref="T:Digraph`2{Node,Edge}"/>,
            in the same order as all functions with an <c>edgeIndex</c>
            argument.</summary><seealso cref="P:GraphForms.Algorithms.Digraph`2.Edges"/>
            <seealso cref="P:GraphForms.Algorithms.Digraph`2.InternalNodes"/>
        </member>
        <member name="T:GraphForms.Algorithms.Digraph`2.GEdge">
            <summary>
            This class is used to store an <typeparamref name="Edge"/> instance
            along with <see cref="T:GraphForms.Algorithms.Digraph`2.GNode"/> instances that store the edge's
            <see cref="P:IGraphEdge`1{Node}.SrcNode"/> and 
            <see cref="P:IGraphEdge`1{Node}.DstNode"/> in their respective
            <see cref="F:GraphForms.Algorithms.Digraph`2.GNode.Data"/>.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Digraph`2.GEdge.SrcNode">
            <summary>
            The source node of this edge; its parent.
            </summary><remarks>
            The <see cref="T:GraphForms.Algorithms.Digraph`2.GNode"/> instance that stores the
            <see cref="P:IGraphEdge`1{Node}.SrcNode"/> of 
            <see cref="F:GraphForms.Algorithms.Digraph`2.GEdge.Data"/>.
            </remarks>
        </member>
        <member name="F:GraphForms.Algorithms.Digraph`2.GEdge.DstNode">
            <summary>
            The destination node of this edge; its child.
            </summary><remarks>
            The <see cref="T:GraphForms.Algorithms.Digraph`2.GNode"/> instance that stores the
            <see cref="P:IGraphEdge`1{Node}.DstNode"/> of 
            <see cref="F:GraphForms.Algorithms.Digraph`2.GEdge.Data"/>.
            </remarks>
        </member>
        <member name="F:GraphForms.Algorithms.Digraph`2.GEdge.Data">
            <summary>
            The underlying data that this edge represents.
            </summary><remarks>
            The underlying <typeparamref name="Edge"/> instance that
            this <see cref="T:GraphForms.Algorithms.Digraph`2.GEdge"/> instance represents.
            </remarks>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.GEdge.#ctor(GraphForms.Algorithms.Digraph{`0,`1}.GNode,GraphForms.Algorithms.Digraph{`0,`1}.GNode,`1)">
            <summary>
            Initializes a new <see cref="T:GraphForms.Algorithms.Digraph`2.GEdge"/> instance with the 
            given source and destination <see cref="T:GraphForms.Algorithms.Digraph`2.GNode"/> instances
            and the given <typeparamref name="Edge"/> instance.
            </summary>
            <param name="srcNode">The source node.</param>
            <param name="dstNode">The destination node.</param>
            <param name="data">The underlying edge data.</param>
            <remarks>
            The <see cref="F:GraphForms.Algorithms.Digraph`2.GNode.Data"/> of <paramref name="srcNode"/>
            and <paramref name="dstNode"/> must match the respective 
            <see cref="P:IGraphEdge{Node}`1.SrcNode"/> and 
            <see cref="P:IGraphEdge`1{Node}.DstNode"/> of 
            <paramref name="data"/>.</remarks>
        </member>
        <member name="T:GraphForms.Algorithms.Digraph`2.GNode">
            <summary>
            This class is used internally to store instances of the
            <typeparamref name="Node"/> class along with additional data
            used for traversing its containing 
            <see cref="T:Digraph`2{Node,Edge}"/> instance.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Digraph`2.GNode.Data">
            <summary>
            The underlying <typeparamref name="Node"/> data that this
            <see cref="T:GraphForms.Algorithms.Digraph`2.GNode"/> instance represents.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Digraph`2.GNode.mIndex">
            <summary>
            This node's index in its containing directional graph's 
            internal node list.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Digraph`2.GNode.mLoopCount">
            <summary>
            Current number of edges that have this node as both their
            SrcNode and DstNode.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Digraph`2.GNode.mSrcCount">
            <summary>
            Current number of edges that have this node as their SrcNode.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Digraph`2.GNode.mDstCount">
            <summary>
            Current number of edges that have this node as their DstNode.
            </summary>
        </member>
        <member name="F:GraphForms.Algorithms.Digraph`2.GNode.Color">
            <summary>
            Marks the state of visitation of this <see cref="T:GraphForms.Algorithms.Digraph`2.GNode"/>
            instance when it is being traversed by a search algorithm or
            some other manner of data processing.
            </summary>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.GNode.#ctor(`0,System.Int32)">
            <summary>
            Initializes a new <see cref="T:GraphForms.Algorithms.Digraph`2.GNode"/> instance representing
            the given <paramref name="data"/> with the given initial
            <paramref name="index"/> in the internal node list of the
            <see cref="T:Digraph`2{Node,Edge}"/> that created it.
            </summary>
            <param name="data">The data that this node represents.</param>
            <param name="index">The initial index of this node in its
            parent graph's internal node list.</param>
        </member>
        <member name="M:GraphForms.Algorithms.Digraph`2.GNode.TotalEdgeCount(System.Boolean)">
            <summary>
            Gets the current total number of edges in this node's graph
            that are connected to this node in either direction (both
            incoming and outgoing).
            </summary>
            <param name="includeLoops">Whether to include the number of
            self-looping edges in the returned edge count.</param>
            <returns>The sum of the <see cref="P:GraphForms.Algorithms.Digraph`2.GNode.IncomingEdgeCount"/> and
            <see cref="P:GraphForms.Algorithms.Digraph`2.GNode.OutgoingEdgeCount"/> (and the
            <see cref="P:GraphForms.Algorithms.Digraph`2.GNode.SelfLoopEdgeCount"/> if 
            <paramref name="includeLoops"/> is true).</returns>
        </member>
        <member name="P:GraphForms.Algorithms.Digraph`2.GNode.Index">
            <summary>
            Gets the current index of this node in its graph's
            <see cref="P:Digraph`2{Node,Edge}.InternalNodes"/> list.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Digraph`2.GNode.Hidden">
            <summary>
            Whether this node all graph processing algorithms in this 
            library, including both graph theory and layout algorithms.
            If true, this node will be ignored and skipped over by them.
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Digraph`2.GNode.IncomingEdgeCount">
            <summary>
            Gets the current number of edges in this node's graph that
            have this node as their destination/target (their arrow heads
            touch this node in a visual representation of the graph).
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Digraph`2.GNode.OutgoingEdgeCount">
            <summary>
            Gets the current number of edges in this node's graph that
            have this node as their source (their arrow tails
            touch this node in a visual representation of the graph).
            </summary>
        </member>
        <member name="P:GraphForms.Algorithms.Digraph`2.GNode.SelfLoopEdgeCount">
            <summary>
            Gets the current number of edges in this node's graph that
            have this node as both their destination/target and their
            source (their arrow heads and tails would touch this node in
            a visual representation of the graph).
            </summary>
        </member>
    </members>
</doc>
