<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Custom</name>
    </assembly>
    <members>
        <member name="T:System.Security.Cryptography.FNVHash">
            <summary>
            Base class implementing <see cref="T:System.Security.Cryptography.HashAlgorithm"/>.
            For full documentation, refer to http://www.sims2wiki.info/wiki.php?title=FNV
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.FNVHash.hash">
            <summary>
            Algorithm result, needs casting to appropriate size by concrete classes (because I'm lazy)
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.FNVHash.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Initialise the hash algorithm
            </summary>
            <param name="prime">algorithm-specific value</param>
            <param name="offset">algorithm-specific value</param>
        </member>
        <member name="M:System.Security.Cryptography.FNVHash.ComputeHash(System.String)">
            <summary>
            Method for hashing a string
            </summary>
            <param name="value">string</param>
            <returns>FNV hash of string</returns>
        </member>
        <member name="M:System.Security.Cryptography.FNVHash.Initialize">
            <summary>
            Nothing to initialize
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.FNVHash.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Implements the algorithm
            </summary>
            <param name="array">The input to compute the hash code for.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:System.Security.Cryptography.FNVHash.HashFinal">
            <summary>
            Returns the computed hash code.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:System.Security.Cryptography.FNV32">
            <summary>
            FNV32 hash routine
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.FNV32.#ctor">
            <summary>
            Initialise the hash algorithm
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.FNV32.GetHash(System.String)">
            <summary>
            Get the FNV32 hash for a string of text
            </summary>
            <param name="text">the text to get the hash for</param>
            <returns>the hash value</returns>
        </member>
        <member name="P:System.Security.Cryptography.FNV32.Hash">
            <summary>
            Gets the value of the computed hash code.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.FNV32.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
        </member>
        <member name="T:System.Security.Cryptography.FNV64">
            <summary>
            FNV64 hash routine
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.FNV64.#ctor">
            <summary>
            Initialise the hash algorithm
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.FNV64.GetHash(System.String)">
            <summary>
            Get the FNV64 hash for a string of text
            </summary>
            <param name="text">the text to get the hash for</param>
            <returns>the hash value</returns>
        </member>
        <member name="P:System.Security.Cryptography.FNV64.Hash">
            <summary>
            Gets the value of the computed hash code.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.FNV64.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.IDependentList`2">
            <summary>
            An extention to IList&lt;<typeparamref name="T"/>&gt; that has a parent object of class type <typeparamref name="U"/>
            </summary>
            <typeparam name="T">Type of list element</typeparam>
            <typeparam name="U">Type of parent class</typeparam>
        </member>
        <member name="T:System.ICloneableWithParent">
            <summary>
            Defines an object as having a parent object that can be changed on Clone()
            </summary>
        </member>
        <member name="M:System.ICloneableWithParent.Clone(System.Object)">
            <summary>
            Return a clone of the object with a new parent object.
            </summary>
            <param name="newParent">The new parent object</param>
            <returns>A clone of the object with <paramref name="newParent"/> as its new parent object.</returns>
        </member>
        <member name="T:System.Collections.Generic.AHandlerList`1">
            <summary>
            Abstract extension of <see cref="T:System.Collections.Generic.List`1"/>
            providing feedback on list updates through the supplied <see cref="T:System.EventHandler"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of list element</typeparam>
        </member>
        <member name="F:System.Collections.Generic.AHandlerList`1.handler">
            <summary>
            Holds the <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:System.Collections.Generic.AHandlerList`1"/> changes.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.AHandlerList`1.maxSize">
            <summary>
            The maximum size of the list, or -1 for no limit.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.#ctor(System.EventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.AHandlerList`1"/> class
            that is empty
            and with an unlimited size.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list.</param>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.#ctor(System.EventHandler,System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.AHandlerList`1"/> class,
            filled with the content of <paramref name="ilt"/>
            and with an unlimited size.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list.</param>
            <param name="ilt">The <see cref="T:System.Collections.Generic.IList`1"/> to use as the initial content of the list.</param>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.#ctor(System.EventHandler,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.AHandlerList`1"/> class
            that is empty
            and with maximum size of <paramref name="size"/>.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list.</param>
            <param name="size">Maximum number of elements in the list.</param>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.#ctor(System.EventHandler,System.Int64,System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.AHandlerList`1"/> class,
            filled with the content of <paramref name="ilt"/>
            and with maximum size of <paramref name="size"/>.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list.</param>
            <param name="size">Maximum number of elements in the list.</param>
            <param name="ilt">The <see cref="T:System.Collections.Generic.IList`1"/> to use as the initial content of the list.</param>
            <remarks>Does not throw an exception if <paramref name="ilt"/>.Count is greater than <paramref name="size"/>.
            An exception will be thrown on any attempt to add further items unless the Count is reduced first.</remarks>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            The collection itself cannot be null, but it can contain elements that are null, if type <typeparamref name="T"/> is a reference type.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when list size would be exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
            <remarks>Calls <see cref="M:System.Collections.Generic.AHandlerList`1.Add(`0)"/> for each item in <paramref name="collection"/>.</remarks>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the <see cref="T:System.Collections.Generic.AHandlerList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            The collection itself cannot be null, but it can contain elements that are null, if type <typeparamref name="T"/> is a reference type.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="T:System.Collections.Generic.AHandlerList`1"/>.Count.
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when list size would be exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
            <remarks>Calls <see cref="M:System.Collections.Generic.AHandlerList`1.Insert(System.Int32,`0)"/> for each item in <paramref name="collection"/>.</remarks>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The System.Predicate&lt;T&gt; delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="T:System.Collections.Generic.AHandlerList`1"/>.Count.
            </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <param name="count">The number of elements in the range to reverse.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="T:System.Collections.Generic.AHandlerList`1"/>.Count.
            </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.Sort">
            <summary>
            Sorts the elements in the entire <see cref="T:System.Collections.Generic.AHandlerList`1"/> using the default comparer.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The default comparer <see cref="T:System.Collections.Generic.Comparer`1"/>.Default
            cannot find an implementation of the <see cref="T:System.IComparable`1"/> generic interface
            or the System.IComparable interface for type <typeparamref name="T"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:System.Collections.Generic.AHandlerList`1"/> using the specified <see cref="T:System.Comparison`1"/>.
            </summary>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> to use when comparing elements.</param>
            <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparison"/> caused an error during the sort.
            For example, <paramref name="comparison"/> might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparison"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:System.Collections.Generic.AHandlerList`1"/> using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements,
            or null to use the default comparer <see cref="T:System.Collections.Generic.Comparer`1"/>.Default.</param>
            <exception cref="T:System.ArgumentException">
            The implementation of <paramref name="comparer"/> caused an error during the sort.
            For example, <paramref name="comparer"/> might not return 0 when comparing an item with itself.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is null, and the default comparer <see cref="T:System.Collections.Generic.Comparer`1"/>.Default
            cannot find implementation of the <see cref="T:System.IComparable`1"/> generic interface
            or the System.IComparable interface for type <typeparamref name="T"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in <see cref="T:System.Collections.Generic.AHandlerList`1"/> using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The number of elements in the range to sort.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements,
            or null to use the default comparer <see cref="T:System.Collections.Generic.Comparer`1"/>.Default.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            -or-
            The implementation of <paramref name="comparer"/> caused an error during the sort.
            For example, <paramref name="comparer"/> might not return 0 when comparing an item with itself.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is null, and the default comparer <see cref="T:System.Collections.Generic.Comparer`1"/>.Default
            cannot find implementation of the <see cref="T:System.IComparable`1"/> generic interface
            or the System.IComparable interface for type <typeparamref name="T"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.AHandlerList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when list size exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.AHandlerList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.Add(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when list size exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.AHandlerList`1"/>
            otherwise, false. This method also returns false if item is not found in
            the original <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.OnListChanged">
            <summary>
            Invokes the list change event handler.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.AHandlerList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="P:System.Collections.Generic.AHandlerList`1.MaxSize">
            <summary>
            The maximum size of the list, or -1 for no limit (read-only).
            </summary>
        </member>
        <member name="T:System.Security.Cryptography.Sims3PackCRC">
            <summary>
            Calculate the CRC of a data chunk stored in a Sims3Pack file.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.Sims3PackCRC.#ctor(System.UInt64)">
            <summary>
            Create a new CRC algorithm with an optional seed.
            </summary>
            <param name="seed">Optional CRC algorithm seed.</param>
        </member>
        <member name="M:System.Security.Cryptography.Sims3PackCRC.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update the running hash with the data passed.
            </summary>
            <param name="array">The input to compute the hash code for.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:System.Security.Cryptography.Sims3PackCRC.HashFinal">
            <summary>
            Finalize the computation of the hash value.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:System.Security.Cryptography.Sims3PackCRC.Initialize">
            <summary>
            Initialize the Sims3PackCRC by setting the current CRC value to the seed.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.Sims3PackCRC.CalculateCRC(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculates the Sims3Pack CRC value for the specified region of the specified byte array.
            </summary>
            <param name="buffer">The input to calculate the CRC for.</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
            <returns>The calculated CRC.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is an invalid value.  -or- <paramref name="buffer"/> length is invalid.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is out of range. This parameter requires a non-negative number.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Sims3PackCRC.CalculateCRC(System.IO.Stream)">
            <summary>
            Calculate the CRC for the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The input to calculate the CRC for.</param>
            <param name="seed">Optional CRC algorithm seed.</param>
            <returns>CRC of <paramref name="stream"/>.</returns>
        </member>
        <member name="P:System.Security.Cryptography.Sims3PackCRC.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
        </member>
        <member name="T:System.ArgumentLengthException">
            <summary>
            Represents an error in the length of an argument to a method
            </summary>
        </member>
        <member name="M:System.ArgumentLengthException.#ctor">
            <summary>
            Initializes a new instance of the System.ArgumentLengthException class.
            </summary>
        </member>
        <member name="M:System.ArgumentLengthException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.ArgumentLengthException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:System.ArgumentLengthException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the System.ArgumentLengthException class with a predefined message based on
            <paramref name="argument"/> and <paramref name="length"/>.
            </summary>
            <param name="argument">Name of the method argument in error</param>
            <param name="length">Valid length of the argument</param>
        </member>
        <member name="M:System.ArgumentLengthException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the System.ArgumentLengthException class with a formatted error message.
            See <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </summary>
            <param name="format">format string</param>
            <param name="formatparams">format string substitutions</param>
        </member>
        <member name="M:System.Collections.Generic.ADependentList`2.Clone(System.Object)">
            <summary>
            Creates a copy of the list with the given parent
            </summary>
            <returns>Object of the same type as the list</returns>
        </member>
        <member name="M:System.Collections.Generic.ADependentList`2.Clone(`1)">
            <summary>
            Creates a copy of the list with the given parent
            </summary>
            <returns>Object of the same type as the list</returns>
        </member>
        <member name="M:System.Collections.Generic.ADependentList`2.Clone">
            <summary>
            Creates a copy of the list with the same parent
            </summary>
            <returns>Object of the same type as the list</returns>
        </member>
        <member name="T:System.Boolset">
            <summary>
            A Boolset provides an easy way to handle (unsigned) integer types as a set of bitwise flags.
            </summary>
        </member>
    </members>
</doc>
